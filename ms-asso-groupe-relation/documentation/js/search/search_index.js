var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.025,1,2.237]],["body/modules/AppModule.html",[0,1.838,1,4.413,2,2.128,3,1.746,4,2.053,5,2.053,6,1.746,7,2.7,8,2.053,9,3.148,10,3.148,11,3.145,12,0.028,13,3.418,14,2.906,15,3.736,16,2.7,17,2.053,18,2.053,19,0.359,20,0.359,21,0.32,22,3.733,23,2.7,24,0.771,25,3.733,26,3.733,27,2.053,28,2.053,29,3.733,30,2.7,31,1.215,32,4.14,33,2.762,34,0.986,35,3.733,36,3.254,37,2.244,38,3.148,39,1.889,40,4.909,41,3.148,42,3.733,43,1.889,44,3.148,45,3.733,46,2.209,47,3.733,48,2.762,49,3.733,50,3.148,51,3.148,52,2.053,53,3.148,54,2.053,55,2.474,56,2.474,57,1.215,58,3.733,59,1.746,60,0.359,61,0.076,62,0.019,63,0.019]],["title/interfaces/AssoInterface.html",[64,1.178,65,2.029]],["body/interfaces/AssoInterface.html",[12,0.027,19,0.434,20,0.434,21,0.386,60,0.576,62,0.022,63,0.022,64,1.932,65,3.326,66,2.477,67,2.985,68,0.483,69,1.461,70,1.769,71,1.429,72,3.969,73,0.971,74,1.052,75,0.71,76,3.798,77,2.985,78,1.814,79,2.985,80,3.333,81,2.985,82,2.398,83,3.333,84,3.326]],["title/classes/AssoNameDTO.html",[61,0.069,85,2.237]],["body/classes/AssoNameDTO.html",[12,0.027,19,0.438,20,0.438,21,0.39,24,0.54,60,0.536,61,0.122,62,0.022,63,0.022,68,0.488,69,1.47,71,1.042,72,3.017,73,0.974,74,1,75,0.54,85,3.69,86,1.833,87,3.368,88,2.284,89,1.59,90,3.368,91,1.12,92,4.552,93,3.253,94,2.737,95,2.737,96,1.706,97,2.737,98,3.347,99,3.347,100,2.737]],["title/classes/Association.html",[61,0.069,101,1.265]],["body/classes/Association.html",[12,0.027,19,0.387,20,0.387,21,0.345,24,0.674,31,1.309,46,2.075,54,2.211,60,0.547,61,0.105,62,0.02,63,0.02,68,0.431,69,1.36,70,1.459,71,1.301,72,3.768,73,0.884,74,0.986,75,0.711,86,1.619,89,1.985,91,1.398,93,3.033,94,2.417,95,2.417,96,1.507,98,2.417,99,2.417,100,2.417,101,2.131,102,2.665,103,3.39,104,4.021,105,4.021,106,4.021,107,2.975,108,3.39,109,4.021,110,4.436,111,2.833,112,2.975,113,4.436,114,2.417,115,2.211,116,2.975,117,2.975,118,2.975,119,2.975,120,2.665,121,2.975,122,4.021,123,4.021,124,1.743,125,2.665,126,3.39]],["title/controllers/AssociationController.html",[127,1.708,128,2.237]],["body/controllers/AssociationController.html",[12,0.028,19,0.159,20,0.159,21,0.23,24,0.6,34,0.437,36,1.781,54,3.025,59,0.773,60,0.159,61,0.034,62,0.011,63,0.011,68,0.177,70,1.433,71,1.158,73,0.872,75,0.6,78,2.413,79,2.591,82,2.509,84,1.616,88,0.578,89,1.827,91,1.286,97,2.919,101,2.267,115,0.909,124,0.717,127,1.718,128,2.25,129,1.394,130,1.257,131,3.228,132,2.688,133,2.688,134,3.395,135,2.863,136,2.688,137,3.296,138,2.688,139,2.688,140,3.395,141,1.654,142,3.58,143,2.688,144,1.654,145,3.909,146,2.591,147,3.395,148,2.193,149,3.802,150,2.106,151,2.967,152,1.654,153,2.688,154,1.654,155,3.395,156,1.654,157,2.688,158,1.654,159,2.688,160,2.688,161,2.688,162,2.688,163,2.688,164,2.266,165,2.266,166,3.885,167,3.395,168,1.989,169,2.688,170,1.654,171,2.688,172,1.654,173,1.989,174,2.873,175,1.989,176,3.395,177,2.534,178,1.654,179,1.654,180,2.688,181,1.654,182,2.011,183,3.395,184,2.688,185,1.654,186,2.534,187,1.654,188,2.688,189,1.654,190,3.395,191,1.654,192,3.054,193,2.688,194,1.654,195,3.395,196,1.654,197,2.688,198,1.654,199,1.616,200,2.512,201,3.395,202,0.909,203,1.224,204,3.978,205,0.837,206,1.224,207,1.224,208,1.224,209,0.837,210,0.909,211,1.587,212,1.394,213,1.654,214,1.654,215,1.654,216,0.837,217,0.994,218,1.224,219,1.224,220,0.837,221,1.224,222,0.837,223,0.837,224,2.366,225,1.654,226,2.647,227,2.193,228,2.647,229,1.654,230,2.647,231,2.647,232,2.876,233,2.876,234,1.654,235,1.654,236,1.654,237,1.654,238,2.512,239,3.909,240,1.654,241,1.394,242,1.654,243,1.654,244,1.654,245,1.654,246,1.654,247,1.989,248,1.989,249,1.654,250,1.654,251,1.654,252,1.654,253,1.654]],["title/classes/AssociationDTO.html",[61,0.069,97,2.029]],["body/classes/AssociationDTO.html",[12,0.027,19,0.408,20,0.408,21,0.363,24,0.503,60,0.513,61,0.118,62,0.021,63,0.021,68,0.454,69,1.406,70,1.731,71,1.333,72,3.861,73,0.95,74,1.014,75,0.691,85,2.809,86,1.707,87,3.136,88,2.341,89,2.034,90,3.136,91,1.433,93,3.252,94,2.548,95,2.548,96,1.589,97,3.203,98,3.203,99,3.203,100,2.548,254,3.574,255,4.238,256,4.238,257,4.238]],["title/modules/AssociationModule.html",[0,1.025,11,1.708]],["body/modules/AssociationModule.html",[0,1.898,2,1.65,3,1.78,4,2.094,5,2.094,6,1.78,7,3.046,8,3.046,11,3.303,12,0.028,13,3.046,14,2.976,16,2.735,17,2.094,18,2.094,19,0.367,20,0.367,21,0.326,23,2.735,24,0.781,27,2.094,28,2.094,30,2.094,31,1.24,34,1.005,52,2.094,54,3.046,57,1.24,59,2.325,60,0.367,61,0.077,62,0.02,63,0.02,73,0.592,111,2.735,125,3.296,128,3.671,207,2.817,211,3.122,212,3.21,258,3.21,259,3.21,260,3.21,261,3.807,262,3.807,263,2.735,264,3.807,265,3.807,266,2.817,267,2.289,268,1.65,269,2.817,270,2.817,271,2.817]],["title/injectables/AssociationService.html",[211,1.578,272,1.178]],["body/injectables/AssociationService.html",[12,0.028,19,0.137,20,0.137,21,0.262,24,0.54,27,0.785,28,0.785,31,0.465,34,0.377,36,1.578,37,1.431,43,1.55,46,0.575,54,2.623,57,0.997,60,0.137,61,0.029,62,0.009,63,0.009,65,3.074,68,0.153,70,1.448,71,0.327,73,0.942,74,0.97,75,0.606,78,2.205,79,3.479,81,0.946,82,2.564,84,2.149,88,0.499,91,1.291,101,2.41,115,0.785,124,2.373,130,1.113,131,3.198,135,2.008,148,2.216,149,3.291,150,2.059,151,2.818,173,1.762,174,2.604,177,2.504,182,1.113,186,3.109,199,1.431,202,0.785,207,1.056,211,1.671,216,0.722,217,0.858,220,0.722,222,1.205,223,1.55,224,2.454,226,2.587,227,2.275,228,2.77,230,2.587,231,2.587,232,2.887,233,2.811,241,2.008,263,0.785,268,0.619,272,0.832,273,0.785,274,1.204,275,2.381,276,2.381,277,3.575,278,2.381,279,2.381,280,2.381,281,2.381,282,3.575,283,2.381,284,1.428,285,2.645,286,2.414,287,2.304,288,1.428,289,2.381,290,2.381,291,1.428,292,2.645,293,2.381,294,1.428,295,2.381,296,4.022,297,1.428,298,1.428,299,2.645,300,2.381,301,1.428,302,2.381,303,1.428,304,2.381,305,1.428,306,4.292,307,2.381,308,1.428,309,2.381,310,1.428,311,2.381,312,1.428,313,2.008,314,1.056,315,0.946,316,1.428,317,1.428,318,1.056,319,1.431,320,0.946,321,1.428,322,1.056,323,1.428,324,3.014,325,2.381,326,2.381,327,1.762,328,1.428,329,2.008,330,2.266,331,1.428,332,1.204,333,1.056,334,1.428,335,1.428,336,1.428,337,1.204,338,1.428,339,1.056,340,1.204,341,2.381,342,3.014,343,1.428,344,1.428,345,2.381,346,1.428,347,1.428,348,1.428,349,3.018,350,3.973,351,3.063,352,1.428,353,1.428,354,3.575,355,3.575,356,1.428,357,1.428,358,2.008,359,2.369,360,0.785,361,1.204,362,1.428,363,1.428,364,1.428,365,1.428,366,2.381,367,1.431,368,2.381,369,2.008,370,2.008,371,2.381,372,2.381,373,1.428,374,1.578,375,2.381,376,2.008,377,2.381]],["title/modules/DatabaseModule.html",[0,1.025,378,2.497]],["body/modules/DatabaseModule.html",[0,1.792,2,2.174,12,0.027,19,0.483,20,0.483,21,0.43,23,2.758,24,0.7,30,2.758,31,1.633,34,1.324,53,4.229,60,0.483,61,0.102,62,0.023,63,0.023,378,4.367,379,5.016]],["title/classes/Group.html",[61,0.069,380,1.856]],["body/classes/Group.html",[12,0.028,19,0.329,20,0.329,21,0.293,24,0.697,31,1.114,37,2.057,46,2.115,60,0.506,61,0.094,62,0.018,63,0.018,68,0.367,69,1.223,71,1.202,73,0.816,74,0.994,75,0.735,86,1.378,89,2.054,91,1.446,93,2.657,94,2.057,95,2.057,96,1.282,98,2.057,99,2.057,100,2.057,101,1.282,103,2.885,107,2.532,108,2.885,110,4.485,111,2.547,112,2.532,113,4.485,114,2.057,115,2.888,116,3.427,117,2.532,118,2.532,119,2.532,120,2.268,121,2.532,124,1.483,164,2.885,268,1.483,380,3.095,381,2.268,382,3.481,383,3.886,384,3.481,385,3.906,386,2.885,387,2.885,388,4.745,389,3.421,390,3.421,391,3.421,392,2.785,393,3.421,394,3.421,395,3.421,396,3.421,397,3.421,398,3.421,399,4.632,400,2.785,401,3.906,402,2.885,403,2.885,404,2.057,405,2.885,406,2.268,407,2.885,408,4.632,409,3.421,410,3.906,411,2.885,412,3.421,413,3.421,414,2.885,415,2.268,416,2.885]],["title/controllers/GroupController.html",[127,1.708,417,2.237]],["body/controllers/GroupController.html",[12,0.028,19,0.142,20,0.142,21,0.127,24,0.548,34,0.39,56,3.665,59,0.691,60,0.142,61,0.03,62,0.01,63,0.01,68,0.158,70,1.466,71,1.185,73,0.805,74,0.381,75,0.667,78,2.577,82,1.583,88,0.516,89,1.854,91,1.306,101,1.94,127,1.588,130,1.146,131,3.248,137,3.08,142,3.377,148,2.243,149,3.788,150,2.138,151,2.957,174,2.852,175,3.715,177,3.137,182,1.708,186,2.661,199,1.473,200,1.813,202,0.813,203,1.093,204,3.829,205,0.748,206,1.093,208,1.093,209,0.748,210,0.813,216,0.748,218,1.093,219,1.093,220,0.748,221,1.093,222,0.748,223,0.748,224,2.586,226,2.687,227,2.301,228,2.687,230,2.687,231,2.687,232,2.92,233,2.92,238,2.996,247,2.323,248,2.323,267,0.888,286,1.588,339,2.702,369,3.682,380,3.355,406,0.98,417,1.624,418,1.246,419,2.066,420,2.066,421,2.45,422,2.45,423,2.45,424,2.45,425,2.45,426,3.139,427,2.647,428,3.139,429,1.246,430,3.519,431,2.45,432,1.478,433,2.066,434,3.139,435,1.478,436,2.45,437,1.478,438,3.139,439,1.478,440,2.45,441,1.478,442,1.478,443,2.45,444,1.478,445,2.45,446,3.139,447,1.478,448,2.45,449,1.478,450,3.139,451,1.478,452,2.45,453,1.478,454,2.066,455,3.08,456,3.139,457,1.478,458,2.45,459,1.478,460,3.08,461,3.652,462,3.139,463,1.478,464,2.45,465,1.478,466,3.139,467,1.478,468,3.652,469,2.45,470,1.478,471,2.066,472,3.207,473,3.139,474,1.478,475,2.45,476,1.478,477,3.139,478,1.478,479,1.478,480,2.45,481,1.478,482,2.066,483,3.139,484,1.246,485,1.246,486,1.246,487,1.478,488,1.478,489,1.478,490,1.478,491,1.478,492,1.478,493,1.478,494,1.478,495,1.478,496,1.478,497,1.478,498,1.478,499,1.478,500,1.478,501,1.478,502,1.478,503,1.478,504,1.093,505,2.066,506,1.478,507,1.478,508,1.478]],["title/classes/GroupDto.html",[61,0.069,430,2.237]],["body/classes/GroupDto.html",[12,0.027,19,0.38,20,0.38,21,0.338,24,0.468,46,2.05,60,0.38,61,0.104,62,0.02,63,0.02,68,0.423,69,1.344,70,1.787,71,1.29,73,0.876,74,1.011,75,0.731,86,1.59,88,2.374,89,2.152,90,2.92,91,1.516,93,2.851,94,2.373,95,2.373,96,1.479,98,2.373,99,2.373,100,2.373,254,3.328,382,3.735,383,4.17,384,3.735,392,3.061,400,3.579,401,4.292,402,3.328,407,3.328,411,3.328,430,3.374,509,3.328,510,3.947,511,3.947,512,3.947,513,3.947,514,3.947,515,3.947,516,3.328]],["title/interfaces/GroupInterface.html",[64,1.178,517,2.237]],["body/interfaces/GroupInterface.html",[12,0.027,19,0.432,20,0.432,21,0.385,60,0.432,62,0.022,63,0.022,64,1.569,66,2.471,68,0.482,69,1.458,70,1.847,71,1.428,73,0.97,74,1.062,75,0.76,382,4.135,383,4.616,384,4.135,392,3.596,517,3.661,518,3.788]],["title/modules/GroupModule.html",[0,1.025,13,1.856]],["body/modules/GroupModule.html",[0,1.899,2,1.654,3,1.784,4,2.098,5,2.098,6,1.784,7,3.049,8,2.739,11,2.805,12,0.028,13,3.591,14,2.978,16,2.739,17,2.098,18,2.098,19,0.367,20,0.367,21,0.327,23,2.739,24,0.781,27,2.098,28,2.098,30,2.098,31,1.242,34,1.007,52,2.098,56,3.301,57,1.242,59,2.329,60,0.367,61,0.078,62,0.02,63,0.02,73,0.593,111,2.739,216,1.931,217,2.294,263,2.739,268,1.654,269,2.823,271,2.823,286,3.359,380,2.098,415,3.301,417,3.675,486,3.217,519,3.217,520,3.816,521,3.217,522,3.217,523,3.816,524,3.217,525,3.816,526,3.816,527,3.816,528,3.816]],["title/injectables/GroupService.html",[272,1.178,286,1.708]],["body/injectables/GroupService.html",[12,0.028,19,0.122,20,0.122,21,0.108,24,0.51,27,0.695,28,0.695,31,0.412,34,0.334,36,1.425,43,1.875,46,0.866,52,1.182,54,0.695,56,3.677,57,0.7,60,0.122,61,0.026,62,0.009,63,0.009,68,0.136,70,1.461,71,0.492,73,0.912,74,0.98,75,0.675,78,2.432,82,2.046,88,0.441,91,1.297,101,1.934,120,0.838,124,2.237,130,1.005,131,3.211,148,2.237,149,3.102,150,2.078,151,2.845,174,2.629,177,2.595,182,1.005,186,3.051,199,2.423,202,0.695,211,1.733,216,0.64,217,0.76,220,0.64,222,1.088,223,1.419,224,2.513,226,2.611,227,2.369,228,2.845,230,2.611,231,2.611,232,2.956,233,2.838,263,0.695,268,0.548,272,0.751,273,0.695,285,2.447,286,1.088,287,2.176,292,2.074,296,2.364,299,1.59,313,1.812,314,0.935,315,0.838,318,0.935,319,0.76,320,0.838,322,0.935,324,2.364,327,2.447,329,2.364,330,1.59,333,1.59,340,1.066,342,1.812,349,1.425,358,1.066,359,2.192,360,0.695,367,0.76,370,1.812,374,2.85,376,1.812,380,3.547,382,1.425,384,1.425,406,0.838,419,1.812,420,1.812,427,1.812,429,1.812,454,3.399,455,3.399,460,1.812,471,1.812,472,2.671,482,1.812,484,1.066,504,2.742,505,3.979,517,3.335,529,1.066,530,2.149,531,2.149,532,3.307,533,2.149,534,2.149,535,2.149,536,2.149,537,2.149,538,2.149,539,1.264,540,2.364,541,1.264,542,3.307,543,2.149,544,1.264,545,2.149,546,1.264,547,2.149,548,1.264,549,2.149,550,1.264,551,1.264,552,2.149,553,1.264,554,2.149,555,1.264,556,2.149,557,1.264,558,2.149,559,1.264,560,3.307,561,2.149,562,1.264,563,2.804,564,2.149,565,2.149,566,1.264,567,2.149,568,1.264,569,1.066,570,1.264,571,1.264,572,2.804,573,1.264,574,1.264,575,1.264,576,1.264,577,1.066,578,2.149,579,2.149,580,2.149,581,1.264,582,1.264,583,1.264,584,0.935,585,1.264,586,1.264,587,1.264,588,1.264,589,1.264,590,1.264,591,3.307,592,2.804,593,1.264,594,1.264,595,2.804,596,1.264,597,1.264,598,1.264,599,2.149,600,1.066,601,1.264,602,1.264,603,1.264,604,1.264,605,1.264,606,1.264,607,0.838,608,1.812,609,1.264,610,1.425,611,1.264,612,1.264,613,1.264,614,2.149,615,1.264,616,1.066,617,1.264,618,1.264,619,1.264,620,2.788,621,1.264,622,1.264,623,2.149,624,1.264,625,1.812,626,3.307,627,1.264,628,1.264,629,2.149,630,1.264,631,1.264,632,1.264,633,1.264,634,1.264]],["title/classes/IdDto.html",[61,0.069,142,1.856]],["body/classes/IdDto.html",[12,0.027,19,0.465,20,0.465,21,0.414,24,0.573,60,0.465,61,0.117,62,0.023,63,0.023,68,0.518,69,1.524,74,0.898,75,0.573,78,2.486,86,1.946,88,2.156,89,1.688,91,1.189,93,2.921,96,1.811,142,3.175,400,3.471,635,4.075,636,4.833,637,4.833]],["title/classes/NameDto.html",[61,0.069,192,2.237]],["body/classes/NameDto.html",[12,0.027,19,0.469,20,0.469,21,0.418,24,0.578,60,0.469,61,0.118,62,0.023,63,0.023,68,0.523,69,1.532,73,0.963,74,0.902,75,0.578,86,1.963,88,2.164,89,1.702,91,1.199,93,3.135,96,1.827,192,3.846,638,4.11,639,4.874]],["title/modules/NatsMessengerModule.html",[0,1.025,14,1.578]],["body/modules/NatsMessengerModule.html",[0,1.866,2,2.194,3,1.829,4,2.151,5,2.151,6,1.829,7,3.085,8,3.085,12,0.028,14,2.995,16,2.783,17,2.151,18,2.151,19,0.377,20,0.377,21,0.335,23,2.151,24,0.704,32,3.298,33,2.894,34,1.033,44,3.298,46,1.575,50,3.298,57,1.827,60,0.377,61,0.08,62,0.02,63,0.02,73,0.787,210,2.151,287,3.423,319,3.043,640,3.298,641,3.298,642,3.298,643,2.894,644,2.894,645,3.911,646,3.911,647,5.61,648,3.911,649,3.911,650,5.061,651,3.911,652,3.911,653,3.298,654,3.298,655,3.911,656,2.592,657,3.911,658,3.911,659,3.911,660,5.061,661,3.911,662,3.911,663,3.911,664,3.911,665,3.911]],["title/injectables/NatsMessengerService.html",[272,1.178,287,1.708]],["body/injectables/NatsMessengerService.html",[0,1.087,12,0.027,19,0.344,20,0.344,21,0.307,24,0.637,34,0.945,43,1.81,57,1.749,60,0.344,61,0.073,62,0.019,63,0.019,68,0.384,70,1.521,73,0.835,74,0.955,75,0.637,88,1.249,91,1.321,130,2.232,131,3.107,148,2.328,150,1.922,151,2.9,209,3.296,210,1.968,220,1.81,222,2.415,223,1.81,226,2.415,227,2.328,228,1.81,230,2.415,231,2.9,266,2.647,267,2.151,270,2.647,272,1.667,273,1.968,287,2.415,315,2.371,319,2.151,320,2.371,337,4.025,643,4.24,644,4.24,654,3.017,666,3.017,667,4.773,668,3.578,669,5.97,670,3.578,671,4.773,672,3.578,673,5.73,674,4.773,675,3.578,676,3.578,677,3.578,678,3.578,679,3.578,680,4.773,681,3.164,682,3.578,683,3.578,684,4.773,685,3.578,686,3.578,687,3.578]],["title/classes/Relation.html",[39,1.708,61,0.069]],["body/classes/Relation.html",[12,0.028,19,0.335,20,0.335,21,0.298,24,0.722,31,1.132,39,2.866,46,2.281,60,0.51,61,0.095,62,0.019,63,0.019,68,0.373,69,1.236,74,0.984,75,0.738,78,1.886,80,3.465,86,1.4,89,1.978,91,1.393,96,1.303,101,1.755,107,3.465,110,4.375,111,2.575,112,2.573,113,4.375,114,2.09,115,2.912,116,3.465,117,2.573,118,2.573,119,2.573,120,2.304,121,4.191,124,1.507,165,3.948,168,3.465,268,1.507,385,3.948,386,2.932,387,2.932,388,3.948,400,3.183,403,2.932,404,2.09,405,2.932,414,2.932,688,2.304,689,3.917,690,3.509,691,3.509,692,3.509,693,3.477,694,3.477,695,4.682,696,3.477,697,3.555,698,3.477,699,3.477,700,3.477,701,2.304,702,2.932,703,2.304,704,3.477,705,3.477,706,2.932,707,2.932,708,3.477,709,3.477,710,3.477,711,2.304,712,2.932]],["title/controllers/RelationController.html",[127,1.708,713,2.237]],["body/controllers/RelationController.html",[12,0.028,19,0.188,20,0.188,21,0.167,24,0.615,34,0.515,39,3.134,55,3.285,57,1.233,59,0.912,60,0.188,61,0.04,62,0.012,63,0.012,68,0.209,70,1.468,71,1.187,73,0.806,74,0.589,75,0.615,78,2.473,82,1.861,88,0.681,89,1.811,91,1.275,101,1.61,127,1.917,130,1.433,131,3.217,142,3.309,148,2.248,149,3.657,150,2.088,151,2.917,166,3.194,174,2.814,175,2.803,177,2.954,182,2.183,186,2.954,200,2.803,202,1.072,203,1.443,204,3.668,205,0.987,206,1.443,208,1.443,209,0.987,210,1.072,216,0.987,218,1.443,219,1.443,220,0.987,221,1.443,222,0.987,223,0.987,224,2.511,226,2.624,227,2.248,228,2.508,230,2.624,231,2.624,232,2.852,233,2.852,238,2.268,247,1.443,248,1.443,267,1.172,333,3.178,339,2.268,359,2.032,360,1.686,374,2.032,485,1.644,616,3.194,620,3.621,703,1.292,713,2.032,714,1.644,715,3.065,716,2.585,717,2.585,718,3.065,719,3.065,720,3.065,721,3.194,722,1.95,723,3.748,724,3.065,725,1.95,726,3.788,727,1.95,728,3.065,729,1.95,730,3.788,731,3.065,732,3.065,733,1.95,734,2.585,735,3.788,736,3.065,737,1.95,738,3.065,739,1.95,740,3.788,741,1.95,742,3.065,743,1.95,744,3.788,745,3.788,746,1.95,747,3.065,748,1.95,749,3.788,750,1.95,751,3.065,752,1.95,753,3.788,754,1.443,755,2.083,756,1.644,757,1.95,758,1.95,759,1.95,760,1.95,761,1.95,762,1.95,763,1.95,764,1.95,765,1.95,766,1.95,767,1.95,768,1.95,769,1.95,770,1.95]],["title/classes/RelationDTO.html",[61,0.069,723,2.237]],["body/classes/RelationDTO.html",[12,0.027,19,0.404,20,0.404,21,0.36,24,0.628,60,0.404,61,0.108,62,0.021,63,0.021,68,0.45,69,1.398,74,0.997,75,0.722,86,1.69,88,2.364,89,2.127,91,1.498,96,1.573,400,3.914,689,4.291,690,3.844,691,3.844,692,3.844,697,3.487,701,2.782,702,3.539,706,3.539,723,3.509,771,3.539,772,4.197,773,4.197,774,4.197,775,4.197,776,4.197,777,5.294]],["title/interfaces/RelationInterface.html",[64,1.178,778,2.237]],["body/interfaces/RelationInterface.html",[12,0.027,19,0.444,20,0.444,21,0.395,24,0.547,60,0.444,62,0.022,63,0.022,64,1.611,66,2.537,68,0.495,69,1.482,74,1.05,75,0.747,689,4.659,690,4.173,691,4.173,692,4.173,697,3.785,701,3.057,778,3.72,779,3.89]],["title/modules/RelationModule.html",[0,1.025,15,2.029]],["body/modules/RelationModule.html",[0,1.9,2,1.658,3,1.788,4,2.103,5,2.103,6,1.788,7,3.052,8,3.052,11,2.808,12,0.028,14,2.98,15,3.928,16,2.743,17,2.103,18,2.103,19,0.368,20,0.368,21,0.328,23,2.743,24,0.782,27,2.103,28,2.103,30,2.103,31,1.245,34,1.01,52,2.103,55,3.679,57,1.245,59,2.332,60,0.368,61,0.078,62,0.02,63,0.02,73,0.595,111,2.743,263,2.743,266,2.83,267,2.299,268,1.658,269,2.83,270,2.83,271,2.83,524,3.225,711,3.306,713,3.679,754,2.83,755,3.674,756,3.225,780,3.225,781,3.225,782,3.824,783,3.225,784,3.824,785,3.824]],["title/injectables/RelationService.html",[272,1.178,755,1.856]],["body/injectables/RelationService.html",[12,0.028,19,0.182,20,0.182,21,0.162,24,0.608,31,0.616,34,0.499,37,1.8,39,2.943,43,0.957,46,0.762,55,3.397,60,0.182,61,0.038,62,0.012,63,0.012,68,0.203,70,1.505,71,0.685,73,0.826,74,0.965,75,0.649,78,2.407,82,1.831,91,1.307,101,1.122,124,1.298,130,1.4,131,3.202,146,1.254,148,2.304,150,2.064,151,3.025,173,2.215,174,2.76,177,2.819,182,1.4,186,2.923,199,1.8,202,1.04,211,2.152,216,0.957,217,1.137,220,1.515,222,1.515,223,1.515,224,2.795,226,2.594,227,2.304,228,2.476,230,2.594,231,2.689,232,3.082,233,2.819,263,1.04,268,0.82,272,1.045,273,1.04,285,3.125,292,2.215,299,2.215,314,1.4,315,1.254,318,1.4,319,1.137,320,1.254,322,1.4,327,2.215,330,1.4,332,1.595,359,3.523,361,1.595,374,2.462,472,2.462,504,2.749,516,3.132,540,3.132,569,1.595,577,2.524,600,1.595,607,1.254,608,1.595,610,1.254,653,1.595,690,1.984,691,1.984,692,2.462,697,1.137,701,1.254,703,1.254,716,2.524,717,2.524,721,2.524,734,3.132,754,1.4,755,1.646,778,3.715,786,1.595,787,2.993,788,2.993,789,2.993,790,2.993,791,1.892,792,1.892,793,2.993,794,2.993,795,1.892,796,2.993,797,1.892,798,4.223,799,2.993,800,1.892,801,2.993,802,2.993,803,2.993,804,1.892,805,2.993,806,1.892,807,2.993,808,1.892,809,2.993,810,2.993,811,1.892,812,2.993,813,1.892,814,1.892,815,1.892,816,1.892,817,1.892,818,1.892,819,1.892,820,1.892,821,1.892,822,1.892,823,1.892,824,1.892,825,1.892,826,1.892,827,1.892,828,1.892,829,2.993,830,1.892,831,1.892,832,1.892,833,1.984,834,1.254,835,1.892,836,1.892,837,1.892,838,1.892,839,1.892,840,1.892,841,1.892,842,1.892,843,1.4,844,1.595,845,1.892,846,1.892,847,1.892,848,1.892,849,1.984,850,1.892,851,1.892,852,1.892,853,1.892,854,2.524,855,1.892,856,1.892,857,1.892,858,1.892]],["title/injectables/RpcSuccessInterceptor.html",[205,1.708,272,1.178]],["body/injectables/RpcSuccessInterceptor.html",[12,0.028,19,0.271,20,0.271,21,0.241,24,0.479,34,0.743,43,2.615,48,3.823,57,1.683,60,0.271,61,0.057,62,0.016,63,0.016,64,1.411,68,0.302,70,0.797,71,0.925,73,0.437,74,0.437,75,0.334,91,0.692,124,1.219,130,1.889,146,3.133,148,1.219,150,2.081,182,1.889,205,2.044,209,3.212,224,2.416,227,2.049,272,1.411,273,1.547,349,1.864,360,2.222,367,2.842,392,1.691,404,1.691,584,2.989,607,1.864,610,2.678,656,3.425,681,4.053,833,3.776,834,3.133,843,2.081,849,3.425,859,1.864,860,4.357,861,3.986,862,3.406,863,3.406,864,4.357,865,3.425,866,4.04,867,3.406,868,4.357,869,5.064,870,4.357,871,2.812,872,3.406,873,3.406,874,3.406,875,3.406,876,3.406,877,3.406,878,3.406,879,3.406,880,3.406,881,2.081,882,2.371,883,3.107,884,2.371,885,4.216,886,2.371,887,3.406,888,2.081,889,2.081,890,2.081,891,2.081,892,2.081,893,2.371,894,2.371,895,2.371,896,2.371,897,2.371,898,3.406,899,2.371,900,2.371,901,2.371,902,2.371,903,3.406,904,2.371,905,2.371,906,3.406,907,2.371,908,2.371,909,2.371,910,2.989,911,2.371,912,3.107,913,2.081,914,2.989,915,2.989,916,2.371,917,2.371,918,2.371,919,2.371,920,2.371,921,2.371,922,2.371,923,2.371]],["title/interfaces/assoUserEditInterface.html",[64,1.178,77,2.237]],["body/interfaces/assoUserEditInterface.html",[12,0.027,19,0.446,20,0.446,21,0.397,60,0.584,62,0.022,63,0.022,64,1.967,65,2.788,66,2.55,67,3.074,68,0.497,69,1.487,71,1.062,73,0.721,74,1.043,75,0.668,76,3.911,77,3.733,78,2.54,79,4.181,80,3.432,81,3.074,82,2.441,83,3.432,84,3.386]],["title/coverage.html",[924,3.869]],["body/coverage.html",[6,1.545,12,0.027,21,0.283,39,1.672,61,0.129,62,0.018,63,0.018,64,2.029,65,1.986,67,2.998,75,0.392,77,2.189,85,2.189,87,3.346,97,1.986,101,1.238,102,2.998,125,2.189,127,2.609,128,2.189,129,2.785,142,1.817,174,1.545,192,2.189,205,1.672,211,1.545,272,2.029,274,2.785,286,1.672,287,1.672,380,1.817,381,2.998,415,2.189,417,2.189,418,2.785,430,2.189,509,2.785,517,2.189,518,2.785,529,2.785,635,2.785,638,2.785,643,2.444,644,2.444,666,2.785,688,2.998,711,2.189,713,2.189,714,2.785,723,2.189,755,1.817,771,2.785,778,2.189,779,2.785,786,2.785,833,3.418,859,3.676,865,2.189,883,1.986,924,2.785,925,3.303,926,3.303,927,3.303,928,6.806,929,5.546,930,5.157,931,6.141,932,6.253,933,3.303,934,3.303,935,3.303,936,3.303,937,3.813,938,3.813,939,3.813,940,3.303,941,5.157,942,3.813,943,3.303,944,3.303,945,3.303,946,3.303,947,5.157,948,3.303,949,3.303,950,3.303,951,2.785,952,4.522,953,5.157,954,3.303,955,3.303,956,3.303,957,3.303,958,2.785,959,3.303,960,3.303]],["title/dependencies.html",[3,1.896,961,2.383]],["body/dependencies.html",[3,1.992,12,0.028,31,1.387,33,3.152,34,1.125,57,1.387,61,0.109,62,0.021,63,0.021,96,1.596,114,2.561,210,2.342,404,2.561,881,3.152,962,4.259,963,4.259,964,5.839,965,4.259,966,4.259,967,4.259,968,4.259,969,4.259,970,4.259,971,4.259,972,4.259,973,4.259,974,4.259,975,4.259,976,4.259,977,4.259,978,4.259,979,4.259,980,4.259,981,4.259,982,4.259,983,4.259,984,4.259,985,3.591,986,4.259,987,4.259,988,4.259,989,4.259,990,4.259,991,5.839,992,4.259,993,4.259,994,4.259,995,4.259,996,4.259,997,4.259,998,4.259,999,4.259,1000,4.259,1001,4.259,1002,4.259,1003,4.259,1004,4.259]],["title/miscellaneous/enumerations.html",[1005,1.322,1006,3.418]],["body/miscellaneous/enumerations.html",[12,0.026,62,0.023,63,0.023,67,3.305,68,0.535,81,3.898,82,2.549,84,3.536,472,3.305,697,3.536,854,4.959,912,3.885,1005,2.332,1006,4.205,1007,4.987,1008,4.987,1009,4.987,1010,4.987]],["title/miscellaneous/functions.html",[1005,1.322,1011,3.418]],["body/miscellaneous/functions.html",[6,2.797,12,0.026,57,1.463,62,0.022,63,0.022,68,0.482,70,1.564,71,1.264,73,0.859,74,0.698,75,0.655,148,2.394,150,2.224,209,3.026,360,2.471,367,2.701,656,2.978,681,3.661,834,2.978,849,3.661,859,2.978,865,3.661,883,3.321,885,4.739,888,3.324,889,3.324,890,3.324,891,3.324,892,3.324,910,3.324,912,3.596,913,3.324,914,4.087,915,4.087,951,4.657,958,3.788,1005,2.101,1011,3.788,1012,4.492,1013,5.523]],["title/index.html",[68,0.303,1014,2.826,1015,2.826]],["body/index.html",[12,0.027,24,0.583,30,2.057,31,1.601,37,2.249,38,3.155,39,1.893,41,3.155,51,3.155,52,2.057,61,0.1,62,0.019,63,0.019,73,0.582,96,1.843,114,2.249,168,4.316,174,1.749,268,1.622,410,3.155,433,3.155,625,4.63,707,3.155,844,3.155,985,3.155,1016,3.741,1017,3.741,1018,3.741,1019,5.832,1020,3.741,1021,6.218,1022,4.916,1023,3.741,1024,3.741,1025,3.741,1026,3.741,1027,5.491,1028,3.155,1029,3.741,1030,6.058,1031,5.832,1032,3.741,1033,4.916,1034,3.741,1035,3.741,1036,3.741,1037,3.741,1038,4.916,1039,3.741,1040,4.916,1041,3.741,1042,4.916,1043,3.741,1044,5.491,1045,3.741,1046,3.741,1047,3.741,1048,3.741,1049,3.741,1050,3.741,1051,3.741,1052,4.916,1053,3.741,1054,3.741,1055,3.741,1056,3.741,1057,3.741,1058,3.741,1059,3.741,1060,3.741,1061,6.058,1062,5.491,1063,5.491,1064,3.741,1065,3.741,1066,3.741,1067,3.741,1068,3.741,1069,3.741,1070,3.741,1071,3.741,1072,3.741]],["title/modules.html",[2,1.989]],["body/modules.html",[1,3.277,2,2.143,11,2.502,12,0.023,13,2.719,14,2.312,15,2.972,62,0.023,63,0.023,378,3.658,1073,6.576,1074,6.576,1075,6.576,1076,6.668,1077,4.944,1078,4.944]],["title/overview.html",[1079,3.869]],["body/overview.html",[0,1.188,1,4.386,2,1.695,3,1.829,4,2.151,5,2.151,6,1.829,7,2.151,8,2.151,9,3.298,10,3.298,11,3.285,12,0.027,13,3.57,14,3.068,15,3.903,16,2.783,17,2.151,18,2.151,59,1.829,62,0.02,63,0.02,66,2.151,86,1.575,211,2.995,258,3.298,259,3.298,260,3.298,273,2.151,286,3.241,287,3.241,519,3.298,521,3.298,522,3.298,640,3.298,641,3.298,642,3.298,755,3.523,780,3.298,781,3.298,783,3.298,1079,3.298,1080,3.911,1081,3.911,1082,5.061,1083,3.911]],["title/properties.html",[69,1.07,961,2.383]],["body/properties.html",[12,0.027,62,0.024,63,0.024,69,1.381,71,1.197,1028,4.409,1084,5.229,1085,5.229,1086,5.229,1087,5.229]],["title/interfaces/responsePayloadNatsInterface.html",[64,1.178,883,2.029]],["body/interfaces/responsePayloadNatsInterface.html",[12,0.028,19,0.28,20,0.28,21,0.25,24,0.491,34,0.769,43,2.096,48,3.885,57,1.709,60,0.28,61,0.059,62,0.016,63,0.016,64,1.683,66,1.602,68,0.312,69,1.094,70,1.487,71,0.667,74,0.453,75,0.572,124,1.262,146,3.195,150,1.941,182,1.937,205,1.474,209,3.202,224,2.455,227,2.089,272,1.446,349,1.93,360,2.278,367,2.898,392,2.898,404,1.751,584,3.065,607,1.93,610,1.93,656,3.48,681,3.93,833,3.48,834,2.745,843,3.065,849,3.48,859,1.93,860,3.492,861,3.492,862,2.456,863,2.456,864,3.492,865,2.745,867,2.456,868,3.492,869,4.677,870,3.492,872,2.456,873,2.456,874,2.456,875,2.456,876,2.456,877,2.456,878,2.456,879,2.456,880,2.456,881,2.155,882,3.492,883,3.335,884,4.427,885,4.485,886,4.427,887,4.677,888,2.155,889,2.155,890,2.155,891,2.155,892,2.155,893,2.456,894,2.456,895,2.456,896,2.456,897,2.456,898,3.492,899,2.456,900,2.456,901,2.456,902,2.456,903,3.492,904,2.456,905,2.456,906,3.492,907,2.456,908,2.456,909,2.456,910,3.065,911,2.456,912,3.156,913,2.155,914,3.065,915,3.065,916,2.456,917,2.456,918,2.456,919,2.456,920,2.456,921,2.456,922,2.456,923,2.456]],["title/miscellaneous/typealiases.html",[1005,1.322,1088,4.054]],["body/miscellaneous/typealiases.html",[12,0.024,62,0.024,63,0.024,68,0.552,75,0.611,102,3.414,115,3.296,381,3.414,406,3.973,688,3.414,703,3.973,1005,2.409,1089,5.151,1090,4.343,1091,4.343,1092,4.343]],["title/miscellaneous/variables.html",[1005,1.322,1093,3.418]],["body/miscellaneous/variables.html",[12,0.027,46,2.21,62,0.022,63,0.022,68,0.477,74,0.853,75,0.651,83,4.877,102,2.947,125,3.638,126,3.749,381,2.947,415,3.638,416,3.749,688,2.947,711,3.638,712,3.749,912,3.963,937,3.749,938,5.242,939,5.242,942,3.749,1005,2.079,1090,3.749,1091,3.749,1092,3.749,1093,3.749,1094,5.488,1095,5.488,1096,5.488,1097,5.488]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AssoInterface.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"modules/DatabaseModule.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/assoUserEditInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/responsePayloadNatsInterface.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1084,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1001,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["0.3.16",{"_index":1004,"title":{},"body":{"dependencies.html":{}}}],["0.30.3",{"_index":982,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["0.51.13",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":992,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":909,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["1.0.0",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":950,"title":{},"body":{"coverage.html":{}}}],["10.0.3",{"_index":968,"title":{},"body":{"dependencies.html":{}}}],["10/12",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["11/12",{"_index":944,"title":{},"body":{"coverage.html":{}}}],["12/14",{"_index":946,"title":{},"body":{"coverage.html":{}}}],["16.1.4",{"_index":989,"title":{},"body":{"dependencies.html":{}}}],["2.14.0",{"_index":990,"title":{},"body":{"dependencies.html":{}}}],["2.3.2",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":948,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":949,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":1081,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":994,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1082,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":980,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":984,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1080,"title":{},"body":{"overview.html":{}}}],["6.3.0",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1002,"title":{},"body":{"dependencies.html":{}}}],["7/8",{"_index":955,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":957,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":956,"title":{},"body":{"coverage.html":{}}}],["8.11.0",{"_index":998,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":935,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":945,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":954,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1083,"title":{},"body":{"overview.html":{}}}],["9.0.1",{"_index":978,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":973,"title":{},"body":{"dependencies.html":{}}}],["9.1.6",{"_index":970,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["9.2.2",{"_index":971,"title":{},"body":{"dependencies.html":{}}}],["9/10",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["91",{"_index":943,"title":{},"body":{"coverage.html":{}}}],["_context",{"_index":874,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["_id",{"_index":376,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{}}}],["accessible",{"_index":665,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["add",{"_index":622,"title":{},"body":{"injectables/GroupService.html":{}}}],["added",{"_index":628,"title":{},"body":{"injectables/GroupService.html":{}}}],["adding",{"_index":482,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["additional",{"_index":888,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["addkid",{"_index":530,"title":{},"body":{"injectables/GroupService.html":{}}}],["addkid(kidid",{"_index":543,"title":{},"body":{"injectables/GroupService.html":{}}}],["addresses",{"_index":661,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["admin",{"_index":84,"title":{},"body":{"interfaces/AssoInterface.html":{},"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"interfaces/assoUserEditInterface.html":{},"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":1089,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allgroupsbyasso",{"_index":605,"title":{},"body":{"injectables/GroupService.html":{}}}],["allgroupsbyasso.map",{"_index":611,"title":{},"body":{"injectables/GroupService.html":{}}}],["already",{"_index":329,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{}}}],["api",{"_index":218,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{}}}],["apiproperty",{"_index":113,"title":{},"body":{"classes/Association.html":{},"classes/Group.html":{},"classes/Relation.html":{}}}],["apiproperty()@prop({type",{"_index":693,"title":{},"body":{"classes/Relation.html":{}}}],["app.module.ts",{"_index":1045,"title":{},"body":{"index.html":{}}}],["app/nats",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"modules/RelationModule.html":{}}}],["application",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"injectables/GroupService.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argon2",{"_index":981,"title":{},"body":{"dependencies.html":{}}}],["array",{"_index":359,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["array.isarray(kidsids",{"_index":827,"title":{},"body":{"injectables/RelationService.html":{}}}],["array.isarray(values",{"_index":907,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["arrays",{"_index":852,"title":{},"body":{"injectables/RelationService.html":{}}}],["asso",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"injectables/AssociationService.html":{},"classes/Group.html":{},"injectables/RelationService.html":{},"index.html":{}}}],["asso.id",{"_index":363,"title":{},"body":{"injectables/AssociationService.html":{}}}],["asso.role",{"_index":364,"title":{},"body":{"injectables/AssociationService.html":{}}}],["asso/delete/:id",{"_index":183,"title":{},"body":{"controllers/AssociationController.html":{}}}],["asso/role/admin/:id",{"_index":147,"title":{},"body":{"controllers/AssociationController.html":{}}}],["asso/role/user/:id",{"_index":155,"title":{},"body":{"controllers/AssociationController.html":{}}}],["asso/update/:id",{"_index":201,"title":{},"body":{"controllers/AssociationController.html":{}}}],["asso/user/:id",{"_index":167,"title":{},"body":{"controllers/AssociationController.html":{}}}],["asso_id",{"_index":689,"title":{},"body":{"classes/Relation.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{}}}],["assobyroleadmin",{"_index":132,"title":{},"body":{"controllers/AssociationController.html":{}}}],["assobyroleadmin(@payload('params",{"_index":245,"title":{},"body":{"controllers/AssociationController.html":{}}}],["assobyroleadmin(params",{"_index":141,"title":{},"body":{"controllers/AssociationController.html":{}}}],["assobyroleuser",{"_index":133,"title":{},"body":{"controllers/AssociationController.html":{}}}],["assobyroleuser(@payload('params",{"_index":243,"title":{},"body":{"controllers/AssociationController.html":{}}}],["assobyroleuser(params",{"_index":152,"title":{},"body":{"controllers/AssociationController.html":{}}}],["assobyuser",{"_index":134,"title":{},"body":{"controllers/AssociationController.html":{}}}],["assobyuser(@payload('params",{"_index":237,"title":{},"body":{"controllers/AssociationController.html":{}}}],["assobyuser(params",{"_index":156,"title":{},"body":{"controllers/AssociationController.html":{}}}],["associated",{"_index":591,"title":{},"body":{"injectables/GroupService.html":{}}}],["association",{"_index":101,"title":{"classes/Association.html":{}},"body":{"classes/Association.html":{},"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{},"coverage.html":{}}}],["association'})@ismongoid()@apiproperty",{"_index":389,"title":{},"body":{"classes/Group.html":{}}}],["association._id",{"_index":377,"title":{},"body":{"injectables/AssociationService.html":{}}}],["association.controller",{"_index":264,"title":{},"body":{"modules/AssociationModule.html":{}}}],["association.controller.ts:68",{"_index":242,"title":{},"body":{"controllers/AssociationController.html":{}}}],["association.name",{"_index":365,"title":{},"body":{"injectables/AssociationService.html":{}}}],["association.role",{"_index":372,"title":{},"body":{"injectables/AssociationService.html":{}}}],["association.service",{"_index":212,"title":{},"body":{"controllers/AssociationController.html":{},"modules/AssociationModule.html":{}}}],["association.service.ts:141",{"_index":352,"title":{},"body":{"injectables/AssociationService.html":{}}}],["association.service.ts:150",{"_index":357,"title":{},"body":{"injectables/AssociationService.html":{}}}],["association/:id",{"_index":190,"title":{},"body":{"controllers/AssociationController.html":{}}}],["association/association.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["association/byname/:name",{"_index":195,"title":{},"body":{"controllers/AssociationController.html":{}}}],["association/create/byuser/:id",{"_index":176,"title":{},"body":{"controllers/AssociationController.html":{}}}],["association_id",{"_index":382,"title":{},"body":{"classes/Group.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"injectables/GroupService.html":{}}}],["associationcontroller",{"_index":128,"title":{"controllers/AssociationController.html":{}},"body":{"controllers/AssociationController.html":{},"modules/AssociationModule.html":{},"coverage.html":{}}}],["associationdelete",{"_index":275,"title":{},"body":{"injectables/AssociationService.html":{}}}],["associationdelete(assoid",{"_index":290,"title":{},"body":{"injectables/AssociationService.html":{}}}],["associationdocument",{"_index":115,"title":{},"body":{"classes/Association.html":{},"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"classes/Group.html":{},"classes/Relation.html":{},"miscellaneous/typealiases.html":{}}}],["associationdto",{"_index":97,"title":{"classes/AssociationDTO.html":{}},"body":{"classes/AssoNameDTO.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"coverage.html":{}}}],["associationedit",{"_index":276,"title":{},"body":{"injectables/AssociationService.html":{}}}],["associationedit(assoid",{"_index":293,"title":{},"body":{"injectables/AssociationService.html":{}}}],["associationmodel",{"_index":289,"title":{},"body":{"injectables/AssociationService.html":{}}}],["associationmodule",{"_index":11,"title":{"modules/AssociationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/GroupModule.html":{},"modules/RelationModule.html":{},"modules.html":{},"overview.html":{}}}],["associations",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"injectables/GroupService.html":{}}}],["associationschema",{"_index":125,"title":{},"body":{"classes/Association.html":{},"modules/AssociationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["associationservice",{"_index":211,"title":{"injectables/AssociationService.html":{}},"body":{"controllers/AssociationController.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/RelationService.html":{},"coverage.html":{},"overview.html":{}}}],["assocreated",{"_index":334,"title":{},"body":{"injectables/AssociationService.html":{}}}],["assocreated._id",{"_index":344,"title":{},"body":{"injectables/AssociationService.html":{}}}],["assoexist",{"_index":585,"title":{},"body":{"injectables/GroupService.html":{}}}],["assoexists",{"_index":816,"title":{},"body":{"injectables/RelationService.html":{}}}],["assoid",{"_index":292,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["assoids",{"_index":595,"title":{},"body":{"injectables/GroupService.html":{}}}],["assoids.push(e.association.id",{"_index":598,"title":{},"body":{"injectables/GroupService.html":{}}}],["assointerface",{"_index":65,"title":{"interfaces/AssoInterface.html":{}},"body":{"interfaces/AssoInterface.html":{},"injectables/AssociationService.html":{},"interfaces/assoUserEditInterface.html":{},"coverage.html":{}}}],["assoname",{"_index":325,"title":{},"body":{"injectables/AssociationService.html":{}}}],["assonamedto",{"_index":85,"title":{"classes/AssoNameDTO.html":{}},"body":{"classes/AssoNameDTO.html":{},"classes/AssociationDTO.html":{},"coverage.html":{}}}],["assos",{"_index":239,"title":{},"body":{"controllers/AssociationController.html":{}}}],["assoservice",{"_index":540,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["assousereditinterface",{"_index":77,"title":{"interfaces/assoUserEditInterface.html":{}},"body":{"interfaces/AssoInterface.html":{},"interfaces/assoUserEditInterface.html":{},"coverage.html":{}}}],["async",{"_index":131,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["asyncapi/cli",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["au",{"_index":1049,"title":{},"body":{"index.html":{}}}],["author",{"_index":1087,"title":{},"body":{"properties.html":{}}}],["autre",{"_index":409,"title":{},"body":{"classes/Group.html":{}}}],["available",{"_index":1078,"title":{},"body":{"modules.html":{}}}],["avec",{"_index":1056,"title":{},"body":{"index.html":{}}}],["await",{"_index":228,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["badrequestexception",{"_index":314,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["badrequestexception('association",{"_index":332,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/RelationService.html":{}}}],["badrequestexception('group",{"_index":574,"title":{},"body":{"injectables/GroupService.html":{}}}],["based",{"_index":369,"title":{},"body":{"injectables/AssociationService.html":{},"controllers/GroupController.html":{}}}],["bcrypt",{"_index":983,"title":{},"body":{"dependencies.html":{}}}],["belonging",{"_index":460,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["body",{"_index":177,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["body.id",{"_index":508,"title":{},"body":{"controllers/GroupController.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/GroupModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RelationModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["branch",{"_index":1016,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1076,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1073,"title":{},"body":{"modules.html":{}}}],["cache",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/NatsMessengerModule.html":{}}}],["callhandler",{"_index":870,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["car",{"_index":408,"title":{},"body":{"classes/Group.html":{}}}],["cas",{"_index":1050,"title":{},"body":{"index.html":{}}}],["catch",{"_index":230,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["chain",{"_index":878,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["charge",{"_index":266,"title":{},"body":{"modules/AssociationModule.html":{},"injectables/NatsMessengerService.html":{},"modules/RelationModule.html":{}}}],["check",{"_index":327,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["child",{"_index":620,"title":{},"body":{"injectables/GroupService.html":{},"controllers/RelationController.html":{}}}],["class",{"_index":61,"title":{"classes/AssoNameDTO.html":{},"classes/Association.html":{},"classes/AssociationDTO.html":{},"classes/Group.html":{},"classes/GroupDto.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"classes/Relation.html":{},"classes/RelationDTO.html":{}},"body":{"modules/AppModule.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"modules/DatabaseModule.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"classes/RelationDTO.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["classes",{"_index":86,"title":{},"body":{"classes/AssoNameDTO.html":{},"classes/Association.html":{},"classes/AssociationDTO.html":{},"classes/Group.html":{},"classes/GroupDto.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"classes/Relation.html":{},"classes/RelationDTO.html":{},"overview.html":{}}}],["click",{"_index":1035,"title":{},"body":{"index.html":{}}}],["client",{"_index":650,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["clientproxy",{"_index":669,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["clientsmodule",{"_index":646,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["clientsmodule.register",{"_index":651,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_associationmodule",{"_index":258,"title":{},"body":{"modules/AssociationModule.html":{},"overview.html":{}}}],["cluster_associationmodule_exports",{"_index":260,"title":{},"body":{"modules/AssociationModule.html":{},"overview.html":{}}}],["cluster_associationmodule_imports",{"_index":261,"title":{},"body":{"modules/AssociationModule.html":{}}}],["cluster_associationmodule_providers",{"_index":259,"title":{},"body":{"modules/AssociationModule.html":{},"overview.html":{}}}],["cluster_groupmodule",{"_index":519,"title":{},"body":{"modules/GroupModule.html":{},"overview.html":{}}}],["cluster_groupmodule_exports",{"_index":521,"title":{},"body":{"modules/GroupModule.html":{},"overview.html":{}}}],["cluster_groupmodule_imports",{"_index":520,"title":{},"body":{"modules/GroupModule.html":{}}}],["cluster_groupmodule_providers",{"_index":522,"title":{},"body":{"modules/GroupModule.html":{},"overview.html":{}}}],["cluster_natsmessengermodule",{"_index":640,"title":{},"body":{"modules/NatsMessengerModule.html":{},"overview.html":{}}}],["cluster_natsmessengermodule_exports",{"_index":641,"title":{},"body":{"modules/NatsMessengerModule.html":{},"overview.html":{}}}],["cluster_natsmessengermodule_providers",{"_index":642,"title":{},"body":{"modules/NatsMessengerModule.html":{},"overview.html":{}}}],["cluster_relationmodule",{"_index":780,"title":{},"body":{"modules/RelationModule.html":{},"overview.html":{}}}],["cluster_relationmodule_exports",{"_index":781,"title":{},"body":{"modules/RelationModule.html":{},"overview.html":{}}}],["cluster_relationmodule_imports",{"_index":782,"title":{},"body":{"modules/RelationModule.html":{}}}],["cluster_relationmodule_providers",{"_index":783,"title":{},"body":{"modules/RelationModule.html":{},"overview.html":{}}}],["cmd",{"_index":673,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["code",{"_index":900,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["collection",{"_index":117,"title":{},"body":{"classes/Association.html":{},"classes/Group.html":{},"classes/Relation.html":{}}}],["command",{"_index":735,"title":{},"body":{"controllers/RelationController.html":{}}}],["commence",{"_index":1057,"title":{},"body":{"index.html":{}}}],["communication",{"_index":656,"title":{},"body":{"modules/NatsMessengerModule.html":{},"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["comparaison",{"_index":705,"title":{},"body":{"classes/Relation.html":{}}}],["concurrently",{"_index":830,"title":{},"body":{"injectables/RelationService.html":{}}}],["configmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/NatsMessengerModule.html":{}}}],["configmodule.forroot",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/NatsMessengerModule.html":{}}}],["configure",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["conforming",{"_index":891,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["connect",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["console.log",{"_index":241,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{}}}],["console.log(\"error",{"_index":684,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["console.log('emit",{"_index":686,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["console.log('send",{"_index":682,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["const",{"_index":124,"title":{},"body":{"classes/Association.html":{},"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"classes/Relation.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["constructor",{"_index":222,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["constructor(associationmodel",{"_index":284,"title":{},"body":{"injectables/AssociationService.html":{}}}],["constructor(groupmodel",{"_index":539,"title":{},"body":{"injectables/GroupService.html":{}}}],["constructor(nats",{"_index":668,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["constructor(relationmodel",{"_index":791,"title":{},"body":{"injectables/RelationService.html":{}}}],["contain",{"_index":353,"title":{},"body":{"injectables/AssociationService.html":{}}}],["containing",{"_index":610,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["context",{"_index":876,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["controller",{"_index":127,"title":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{}},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{},"coverage.html":{}}}],["controllers",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"controllers/AssociationController.html":{},"modules/AssociationModule.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"controllers/RelationController.html":{},"modules/RelationModule.html":{},"overview.html":{}}}],["copy",{"_index":1039,"title":{},"body":{"index.html":{}}}],["corresponding",{"_index":857,"title":{},"body":{"injectables/RelationService.html":{}}}],["coverage",{"_index":924,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":333,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{}}}],["createassociation",{"_index":135,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{}}}],["createassociation(asso",{"_index":295,"title":{},"body":{"injectables/AssociationService.html":{}}}],["createassociation(body",{"_index":170,"title":{},"body":{"controllers/AssociationController.html":{}}}],["created",{"_index":820,"title":{},"body":{"injectables/RelationService.html":{}}}],["creategroup",{"_index":419,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["creategroup(@payload('body",{"_index":494,"title":{},"body":{"controllers/GroupController.html":{}}}],["creategroup(body",{"_index":429,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["createnewrelation",{"_index":715,"title":{},"body":{"controllers/RelationController.html":{}}}],["createnewrelation(@payload",{"_index":758,"title":{},"body":{"controllers/RelationController.html":{}}}],["createnewrelation(body",{"_index":722,"title":{},"body":{"controllers/RelationController.html":{}}}],["createrelation",{"_index":787,"title":{},"body":{"injectables/RelationService.html":{}}}],["createrelation(body",{"_index":794,"title":{},"body":{"injectables/RelationService.html":{}}}],["creation",{"_index":173,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"injectables/RelationService.html":{}}}],["création",{"_index":433,"title":{},"body":{"controllers/GroupController.html":{},"index.html":{}}}],["d'un",{"_index":1024,"title":{},"body":{"index.html":{}}}],["dans",{"_index":1044,"title":{},"body":{"index.html":{}}}],["data",{"_index":360,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{},"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["database",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"modules/RelationModule.html":{},"index.html":{}}}],["databasemodule",{"_index":378,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/DatabaseModule.html":{},"modules.html":{}}}],["datas",{"_index":887,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["de",{"_index":168,"title":{},"body":{"controllers/AssociationController.html":{},"classes/Relation.html":{},"index.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/GroupModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RelationModule.html":{},"overview.html":{}}}],["decorators",{"_index":89,"title":{},"body":{"classes/AssoNameDTO.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"classes/RelationDTO.html":{}}}],["default",{"_index":83,"title":{},"body":{"interfaces/AssoInterface.html":{},"interfaces/assoUserEditInterface.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":91,"title":{},"body":{"classes/AssoNameDTO.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"injectables/AssociationService.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"injectables/GroupService.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"injectables/NatsMessengerService.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"classes/RelationDTO.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{}}}],["defines",{"_index":652,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["delete",{"_index":182,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["deleteassociation",{"_index":136,"title":{},"body":{"controllers/AssociationController.html":{}}}],["deleteassociation(@payload('params",{"_index":252,"title":{},"body":{"controllers/AssociationController.html":{}}}],["deleteassociation(params",{"_index":179,"title":{},"body":{"controllers/AssociationController.html":{}}}],["deleted",{"_index":583,"title":{},"body":{"injectables/GroupService.html":{}}}],["deletedgroup",{"_index":580,"title":{},"body":{"injectables/GroupService.html":{}}}],["deletegroup",{"_index":420,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["deletegroup(@payload('params",{"_index":497,"title":{},"body":{"controllers/GroupController.html":{}}}],["deletegroup(groupid",{"_index":547,"title":{},"body":{"injectables/GroupService.html":{}}}],["deletegroup(params",{"_index":435,"title":{},"body":{"controllers/GroupController.html":{}}}],["deleterelation",{"_index":716,"title":{},"body":{"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["deleterelation(@payload('params",{"_index":768,"title":{},"body":{"controllers/RelationController.html":{}}}],["deleterelation(params",{"_index":727,"title":{},"body":{"controllers/RelationController.html":{}}}],["deleterelation(relationid",{"_index":796,"title":{},"body":{"injectables/RelationService.html":{}}}],["dependancy",{"_index":527,"title":{},"body":{"modules/GroupModule.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/GroupModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RelationModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":270,"title":{},"body":{"modules/AssociationModule.html":{},"injectables/NatsMessengerService.html":{},"modules/RelationModule.html":{}}}],["des",{"_index":160,"title":{},"body":{"controllers/AssociationController.html":{}}}],["description",{"_index":71,"title":{},"body":{"interfaces/AssoInterface.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"injectables/AssociationService.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/assoUserEditInterface.html":{},"miscellaneous/functions.html":{},"properties.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["details",{"_index":349,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["determine",{"_index":904,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["deux",{"_index":709,"title":{},"body":{"classes/Relation.html":{}}}],["dev",{"_index":1017,"title":{},"body":{"index.html":{}}}],["disable",{"_index":917,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["distinct",{"_index":847,"title":{},"body":{"injectables/RelationService.html":{}}}],["distinct('toref_id",{"_index":850,"title":{},"body":{"injectables/RelationService.html":{}}}],["document",{"_index":116,"title":{},"body":{"classes/Association.html":{},"classes/Group.html":{},"classes/Relation.html":{}}}],["documentation",{"_index":925,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":855,"title":{},"body":{"injectables/RelationService.html":{}}}],["dont",{"_index":161,"title":{},"body":{"controllers/AssociationController.html":{}}}],["dotenv",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["droite",{"_index":1036,"title":{},"body":{"index.html":{}}}],["ds",{"_index":412,"title":{},"body":{"classes/Group.html":{}}}],["dto/association.dto",{"_index":213,"title":{},"body":{"controllers/AssociationController.html":{}}}],["dto/group.dto",{"_index":487,"title":{},"body":{"controllers/GroupController.html":{}}}],["dto/id.dto",{"_index":215,"title":{},"body":{"controllers/AssociationController.html":{}}}],["dto/name.dto",{"_index":214,"title":{},"body":{"controllers/AssociationController.html":{}}}],["dto/relation.dto",{"_index":757,"title":{},"body":{"controllers/RelationController.html":{}}}],["départ",{"_index":704,"title":{},"body":{"classes/Relation.html":{}}}],["dépendance",{"_index":1032,"title":{},"body":{"index.html":{}}}],["dépendances",{"_index":1062,"title":{},"body":{"index.html":{}}}],["e",{"_index":596,"title":{},"body":{"injectables/GroupService.html":{}}}],["each",{"_index":516,"title":{},"body":{"classes/GroupDto.html":{},"injectables/RelationService.html":{}}}],["emit",{"_index":667,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["emit(cmd",{"_index":671,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["empty",{"_index":894,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["en",{"_index":1020,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":219,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{}}}],["enfant",{"_index":1010,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ensures",{"_index":848,"title":{},"body":{"injectables/RelationService.html":{}}}],["entre",{"_index":708,"title":{},"body":{"classes/Relation.html":{}}}],["enum",{"_index":80,"title":{},"body":{"interfaces/AssoInterface.html":{},"classes/Relation.html":{},"interfaces/assoUserEditInterface.html":{}}}],["enum/relation.enum",{"_index":701,"title":{},"body":{"classes/Relation.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"injectables/RelationService.html":{}}}],["enumerations",{"_index":1006,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":231,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["error('kidsids",{"_index":828,"title":{},"body":{"injectables/RelationService.html":{}}}],["eslint",{"_index":916,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["eslint/ban",{"_index":920,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["et",{"_index":1038,"title":{},"body":{"index.html":{}}}],["event",{"_index":455,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["eventid",{"_index":564,"title":{},"body":{"injectables/GroupService.html":{}}}],["execution",{"_index":875,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["executioncontext",{"_index":868,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["exist",{"_index":819,"title":{},"body":{"injectables/RelationService.html":{}}}],["exists",{"_index":330,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["export",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AssoInterface.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"modules/DatabaseModule.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/assoUserEditInterface.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/GroupModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RelationModule.html":{},"overview.html":{}}}],["exports:[groupservice",{"_index":528,"title":{},"body":{"modules/GroupModule.html":{}}}],["express",{"_index":975,"title":{},"body":{"dependencies.html":{}}}],["extract",{"_index":367,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["extracted",{"_index":599,"title":{},"body":{"injectables/GroupService.html":{}}}],["extracts",{"_index":913,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["fait",{"_index":162,"title":{},"body":{"controllers/AssociationController.html":{}}}],["false",{"_index":120,"title":{},"body":{"classes/Association.html":{},"classes/Group.html":{},"injectables/GroupService.html":{},"classes/Relation.html":{}}}],["fetch",{"_index":145,"title":{},"body":{"controllers/AssociationController.html":{}}}],["fetchparentfromkidrelation",{"_index":717,"title":{},"body":{"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["fetchparentfromkidrelation(kidarray",{"_index":731,"title":{},"body":{"controllers/RelationController.html":{}}}],["fetchparentfromkidrelation(kidsids",{"_index":799,"title":{},"body":{"injectables/RelationService.html":{}}}],["field",{"_index":845,"title":{},"body":{"injectables/RelationService.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AssoInterface.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"modules/DatabaseModule.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/assoUserEditInterface.html":{},"coverage.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["filter",{"_index":368,"title":{},"body":{"injectables/AssociationService.html":{}}}],["find",{"_index":577,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["findallasso",{"_index":137,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{}}}],["findallrelations",{"_index":718,"title":{},"body":{"controllers/RelationController.html":{}}}],["findallrelations(@payload('params",{"_index":763,"title":{},"body":{"controllers/RelationController.html":{}}}],["findallrelations(params",{"_index":737,"title":{},"body":{"controllers/RelationController.html":{}}}],["findassobyid",{"_index":138,"title":{},"body":{"controllers/AssociationController.html":{}}}],["findassobyid(@payload('params",{"_index":225,"title":{},"body":{"controllers/AssociationController.html":{}}}],["findassobyid(params",{"_index":187,"title":{},"body":{"controllers/AssociationController.html":{}}}],["findassobyname",{"_index":139,"title":{},"body":{"controllers/AssociationController.html":{}}}],["findassobyname(@payload('params",{"_index":234,"title":{},"body":{"controllers/AssociationController.html":{}}}],["findassobyname(params",{"_index":191,"title":{},"body":{"controllers/AssociationController.html":{}}}],["findgroupdetailsbyassoid",{"_index":421,"title":{},"body":{"controllers/GroupController.html":{}}}],["findgroupdetailsbyassoid(@payload('params",{"_index":492,"title":{},"body":{"controllers/GroupController.html":{}}}],["findgroupdetailsbyassoid(params",{"_index":442,"title":{},"body":{"controllers/GroupController.html":{}}}],["findgroupid",{"_index":422,"title":{},"body":{"controllers/GroupController.html":{}}}],["findgroupid(@payload('params",{"_index":488,"title":{},"body":{"controllers/GroupController.html":{}}}],["findgroupid(params",{"_index":447,"title":{},"body":{"controllers/GroupController.html":{}}}],["findgroupnamebyeventid",{"_index":423,"title":{},"body":{"controllers/GroupController.html":{}}}],["findgroupnamebyeventid(@payload('params",{"_index":490,"title":{},"body":{"controllers/GroupController.html":{}}}],["findgroupnamebyeventid(params",{"_index":451,"title":{},"body":{"controllers/GroupController.html":{}}}],["findrelationbyid",{"_index":719,"title":{},"body":{"controllers/RelationController.html":{}}}],["findrelationbyid(@payload('params",{"_index":765,"title":{},"body":{"controllers/RelationController.html":{}}}],["findrelationbyid(params",{"_index":741,"title":{},"body":{"controllers/RelationController.html":{}}}],["findrelativesbyuser",{"_index":720,"title":{},"body":{"controllers/RelationController.html":{}}}],["findrelativesbyuser(@payload('params",{"_index":761,"title":{},"body":{"controllers/RelationController.html":{}}}],["findrelativesbyuser(params",{"_index":746,"title":{},"body":{"controllers/RelationController.html":{}}}],["first",{"_index":914,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["firstvaluefrom",{"_index":676,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["firstvaluefrom(this.nats.send(cmd",{"_index":683,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["flatmap",{"_index":856,"title":{},"body":{"injectables/RelationService.html":{}}}],["flatten",{"_index":851,"title":{},"body":{"injectables/RelationService.html":{}}}],["format",{"_index":905,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["forwardref",{"_index":263,"title":{},"body":{"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{}}}],["found",{"_index":582,"title":{},"body":{"injectables/GroupService.html":{}}}],["fromref_id",{"_index":690,"title":{},"body":{"classes/Relation.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"injectables/RelationService.html":{}}}],["fromrefuserid",{"_index":809,"title":{},"body":{"injectables/RelationService.html":{}}}],["function",{"_index":833,"title":{},"body":{"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"coverage.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["functions",{"_index":1011,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1022,"title":{},"body":{"index.html":{}}}],["generates",{"_index":834,"title":{},"body":{"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["get_event_by_id",{"_index":613,"title":{},"body":{"injectables/GroupService.html":{}}}],["get_user_by_id",{"_index":351,"title":{},"body":{"injectables/AssociationService.html":{}}}],["getallassociations",{"_index":277,"title":{},"body":{"injectables/AssociationService.html":{}}}],["getallgroupassoid",{"_index":531,"title":{},"body":{"injectables/GroupService.html":{}}}],["getallgroupassoid(assoid",{"_index":549,"title":{},"body":{"injectables/GroupService.html":{}}}],["getallgroups",{"_index":532,"title":{},"body":{"injectables/GroupService.html":{}}}],["getallgroupsuserid",{"_index":533,"title":{},"body":{"injectables/GroupService.html":{}}}],["getallgroupsuserid(userid",{"_index":552,"title":{},"body":{"injectables/GroupService.html":{}}}],["getallrelationsbyasso",{"_index":788,"title":{},"body":{"injectables/RelationService.html":{}}}],["getallrelationsbyasso(assoid",{"_index":803,"title":{},"body":{"injectables/RelationService.html":{}}}],["getassobyid",{"_index":278,"title":{},"body":{"injectables/AssociationService.html":{}}}],["getassobyid(assoid",{"_index":300,"title":{},"body":{"injectables/AssociationService.html":{}}}],["getassobyname",{"_index":279,"title":{},"body":{"injectables/AssociationService.html":{}}}],["getassobyname(name",{"_index":302,"title":{},"body":{"injectables/AssociationService.html":{}}}],["getassosbyroleadmin",{"_index":280,"title":{},"body":{"injectables/AssociationService.html":{}}}],["getassosbyroleadmin(userid",{"_index":304,"title":{},"body":{"injectables/AssociationService.html":{}}}],["getassosbyroleuser",{"_index":281,"title":{},"body":{"injectables/AssociationService.html":{}}}],["getassosbyroleuser(userid",{"_index":307,"title":{},"body":{"injectables/AssociationService.html":{}}}],["getassosbyuser",{"_index":282,"title":{},"body":{"injectables/AssociationService.html":{}}}],["getassosbyuser(userid",{"_index":309,"title":{},"body":{"injectables/AssociationService.html":{}}}],["getfirstvalue",{"_index":951,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getfirstvalue(values",{"_index":910,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["getgroupbyid",{"_index":534,"title":{},"body":{"injectables/GroupService.html":{}}}],["getgroupbyid(groupid",{"_index":554,"title":{},"body":{"injectables/GroupService.html":{}}}],["getgroupbyname",{"_index":535,"title":{},"body":{"injectables/GroupService.html":{}}}],["getgroupbyname(name",{"_index":556,"title":{},"body":{"injectables/GroupService.html":{}}}],["getgroupdetailsbyassoid",{"_index":536,"title":{},"body":{"injectables/GroupService.html":{}}}],["getgroupdetailsbyassoid(assoid",{"_index":558,"title":{},"body":{"injectables/GroupService.html":{}}}],["getgroupnamebyeventid",{"_index":537,"title":{},"body":{"injectables/GroupService.html":{}}}],["getgroupnamebyeventid(eventid",{"_index":561,"title":{},"body":{"injectables/GroupService.html":{}}}],["getoneassobyname",{"_index":283,"title":{},"body":{"injectables/AssociationService.html":{}}}],["getoneassobyname(name",{"_index":311,"title":{},"body":{"injectables/AssociationService.html":{}}}],["getrelationbyid",{"_index":789,"title":{},"body":{"injectables/RelationService.html":{}}}],["getrelationbyid(relationid",{"_index":805,"title":{},"body":{"injectables/RelationService.html":{}}}],["getrelationsbyuserid",{"_index":790,"title":{},"body":{"injectables/RelationService.html":{}}}],["getrelationsbyuserid(fromrefuserid",{"_index":807,"title":{},"body":{"injectables/RelationService.html":{}}}],["getting",{"_index":1014,"title":{"index.html":{}},"body":{}}],["given",{"_index":579,"title":{},"body":{"injectables/GroupService.html":{}}}],["global",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["graph",{"_index":1077,"title":{},"body":{"modules.html":{}}}],["group",{"_index":380,"title":{"classes/Group.html":{}},"body":{"classes/Group.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["group.controller",{"_index":526,"title":{},"body":{"modules/GroupModule.html":{}}}],["group.save",{"_index":627,"title":{},"body":{"injectables/GroupService.html":{}}}],["group.service",{"_index":486,"title":{},"body":{"controllers/GroupController.html":{},"modules/GroupModule.html":{}}}],["group.users.includes(kidid",{"_index":621,"title":{},"body":{"injectables/GroupService.html":{}}}],["group.users.push(kidid",{"_index":624,"title":{},"body":{"injectables/GroupService.html":{}}}],["group/:id",{"_index":450,"title":{},"body":{"controllers/GroupController.html":{}}}],["group/addkid/bygroup/:id",{"_index":483,"title":{},"body":{"controllers/GroupController.html":{}}}],["group/create",{"_index":434,"title":{},"body":{"controllers/GroupController.html":{}}}],["group/delete/:id",{"_index":438,"title":{},"body":{"controllers/GroupController.html":{}}}],["group/group.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["group/name/byevent/:id",{"_index":456,"title":{},"body":{"controllers/GroupController.html":{}}}],["group/removekid/bygroup/:id",{"_index":473,"title":{},"body":{"controllers/GroupController.html":{}}}],["group/schema/group.schema",{"_index":525,"title":{},"body":{"modules/GroupModule.html":{}}}],["group/update/:id",{"_index":477,"title":{},"body":{"controllers/GroupController.html":{}}}],["groupcontroller",{"_index":417,"title":{"controllers/GroupController.html":{}},"body":{"controllers/GroupController.html":{},"modules/GroupModule.html":{},"coverage.html":{}}}],["groupdocument",{"_index":406,"title":{},"body":{"classes/Group.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"miscellaneous/typealiases.html":{}}}],["groupdto",{"_index":430,"title":{"classes/GroupDto.html":{}},"body":{"controllers/GroupController.html":{},"classes/GroupDto.html":{},"coverage.html":{}}}],["groupe",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["groupid",{"_index":505,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["groupinterface",{"_index":517,"title":{"interfaces/GroupInterface.html":{}},"body":{"interfaces/GroupInterface.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["grouplist/byasso/:id",{"_index":446,"title":{},"body":{"controllers/GroupController.html":{}}}],["groupmodel",{"_index":542,"title":{},"body":{"injectables/GroupService.html":{}}}],["groupmodule",{"_index":13,"title":{"modules/GroupModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/GroupModule.html":{},"modules.html":{},"overview.html":{}}}],["groupnames",{"_index":614,"title":{},"body":{"injectables/GroupService.html":{}}}],["groupnames.push(group.name",{"_index":619,"title":{},"body":{"injectables/GroupService.html":{}}}],["groups",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{}}}],["groups/byasso/:id",{"_index":462,"title":{},"body":{"controllers/GroupController.html":{}}}],["groups/byasso/byuser/:id",{"_index":466,"title":{},"body":{"controllers/GroupController.html":{}}}],["groupschema",{"_index":415,"title":{},"body":{"classes/Group.html":{},"modules/GroupModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["groupservice",{"_index":286,"title":{"injectables/GroupService.html":{}},"body":{"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"coverage.html":{},"overview.html":{}}}],["handle",{"_index":861,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["handler",{"_index":877,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["handling",{"_index":267,"title":{},"body":{"modules/AssociationModule.html":{},"controllers/GroupController.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"modules/RelationModule.html":{}}}],["headcount",{"_index":383,"title":{},"body":{"classes/Group.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{}}}],["id",{"_index":78,"title":{},"body":{"interfaces/AssoInterface.html":{},"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/IdDto.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{},"interfaces/assoUserEditInterface.html":{}}}],["id:userid",{"_index":366,"title":{},"body":{"injectables/AssociationService.html":{}}}],["iddelete",{"_index":439,"title":{},"body":{"controllers/GroupController.html":{}}}],["iddto",{"_index":142,"title":{"classes/IdDto.html":{}},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"classes/IdDto.html":{},"controllers/RelationController.html":{},"coverage.html":{}}}],["iddto):promise",{"_index":238,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{}}}],["identifier",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["idpost",{"_index":178,"title":{},"body":{"controllers/AssociationController.html":{}}}],["idput",{"_index":478,"title":{},"body":{"controllers/GroupController.html":{}}}],["ids",{"_index":374,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["if(!assoexist",{"_index":587,"title":{},"body":{"injectables/GroupService.html":{}}}],["if(!assoexists",{"_index":818,"title":{},"body":{"injectables/RelationService.html":{}}}],["if(assocreated",{"_index":336,"title":{},"body":{"injectables/AssociationService.html":{}}}],["image",{"_index":72,"title":{},"body":{"interfaces/AssoInterface.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"classes/AssociationDTO.html":{}}}],["image?:string",{"_index":76,"title":{},"body":{"interfaces/AssoInterface.html":{},"interfaces/assoUserEditInterface.html":{}}}],["import",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"modules/DatabaseModule.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"index.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["imports",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RelationModule.html":{}}}],["include",{"_index":890,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["index",{"_index":68,"title":{"index.html":{}},"body":{"interfaces/AssoInterface.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"injectables/AssociationService.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"injectables/GroupService.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"injectables/NatsMessengerService.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/assoUserEditInterface.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index_asso_by_user",{"_index":593,"title":{},"body":{"injectables/GroupService.html":{}}}],["indexgroupbyassoid",{"_index":424,"title":{},"body":{"controllers/GroupController.html":{}}}],["indexgroupbyassoid(@payload('params",{"_index":499,"title":{},"body":{"controllers/GroupController.html":{}}}],["indexgroupbyassoid(params",{"_index":457,"title":{},"body":{"controllers/GroupController.html":{}}}],["indexgroupbyuserid",{"_index":425,"title":{},"body":{"controllers/GroupController.html":{}}}],["indexgroupbyuserid(@payload('params",{"_index":502,"title":{},"body":{"controllers/GroupController.html":{}}}],["indexgroupbyuserid(params",{"_index":463,"title":{},"body":{"controllers/GroupController.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AssoInterface.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"modules/DatabaseModule.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/assoUserEditInterface.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["information",{"_index":889,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["initialize",{"_index":893,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["inject",{"_index":315,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"injectables/RelationService.html":{}}}],["inject('nats_service",{"_index":679,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["inject(forwardref",{"_index":322,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["injectable",{"_index":272,"title":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{}},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"coverage.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["injectables",{"_index":273,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"overview.html":{}}}],["injectmodel",{"_index":318,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["injectmodel('associations",{"_index":321,"title":{},"body":{"injectables/AssociationService.html":{}}}],["injectmodel('group",{"_index":571,"title":{},"body":{"injectables/GroupService.html":{}}}],["injectmodel('relations",{"_index":814,"title":{},"body":{"injectables/RelationService.html":{}}}],["injects",{"_index":678,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["install",{"_index":1052,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1018,"title":{},"body":{"index.html":{}}}],["installer",{"_index":1030,"title":{},"body":{"index.html":{}}}],["insérér",{"_index":1064,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":866,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{}}}],["intercept(_context",{"_index":867,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["interceptor",{"_index":860,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["intercepts",{"_index":872,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["interface",{"_index":64,"title":{"interfaces/AssoInterface.html":{},"interfaces/GroupInterface.html":{},"interfaces/RelationInterface.html":{},"interfaces/assoUserEditInterface.html":{},"interfaces/responsePayloadNatsInterface.html":{}},"body":{"interfaces/AssoInterface.html":{},"interfaces/GroupInterface.html":{},"interfaces/RelationInterface.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/assoUserEditInterface.html":{},"coverage.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["interface/association.interface",{"_index":316,"title":{},"body":{"injectables/AssociationService.html":{}}}],["interface/group.interface",{"_index":570,"title":{},"body":{"injectables/GroupService.html":{}}}],["interface/relation.interface",{"_index":813,"title":{},"body":{"injectables/RelationService.html":{}}}],["interfaces",{"_index":66,"title":{},"body":{"interfaces/AssoInterface.html":{},"interfaces/GroupInterface.html":{},"interfaces/RelationInterface.html":{},"interfaces/assoUserEditInterface.html":{},"overview.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["is_public_key",{"_index":938,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":399,"title":{},"body":{"classes/Group.html":{}}}],["isenum",{"_index":702,"title":{},"body":{"classes/Relation.html":{},"classes/RelationDTO.html":{}}}],["isenum(linkrelationenum",{"_index":706,"title":{},"body":{"classes/Relation.html":{},"classes/RelationDTO.html":{}}}],["isglobal",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["ismongoid",{"_index":400,"title":{},"body":{"classes/Group.html":{},"classes/GroupDto.html":{},"classes/IdDto.html":{},"classes/Relation.html":{},"classes/RelationDTO.html":{}}}],["ismongoid({each",{"_index":411,"title":{},"body":{"classes/Group.html":{},"classes/GroupDto.html":{}}}],["isnotempty",{"_index":777,"title":{},"body":{"classes/RelationDTO.html":{}}}],["isnotempty()@isenum(linkrelationenum",{"_index":774,"title":{},"body":{"classes/RelationDTO.html":{}}}],["isnumber",{"_index":401,"title":{},"body":{"classes/Group.html":{},"classes/GroupDto.html":{}}}],["ispublic",{"_index":1096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isstring",{"_index":93,"title":{},"body":{"classes/AssoNameDTO.html":{},"classes/Association.html":{},"classes/AssociationDTO.html":{},"classes/Group.html":{},"classes/GroupDto.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{}}}],["isstring()@ismongoid",{"_index":636,"title":{},"body":{"classes/IdDto.html":{}}}],["iterate",{"_index":615,"title":{},"body":{"injectables/GroupService.html":{}}}],["json.parse(json.stringify(values",{"_index":911,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["jwt",{"_index":993,"title":{},"body":{"dependencies.html":{}}}],["kid",{"_index":472,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/RelationService.html":{},"miscellaneous/enumerations.html":{}}}],["kid's",{"_index":623,"title":{},"body":{"injectables/GroupService.html":{}}}],["kidarray",{"_index":736,"title":{},"body":{"controllers/RelationController.html":{}}}],["kidid",{"_index":504,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["kidsids",{"_index":802,"title":{},"body":{"injectables/RelationService.html":{}}}],["kidsids.map((kidid",{"_index":837,"title":{},"body":{"injectables/RelationService.html":{}}}],["l'utilisateur",{"_index":169,"title":{},"body":{"controllers/AssociationController.html":{}}}],["la",{"_index":1031,"title":{},"body":{"index.html":{}}}],["le",{"_index":1040,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/GroupModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RelationModule.html":{},"overview.html":{}}}],["les",{"_index":1061,"title":{},"body":{"index.html":{}}}],["librairies",{"_index":1070,"title":{},"body":{"index.html":{}}}],["library",{"_index":1071,"title":{},"body":{"index.html":{}}}],["library_name",{"_index":1072,"title":{},"body":{"index.html":{}}}],["libs/nats",{"_index":643,"title":{},"body":{"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"coverage.html":{}}}],["license",{"_index":1085,"title":{},"body":{"properties.html":{}}}],["lien",{"_index":707,"title":{},"body":{"classes/Relation.html":{},"index.html":{}}}],["line",{"_index":918,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["link",{"_index":691,"title":{},"body":{"classes/Relation.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"injectables/RelationService.html":{}}}],["linkrelationenum",{"_index":697,"title":{},"body":{"classes/Relation.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"injectables/RelationService.html":{},"miscellaneous/enumerations.html":{}}}],["linkrelationenum.kid",{"_index":841,"title":{},"body":{"injectables/RelationService.html":{}}}],["list",{"_index":299,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["literal",{"_index":468,"title":{},"body":{"controllers/GroupController.html":{}}}],["local",{"_index":995,"title":{},"body":{"dependencies.html":{}}}],["localhost",{"_index":1037,"title":{},"body":{"index.html":{}}}],["main",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["makes",{"_index":664,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["managing",{"_index":217,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["map",{"_index":607,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["match",{"_index":602,"title":{},"body":{"injectables/GroupService.html":{}}}],["matching",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AssoInterface.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"modules/DatabaseModule.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/assoUserEditInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/responsePayloadNatsInterface.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":402,"title":{},"body":{"classes/Group.html":{},"classes/GroupDto.html":{}}}],["max(50",{"_index":407,"title":{},"body":{"classes/Group.html":{},"classes/GroupDto.html":{}}}],["max(50)@isnumber",{"_index":512,"title":{},"body":{"classes/GroupDto.html":{}}}],["maxlength",{"_index":94,"title":{},"body":{"classes/AssoNameDTO.html":{},"classes/Association.html":{},"classes/AssociationDTO.html":{},"classes/Group.html":{},"classes/GroupDto.html":{}}}],["maxlength(250",{"_index":122,"title":{},"body":{"classes/Association.html":{}}}],["maxlength(255",{"_index":123,"title":{},"body":{"classes/Association.html":{}}}],["maxlength(50",{"_index":98,"title":{},"body":{"classes/AssoNameDTO.html":{},"classes/Association.html":{},"classes/AssociationDTO.html":{},"classes/Group.html":{},"classes/GroupDto.html":{}}}],["maxlength(50)@minlength(3)@isstring",{"_index":90,"title":{},"body":{"classes/AssoNameDTO.html":{},"classes/AssociationDTO.html":{},"classes/GroupDto.html":{}}}],["maxlength(500",{"_index":100,"title":{},"body":{"classes/AssoNameDTO.html":{},"classes/Association.html":{},"classes/AssociationDTO.html":{},"classes/Group.html":{},"classes/GroupDto.html":{}}}],["maxlength(500)@isstring",{"_index":254,"title":{},"body":{"classes/AssociationDTO.html":{},"classes/GroupDto.html":{}}}],["meme",{"_index":413,"title":{},"body":{"classes/Group.html":{}}}],["message",{"_index":338,"title":{},"body":{"injectables/AssociationService.html":{}}}],["messagepattern",{"_index":208,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{}}}],["messagepattern('add_kid_to_group",{"_index":480,"title":{},"body":{"controllers/GroupController.html":{}}}],["messagepattern('create_association",{"_index":171,"title":{},"body":{"controllers/AssociationController.html":{}}}],["messagepattern('create_group",{"_index":431,"title":{},"body":{"controllers/GroupController.html":{}}}],["messagepattern('create_relation",{"_index":724,"title":{},"body":{"controllers/RelationController.html":{}}}],["messagepattern('delete_association",{"_index":180,"title":{},"body":{"controllers/AssociationController.html":{}}}],["messagepattern('delete_group",{"_index":436,"title":{},"body":{"controllers/GroupController.html":{}}}],["messagepattern('delete_relation",{"_index":728,"title":{},"body":{"controllers/RelationController.html":{}}}],["messagepattern('fetch_toref_link_kid",{"_index":732,"title":{},"body":{"controllers/RelationController.html":{}}}],["messagepattern('get_association_by_id",{"_index":188,"title":{},"body":{"controllers/AssociationController.html":{}}}],["messagepattern('get_association_by_name",{"_index":193,"title":{},"body":{"controllers/AssociationController.html":{}}}],["messagepattern('get_group_by_id",{"_index":448,"title":{},"body":{"controllers/GroupController.html":{}}}],["messagepattern('get_groupdetails_by_asso",{"_index":443,"title":{},"body":{"controllers/GroupController.html":{}}}],["messagepattern('get_groupname_by_eventid",{"_index":452,"title":{},"body":{"controllers/GroupController.html":{}}}],["messagepattern('get_groups_by_asso_id",{"_index":458,"title":{},"body":{"controllers/GroupController.html":{}}}],["messagepattern('get_groups_by_user_id",{"_index":464,"title":{},"body":{"controllers/GroupController.html":{}}}],["messagepattern('get_relation_by_id",{"_index":742,"title":{},"body":{"controllers/RelationController.html":{}}}],["messagepattern('get_relation_by_user",{"_index":747,"title":{},"body":{"controllers/RelationController.html":{}}}],["messagepattern('index_asso_by_role_admin",{"_index":143,"title":{},"body":{"controllers/AssociationController.html":{}}}],["messagepattern('index_asso_by_role_user",{"_index":153,"title":{},"body":{"controllers/AssociationController.html":{}}}],["messagepattern('index_asso_by_user",{"_index":157,"title":{},"body":{"controllers/AssociationController.html":{}}}],["messagepattern('index_associations",{"_index":184,"title":{},"body":{"controllers/AssociationController.html":{}}}],["messagepattern('index_groups",{"_index":440,"title":{},"body":{"controllers/GroupController.html":{}}}],["messagepattern('index_relations_by_asso",{"_index":738,"title":{},"body":{"controllers/RelationController.html":{}}}],["messagepattern('remove_kid_from_group",{"_index":469,"title":{},"body":{"controllers/GroupController.html":{}}}],["messagepattern('update_association",{"_index":197,"title":{},"body":{"controllers/AssociationController.html":{}}}],["messagepattern('update_group",{"_index":475,"title":{},"body":{"controllers/GroupController.html":{}}}],["messagepattern('update_relation",{"_index":751,"title":{},"body":{"controllers/RelationController.html":{}}}],["messaging",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["messenger",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"modules/RelationModule.html":{}}}],["messenger.module.ts",{"_index":645,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["messenger.service",{"_index":648,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["messenger.service.ts",{"_index":666,"title":{},"body":{"injectables/NatsMessengerService.html":{},"coverage.html":{}}}],["messenger.service.ts:16",{"_index":675,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["messenger.service.ts:26",{"_index":672,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["messenger.service.ts:7",{"_index":670,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["messenger/src/nats",{"_index":644,"title":{},"body":{"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"coverage.html":{}}}],["messenging",{"_index":271,"title":{},"body":{"modules/AssociationModule.html":{},"modules/GroupModule.html":{},"modules/RelationModule.html":{}}}],["met",{"_index":1046,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":1000,"title":{},"body":{"dependencies.html":{}}}],["methode",{"_index":166,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/RelationController.html":{}}}],["methods",{"_index":130,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{}}}],["minlength",{"_index":95,"title":{},"body":{"classes/AssoNameDTO.html":{},"classes/Association.html":{},"classes/AssociationDTO.html":{},"classes/Group.html":{},"classes/GroupDto.html":{}}}],["minlength(3",{"_index":99,"title":{},"body":{"classes/AssoNameDTO.html":{},"classes/Association.html":{},"classes/AssociationDTO.html":{},"classes/Group.html":{},"classes/GroupDto.html":{}}}],["miscellaneous",{"_index":1005,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":285,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["modification",{"_index":199,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RelationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupModule.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"modules/RelationModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RelationModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb://localhost:27017",{"_index":1041,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":268,"title":{},"body":{"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"classes/Group.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Relation.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{},"index.html":{}}}],["mongoose@6.2.2",{"_index":1053,"title":{},"body":{"index.html":{}}}],["mongoosemodule",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupModule.html":{},"modules/RelationModule.html":{},"index.html":{}}}],["mongoosemodule.forfeature",{"_index":269,"title":{},"body":{"modules/AssociationModule.html":{},"modules/GroupModule.html":{},"modules/RelationModule.html":{}}}],["mongoosemodule.forroot('mongodb://127.0.0.1:27017",{"_index":1047,"title":{},"body":{"index.html":{}}}],["mongoosemodule.forroot(`${process.env.uri_bdd}?retrywrites=true&w=majority",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["ms",{"_index":410,"title":{},"body":{"classes/Group.html":{},"index.html":{}}}],["name",{"_index":73,"title":{},"body":{"interfaces/AssoInterface.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/NameDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/assoUserEditInterface.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["namedto",{"_index":192,"title":{"classes/NameDto.html":{}},"body":{"controllers/AssociationController.html":{},"classes/NameDto.html":{},"coverage.html":{}}}],["names",{"_index":454,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["names+ids",{"_index":445,"title":{},"body":{"controllers/GroupController.html":{}}}],["nats",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"modules/RelationModule.html":{},"injectables/RpcSuccessInterceptor.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["nats://${process.env.nats_dns}:${process.env.nats_port",{"_index":662,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["nats_service",{"_index":654,"title":{},"body":{"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{}}}],["natsmessengermodule",{"_index":14,"title":{"modules/NatsMessengerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/GroupModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RelationModule.html":{},"modules.html":{},"overview.html":{}}}],["natsmessengerservice",{"_index":287,"title":{"injectables/NatsMessengerService.html":{}},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"coverage.html":{},"overview.html":{}}}],["navigateur",{"_index":1069,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1027,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1019,"title":{},"body":{"index.html":{}}}],["nestjs/cli",{"_index":1023,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"controllers/AssociationController.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"modules/DatabaseModule.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"dependencies.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["nestjs/config",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/NatsMessengerModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":969,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":210,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"classes/Association.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"modules/DatabaseModule.html":{},"classes/Group.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Relation.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/passport",{"_index":972,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":974,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":114,"title":{},"body":{"classes/Association.html":{},"classes/Group.html":{},"classes/Relation.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/typeorm",{"_index":977,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":174,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":869,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["non",{"_index":589,"title":{},"body":{"injectables/GroupService.html":{}}}],["nos",{"_index":1067,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":202,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["notfoundexception('association",{"_index":588,"title":{},"body":{"injectables/GroupService.html":{}}}],["notfoundexception(error",{"_index":233,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["nouveau",{"_index":1025,"title":{},"body":{"index.html":{}}}],["npm",{"_index":1021,"title":{},"body":{"index.html":{}}}],["null",{"_index":584,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["number",{"_index":392,"title":{},"body":{"classes/Group.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["object",{"_index":885,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["object.keys(values).length",{"_index":908,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["objects",{"_index":609,"title":{},"body":{"injectables/GroupService.html":{}}}],["observable",{"_index":880,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["od",{"_index":812,"title":{},"body":{"injectables/RelationService.html":{}}}],["ont",{"_index":1042,"title":{},"body":{"index.html":{}}}],["operations",{"_index":320,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"injectables/RelationService.html":{}}}],["operator",{"_index":601,"title":{},"body":{"injectables/GroupService.html":{}}}],["optional",{"_index":70,"title":{},"body":{"interfaces/AssoInterface.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["options",{"_index":658,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["ou",{"_index":1051,"title":{},"body":{"index.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/GroupModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RelationModule.html":{},"overview.html":{}}}],["overview",{"_index":1079,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":961,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["paginate",{"_index":884,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["pagination",{"_index":895,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["param",{"_index":224,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["parameters",{"_index":148,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":149,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{}}}],["params.id",{"_index":250,"title":{},"body":{"controllers/AssociationController.html":{}}}],["parent",{"_index":854,"title":{},"body":{"injectables/RelationService.html":{},"miscellaneous/enumerations.html":{}}}],["parents",{"_index":734,"title":{},"body":{"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["parents.flatmap((id",{"_index":858,"title":{},"body":{"injectables/RelationService.html":{}}}],["part",{"_index":306,"title":{},"body":{"injectables/AssociationService.html":{}}}],["participating",{"_index":563,"title":{},"body":{"injectables/GroupService.html":{}}}],["partie",{"_index":163,"title":{},"body":{"controllers/AssociationController.html":{}}}],["passport",{"_index":991,"title":{},"body":{"dependencies.html":{}}}],["payload",{"_index":209,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["payload('body",{"_index":247,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{}}}],["payload('params",{"_index":248,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{}}}],["payload.datas",{"_index":906,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["payload.paginate",{"_index":897,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["payload.statuscode",{"_index":902,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["performs",{"_index":839,"title":{},"body":{"injectables/RelationService.html":{}}}],["pg",{"_index":997,"title":{},"body":{"dependencies.html":{}}}],["pipe(map(value",{"_index":922,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["post",{"_index":175,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{}}}],["pour",{"_index":1063,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":744,"title":{},"body":{"controllers/RelationController.html":{}}}],["private",{"_index":223,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["process",{"_index":831,"title":{},"body":{"injectables/RelationService.html":{}}}],["production",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["project",{"_index":844,"title":{},"body":{"injectables/RelationService.html":{},"index.html":{}}}],["projet",{"_index":1026,"title":{},"body":{"index.html":{}}}],["promise",{"_index":151,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["promise.all",{"_index":829,"title":{},"body":{"injectables/RelationService.html":{}}}],["promises",{"_index":835,"title":{},"body":{"injectables/RelationService.html":{}}}],["prop",{"_index":110,"title":{},"body":{"classes/Association.html":{},"classes/Group.html":{},"classes/Relation.html":{}}}],["prop()@isarray()@ismongoid({each",{"_index":396,"title":{},"body":{"classes/Group.html":{}}}],["prop()@max(50)@isnumber()@apiproperty",{"_index":393,"title":{},"body":{"classes/Group.html":{}}}],["prop()@maxlength(250)@isstring()@apiproperty()@maxlength(255",{"_index":105,"title":{},"body":{"classes/Association.html":{}}}],["prop()@maxlength(500)@isstring()@apiproperty",{"_index":103,"title":{},"body":{"classes/Association.html":{},"classes/Group.html":{}}}],["prop({required",{"_index":107,"title":{},"body":{"classes/Association.html":{},"classes/Group.html":{},"classes/Relation.html":{}}}],["prop({type",{"_index":386,"title":{},"body":{"classes/Group.html":{},"classes/Relation.html":{}}}],["properties",{"_index":69,"title":{"properties.html":{}},"body":{"interfaces/AssoInterface.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"classes/AssociationDTO.html":{},"classes/Group.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"classes/Relation.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"interfaces/assoUserEditInterface.html":{},"properties.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["property",{"_index":915,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["provided",{"_index":146,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/GroupModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RelationModule.html":{},"overview.html":{}}}],["provides",{"_index":663,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["public",{"_index":939,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["puis",{"_index":1054,"title":{},"body":{"index.html":{}}}],["push",{"_index":358,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{}}}],["put",{"_index":200,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{}}}],["queries",{"_index":832,"title":{},"body":{"injectables/RelationService.html":{}}}],["query",{"_index":840,"title":{},"body":{"injectables/RelationService.html":{}}}],["rajoute",{"_index":1048,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":88,"title":{},"body":{"classes/AssoNameDTO.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"injectables/GroupService.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"classes/RelationDTO.html":{}}}],["ref",{"_index":388,"title":{},"body":{"classes/Group.html":{},"classes/Relation.html":{}}}],["reflect",{"_index":999,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":649,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["related",{"_index":220,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["relation",{"_index":39,"title":{"classes/Relation.html":{}},"body":{"modules/AppModule.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{},"coverage.html":{},"index.html":{}}}],["relation.controller",{"_index":785,"title":{},"body":{"modules/RelationModule.html":{}}}],["relation.service",{"_index":756,"title":{},"body":{"controllers/RelationController.html":{},"modules/RelationModule.html":{}}}],["relation/:id",{"_index":745,"title":{},"body":{"controllers/RelationController.html":{}}}],["relation/byuser/:userid",{"_index":749,"title":{},"body":{"controllers/RelationController.html":{}}}],["relation/create",{"_index":726,"title":{},"body":{"controllers/RelationController.html":{}}}],["relation/delete/:id",{"_index":730,"title":{},"body":{"controllers/RelationController.html":{}}}],["relation/relation.module",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["relation/update/:id",{"_index":753,"title":{},"body":{"controllers/RelationController.html":{}}}],["relationcontroller",{"_index":713,"title":{"controllers/RelationController.html":{}},"body":{"controllers/RelationController.html":{},"modules/RelationModule.html":{},"coverage.html":{}}}],["relationdocument",{"_index":703,"title":{},"body":{"classes/Relation.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{},"miscellaneous/typealiases.html":{}}}],["relationdto",{"_index":723,"title":{"classes/RelationDTO.html":{}},"body":{"controllers/RelationController.html":{},"classes/RelationDTO.html":{},"coverage.html":{}}}],["relationdto):promise",{"_index":759,"title":{},"body":{"controllers/RelationController.html":{}}}],["relationid",{"_index":798,"title":{},"body":{"injectables/RelationService.html":{}}}],["relationinterface",{"_index":778,"title":{"interfaces/RelationInterface.html":{}},"body":{"interfaces/RelationInterface.html":{},"injectables/RelationService.html":{},"coverage.html":{}}}],["relationinterface):promise",{"_index":815,"title":{},"body":{"injectables/RelationService.html":{}}}],["relationmodel",{"_index":793,"title":{},"body":{"injectables/RelationService.html":{}}}],["relationmodule",{"_index":15,"title":{"modules/RelationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RelationModule.html":{},"modules.html":{},"overview.html":{}}}],["relations",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"controllers/RelationController.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{}}}],["relations/byasso/:id",{"_index":740,"title":{},"body":{"controllers/RelationController.html":{}}}],["relationschema",{"_index":711,"title":{},"body":{"classes/Relation.html":{},"modules/RelationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["relationservice",{"_index":755,"title":{"injectables/RelationService.html":{}},"body":{"controllers/RelationController.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{},"coverage.html":{},"overview.html":{}}}],["relier",{"_index":1034,"title":{},"body":{"index.html":{}}}],["remove",{"_index":578,"title":{},"body":{"injectables/GroupService.html":{}}}],["removed",{"_index":634,"title":{},"body":{"injectables/GroupService.html":{}}}],["removekid",{"_index":538,"title":{},"body":{"injectables/GroupService.html":{}}}],["removekid(groupid",{"_index":565,"title":{},"body":{"injectables/GroupService.html":{}}}],["removekidtogroup",{"_index":426,"title":{},"body":{"controllers/GroupController.html":{}}}],["removekidtogroup(params",{"_index":467,"title":{},"body":{"controllers/GroupController.html":{}}}],["removing",{"_index":471,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["required",{"_index":121,"title":{},"body":{"classes/Association.html":{},"classes/Group.html":{},"classes/Relation.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/GroupModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RelationModule.html":{},"overview.html":{}}}],["resolving",{"_index":836,"title":{},"body":{"injectables/RelationService.html":{}}}],["response",{"_index":681,"title":{},"body":{"injectables/NatsMessengerService.html":{},"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["responsepayloadnat",{"_index":865,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["responsepayloadnat(value",{"_index":923,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["responsepayloadnat(values",{"_index":892,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["responsepayloadnatsinterface",{"_index":883,"title":{"interfaces/responsePayloadNatsInterface.html":{}},"body":{"injectables/RpcSuccessInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["responses",{"_index":863,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["responsible",{"_index":216,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["result",{"_index":361,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/RelationService.html":{}}}],["results",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AssoInterface.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"modules/DatabaseModule.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/assoUserEditInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/responsePayloadNatsInterface.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":186,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["retrieved",{"_index":608,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["retrieves",{"_index":560,"title":{},"body":{"injectables/GroupService.html":{}}}],["retrive",{"_index":313,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{}}}],["return",{"_index":227,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["returns",{"_index":150,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["role",{"_index":79,"title":{},"body":{"interfaces/AssoInterface.html":{},"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"interfaces/assoUserEditInterface.html":{}}}],["roleuserenum",{"_index":81,"title":{},"body":{"interfaces/AssoInterface.html":{},"injectables/AssociationService.html":{},"interfaces/assoUserEditInterface.html":{},"miscellaneous/enumerations.html":{}}}],["roleuserenum.admin",{"_index":345,"title":{},"body":{"injectables/AssociationService.html":{}}}],["roleuserenum.user",{"_index":373,"title":{},"body":{"injectables/AssociationService.html":{}}}],["routes",{"_index":1068,"title":{},"body":{"index.html":{}}}],["rpcsuccessinterceptor",{"_index":205,"title":{"injectables/RpcSuccessInterceptor.html":{}},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{},"injectables/RpcSuccessInterceptor.html":{},"coverage.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["run",{"_index":1058,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":881,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"dependencies.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["rxjs/internal/firstvaluefrom",{"_index":677,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["récupération",{"_index":159,"title":{},"body":{"controllers/AssociationController.html":{}}}],["same",{"_index":328,"title":{},"body":{"injectables/AssociationService.html":{}}}],["save",{"_index":625,"title":{},"body":{"injectables/GroupService.html":{},"index.html":{}}}],["schema",{"_index":111,"title":{},"body":{"classes/Association.html":{},"modules/AssociationModule.html":{},"classes/Group.html":{},"modules/GroupModule.html":{},"classes/Relation.html":{},"modules/RelationModule.html":{}}}],["schema/association.schema",{"_index":207,"title":{},"body":{"controllers/AssociationController.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{}}}],["schema/group.schema",{"_index":484,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["schema/relation.schema",{"_index":754,"title":{},"body":{"controllers/RelationController.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{}}}],["schemafactory",{"_index":112,"title":{},"body":{"classes/Association.html":{},"classes/Group.html":{},"classes/Relation.html":{}}}],["schemafactory.createforclass(association",{"_index":126,"title":{},"body":{"classes/Association.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(group",{"_index":416,"title":{},"body":{"classes/Group.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(relation",{"_index":712,"title":{},"body":{"classes/Relation.html":{},"miscellaneous/variables.html":{}}}],["schematypes",{"_index":403,"title":{},"body":{"classes/Group.html":{},"classes/Relation.html":{}}}],["schematypes.objectid",{"_index":414,"title":{},"body":{"classes/Group.html":{},"classes/Relation.html":{}}}],["se",{"_index":1055,"title":{},"body":{"index.html":{}}}],["select",{"_index":842,"title":{},"body":{"injectables/RelationService.html":{}}}],["select('toref_id",{"_index":846,"title":{},"body":{"injectables/RelationService.html":{}}}],["send",{"_index":337,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/NatsMessengerService.html":{}}}],["send(cmd",{"_index":674,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["sends",{"_index":680,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["server",{"_index":1059,"title":{},"body":{"index.html":{}}}],["servers",{"_index":660,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["service",{"_index":319,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"injectables/RelationService.html":{}}}],["set",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["setmetadata(is_public_key",{"_index":1097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["single",{"_index":853,"title":{},"body":{"injectables/RelationService.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AssoInterface.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"modules/AssociationModule.html":{},"injectables/AssociationService.html":{},"modules/DatabaseModule.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"modules/RelationModule.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/assoUserEditInterface.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["specific",{"_index":461,"title":{},"body":{"controllers/GroupController.html":{}}}],["specified",{"_index":604,"title":{},"body":{"injectables/GroupService.html":{}}}],["specifies",{"_index":659,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["src/.../association.interface.ts",{"_index":1008,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../association.schema.ts",{"_index":1090,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../group.schema.ts",{"_index":1091,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1012,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../publicassociation.decorator.ts",{"_index":1094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../publicgroup.decorator.ts",{"_index":1095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../relation.enum.ts",{"_index":1007,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../relation.schema.ts",{"_index":1092,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../rpcsuccessinterceptor.ts",{"_index":1013,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["src/association/association.controller.ts",{"_index":129,"title":{},"body":{"controllers/AssociationController.html":{},"coverage.html":{}}}],["src/association/association.controller.ts:109",{"_index":172,"title":{},"body":{"controllers/AssociationController.html":{}}}],["src/association/association.controller.ts:126",{"_index":198,"title":{},"body":{"controllers/AssociationController.html":{}}}],["src/association/association.controller.ts:143",{"_index":181,"title":{},"body":{"controllers/AssociationController.html":{}}}],["src/association/association.controller.ts:24",{"_index":189,"title":{},"body":{"controllers/AssociationController.html":{}}}],["src/association/association.controller.ts:38",{"_index":194,"title":{},"body":{"controllers/AssociationController.html":{}}}],["src/association/association.controller.ts:51",{"_index":185,"title":{},"body":{"controllers/AssociationController.html":{}}}],["src/association/association.controller.ts:65",{"_index":158,"title":{},"body":{"controllers/AssociationController.html":{}}}],["src/association/association.controller.ts:81",{"_index":154,"title":{},"body":{"controllers/AssociationController.html":{}}}],["src/association/association.controller.ts:95",{"_index":144,"title":{},"body":{"controllers/AssociationController.html":{}}}],["src/association/association.module",{"_index":524,"title":{},"body":{"modules/GroupModule.html":{},"modules/RelationModule.html":{}}}],["src/association/association.module.ts",{"_index":262,"title":{},"body":{"modules/AssociationModule.html":{}}}],["src/association/association.service",{"_index":569,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["src/association/association.service.ts",{"_index":274,"title":{},"body":{"injectables/AssociationService.html":{},"coverage.html":{}}}],["src/association/association.service.ts:11",{"_index":288,"title":{},"body":{"injectables/AssociationService.html":{}}}],["src/association/association.service.ts:110",{"_index":291,"title":{},"body":{"injectables/AssociationService.html":{}}}],["src/association/association.service.ts:122",{"_index":312,"title":{},"body":{"injectables/AssociationService.html":{}}}],["src/association/association.service.ts:134",{"_index":310,"title":{},"body":{"injectables/AssociationService.html":{}}}],["src/association/association.service.ts:173",{"_index":308,"title":{},"body":{"injectables/AssociationService.html":{}}}],["src/association/association.service.ts:195",{"_index":305,"title":{},"body":{"injectables/AssociationService.html":{}}}],["src/association/association.service.ts:24",{"_index":301,"title":{},"body":{"injectables/AssociationService.html":{}}}],["src/association/association.service.ts:36",{"_index":303,"title":{},"body":{"injectables/AssociationService.html":{}}}],["src/association/association.service.ts:50",{"_index":297,"title":{},"body":{"injectables/AssociationService.html":{}}}],["src/association/association.service.ts:81",{"_index":298,"title":{},"body":{"injectables/AssociationService.html":{}}}],["src/association/association.service.ts:94",{"_index":294,"title":{},"body":{"injectables/AssociationService.html":{}}}],["src/association/decorators/publicassociation.decorator.ts",{"_index":937,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/association/dto/association.dto.ts",{"_index":87,"title":{},"body":{"classes/AssoNameDTO.html":{},"classes/AssociationDTO.html":{},"coverage.html":{}}}],["src/association/dto/association.dto.ts:10",{"_index":257,"title":{},"body":{"classes/AssociationDTO.html":{}}}],["src/association/dto/association.dto.ts:14",{"_index":255,"title":{},"body":{"classes/AssociationDTO.html":{}}}],["src/association/dto/association.dto.ts:17",{"_index":256,"title":{},"body":{"classes/AssociationDTO.html":{}}}],["src/association/dto/association.dto.ts:26",{"_index":92,"title":{},"body":{"classes/AssoNameDTO.html":{}}}],["src/association/dto/id.dto",{"_index":485,"title":{},"body":{"controllers/GroupController.html":{},"controllers/RelationController.html":{}}}],["src/association/dto/id.dto.ts",{"_index":635,"title":{},"body":{"classes/IdDto.html":{},"coverage.html":{}}}],["src/association/dto/id.dto.ts:7",{"_index":637,"title":{},"body":{"classes/IdDto.html":{}}}],["src/association/dto/name.dto.ts",{"_index":638,"title":{},"body":{"classes/NameDto.html":{},"coverage.html":{}}}],["src/association/dto/name.dto.ts:6",{"_index":639,"title":{},"body":{"classes/NameDto.html":{}}}],["src/association/interface/association.interface.ts",{"_index":67,"title":{},"body":{"interfaces/AssoInterface.html":{},"interfaces/assoUserEditInterface.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/association/schema/association.schema",{"_index":405,"title":{},"body":{"classes/Group.html":{},"classes/Relation.html":{}}}],["src/association/schema/association.schema.ts",{"_index":102,"title":{},"body":{"classes/Association.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/association/schema/association.schema.ts:15",{"_index":109,"title":{},"body":{"classes/Association.html":{}}}],["src/association/schema/association.schema.ts:21",{"_index":104,"title":{},"body":{"classes/Association.html":{}}}],["src/association/schema/association.schema.ts:28",{"_index":106,"title":{},"body":{"classes/Association.html":{}}}],["src/config/config.module.ts",{"_index":379,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/group/decorators/publicgroup.decorator.ts",{"_index":942,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/group/dto/group.dto.ts",{"_index":509,"title":{},"body":{"classes/GroupDto.html":{},"coverage.html":{}}}],["src/group/dto/group.dto.ts:12",{"_index":511,"title":{},"body":{"classes/GroupDto.html":{}}}],["src/group/dto/group.dto.ts:16",{"_index":513,"title":{},"body":{"classes/GroupDto.html":{}}}],["src/group/dto/group.dto.ts:19",{"_index":515,"title":{},"body":{"classes/GroupDto.html":{}}}],["src/group/dto/group.dto.ts:22",{"_index":510,"title":{},"body":{"classes/GroupDto.html":{}}}],["src/group/dto/group.dto.ts:8",{"_index":514,"title":{},"body":{"classes/GroupDto.html":{}}}],["src/group/group.controller.ts",{"_index":418,"title":{},"body":{"controllers/GroupController.html":{},"coverage.html":{}}}],["src/group/group.controller.ts:113",{"_index":459,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:126",{"_index":441,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:140",{"_index":465,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:155",{"_index":481,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:172",{"_index":470,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:23",{"_index":449,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:37",{"_index":453,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:51",{"_index":444,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:66",{"_index":432,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:82",{"_index":476,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:99",{"_index":437,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.module",{"_index":265,"title":{},"body":{"modules/AssociationModule.html":{}}}],["src/group/group.module.ts",{"_index":523,"title":{},"body":{"modules/GroupModule.html":{}}}],["src/group/group.service",{"_index":317,"title":{},"body":{"injectables/AssociationService.html":{}}}],["src/group/group.service.ts",{"_index":529,"title":{},"body":{"injectables/GroupService.html":{},"coverage.html":{}}}],["src/group/group.service.ts:101",{"_index":553,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:11",{"_index":541,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:129",{"_index":557,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:140",{"_index":551,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:152",{"_index":559,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:168",{"_index":562,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:197",{"_index":544,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:221",{"_index":566,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:24",{"_index":555,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:36",{"_index":546,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:50",{"_index":568,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:66",{"_index":548,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:81",{"_index":550,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/interface/group.interface.ts",{"_index":518,"title":{},"body":{"interfaces/GroupInterface.html":{},"coverage.html":{}}}],["src/group/schema/group.schema.ts",{"_index":381,"title":{},"body":{"classes/Group.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/group/schema/group.schema.ts:15",{"_index":395,"title":{},"body":{"classes/Group.html":{}}}],["src/group/schema/group.schema.ts:21",{"_index":391,"title":{},"body":{"classes/Group.html":{}}}],["src/group/schema/group.schema.ts:27",{"_index":394,"title":{},"body":{"classes/Group.html":{}}}],["src/group/schema/group.schema.ts:34",{"_index":398,"title":{},"body":{"classes/Group.html":{}}}],["src/group/schema/group.schema.ts:40",{"_index":390,"title":{},"body":{"classes/Group.html":{}}}],["src/interceptor/rpcsuccessinterceptor",{"_index":206,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{}}}],["src/interceptor/rpcsuccessinterceptor.ts",{"_index":859,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["src/interceptor/rpcsuccessinterceptor.ts:67",{"_index":871,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{}}}],["src/main.ts",{"_index":958,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/relation/dto/relation.dto.ts",{"_index":771,"title":{},"body":{"classes/RelationDTO.html":{},"coverage.html":{}}}],["src/relation/dto/relation.dto.ts:10",{"_index":776,"title":{},"body":{"classes/RelationDTO.html":{}}}],["src/relation/dto/relation.dto.ts:14",{"_index":775,"title":{},"body":{"classes/RelationDTO.html":{}}}],["src/relation/dto/relation.dto.ts:17",{"_index":772,"title":{},"body":{"classes/RelationDTO.html":{}}}],["src/relation/dto/relation.dto.ts:7",{"_index":773,"title":{},"body":{"classes/RelationDTO.html":{}}}],["src/relation/enum/relation.enum.ts",{"_index":1009,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/relation/interface/relation.interface.ts",{"_index":779,"title":{},"body":{"interfaces/RelationInterface.html":{},"coverage.html":{}}}],["src/relation/relation.controller.ts",{"_index":714,"title":{},"body":{"controllers/RelationController.html":{},"coverage.html":{}}}],["src/relation/relation.controller.ts:111",{"_index":733,"title":{},"body":{"controllers/RelationController.html":{}}}],["src/relation/relation.controller.ts:23",{"_index":725,"title":{},"body":{"controllers/RelationController.html":{}}}],["src/relation/relation.controller.ts:37",{"_index":748,"title":{},"body":{"controllers/RelationController.html":{}}}],["src/relation/relation.controller.ts:51",{"_index":739,"title":{},"body":{"controllers/RelationController.html":{}}}],["src/relation/relation.controller.ts:65",{"_index":743,"title":{},"body":{"controllers/RelationController.html":{}}}],["src/relation/relation.controller.ts:80",{"_index":752,"title":{},"body":{"controllers/RelationController.html":{}}}],["src/relation/relation.controller.ts:97",{"_index":729,"title":{},"body":{"controllers/RelationController.html":{}}}],["src/relation/relation.module.ts",{"_index":784,"title":{},"body":{"modules/RelationModule.html":{}}}],["src/relation/relation.service.ts",{"_index":786,"title":{},"body":{"injectables/RelationService.html":{},"coverage.html":{}}}],["src/relation/relation.service.ts:106",{"_index":800,"title":{},"body":{"injectables/RelationService.html":{}}}],["src/relation/relation.service.ts:11",{"_index":792,"title":{},"body":{"injectables/RelationService.html":{}}}],["src/relation/relation.service.ts:23",{"_index":795,"title":{},"body":{"injectables/RelationService.html":{}}}],["src/relation/relation.service.ts:40",{"_index":808,"title":{},"body":{"injectables/RelationService.html":{}}}],["src/relation/relation.service.ts:52",{"_index":804,"title":{},"body":{"injectables/RelationService.html":{}}}],["src/relation/relation.service.ts:64",{"_index":806,"title":{},"body":{"injectables/RelationService.html":{}}}],["src/relation/relation.service.ts:77",{"_index":811,"title":{},"body":{"injectables/RelationService.html":{}}}],["src/relation/relation.service.ts:94",{"_index":797,"title":{},"body":{"injectables/RelationService.html":{}}}],["src/relation/schema/relation.schema.ts",{"_index":688,"title":{},"body":{"classes/Relation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/relation/schema/relation.schema.ts:15",{"_index":696,"title":{},"body":{"classes/Relation.html":{}}}],["src/relation/schema/relation.schema.ts:20",{"_index":700,"title":{},"body":{"classes/Relation.html":{}}}],["src/relation/schema/relation.schema.ts:25",{"_index":699,"title":{},"body":{"classes/Relation.html":{}}}],["src/relation/schema/relation.schema.ts:29",{"_index":694,"title":{},"body":{"classes/Relation.html":{}}}],["standardized",{"_index":864,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["start:dev",{"_index":1060,"title":{},"body":{"index.html":{}}}],["started",{"_index":1015,"title":{"index.html":{}},"body":{}}],["statements",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":899,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["statuscode",{"_index":886,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["store",{"_index":594,"title":{},"body":{"injectables/GroupService.html":{}}}],["string",{"_index":74,"title":{},"body":{"interfaces/AssoInterface.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"classes/AssociationDTO.html":{},"injectables/AssociationService.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"injectables/GroupService.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"injectables/NatsMessengerService.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/assoUserEditInterface.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{},"miscellaneous/variables.html":{}}}],["string):promise",{"_index":324,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{}}}],["structure",{"_index":882,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["successful",{"_index":862,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["support",{"_index":1074,"title":{},"body":{"modules.html":{}}}],["sur",{"_index":1033,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1075,"title":{},"body":{"modules.html":{}}}],["table",{"_index":960,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["this.associationmodel.create(asso",{"_index":335,"title":{},"body":{"injectables/AssociationService.html":{}}}],["this.associationmodel.find",{"_index":326,"title":{},"body":{"injectables/AssociationService.html":{}}}],["this.associationmodel.findbyid(assoid",{"_index":323,"title":{},"body":{"injectables/AssociationService.html":{}}}],["this.associationmodel.findbyidandremove(assoid",{"_index":347,"title":{},"body":{"injectables/AssociationService.html":{}}}],["this.associationmodel.findbyidandupdate",{"_index":346,"title":{},"body":{"injectables/AssociationService.html":{}}}],["this.associationmodel.findone",{"_index":348,"title":{},"body":{"injectables/AssociationService.html":{}}}],["this.associationservice.associationdelete(params.id",{"_index":253,"title":{},"body":{"controllers/AssociationController.html":{}}}],["this.associationservice.associationedit(params.id",{"_index":251,"title":{},"body":{"controllers/AssociationController.html":{}}}],["this.associationservice.createassociation(body",{"_index":249,"title":{},"body":{"controllers/AssociationController.html":{}}}],["this.associationservice.getallassociations",{"_index":236,"title":{},"body":{"controllers/AssociationController.html":{}}}],["this.associationservice.getassobyid(params.id",{"_index":229,"title":{},"body":{"controllers/AssociationController.html":{}}}],["this.associationservice.getassosbyroleadmin(params.id",{"_index":246,"title":{},"body":{"controllers/AssociationController.html":{}}}],["this.associationservice.getassosbyroleuser(params.id",{"_index":244,"title":{},"body":{"controllers/AssociationController.html":{}}}],["this.associationservice.getassosbyuser(params.id",{"_index":240,"title":{},"body":{"controllers/AssociationController.html":{}}}],["this.associationservice.getoneassobyname(params.name",{"_index":235,"title":{},"body":{"controllers/AssociationController.html":{}}}],["this.assoservice.getassobyid(assoid",{"_index":586,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.assoservice.getassobyid(body.asso_id",{"_index":817,"title":{},"body":{"injectables/RelationService.html":{}}}],["this.getallgroupassoid(assoid",{"_index":606,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.getassobyid(asso.id",{"_index":356,"title":{},"body":{"injectables/AssociationService.html":{}}}],["this.getgroupbyid(groupid",{"_index":618,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.getgroupbyname(body.name",{"_index":573,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.getoneassobyname(asso.name",{"_index":331,"title":{},"body":{"injectables/AssociationService.html":{}}}],["this.groupmodel.create(body",{"_index":575,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.find",{"_index":592,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.findbyid(groupid",{"_index":572,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.findbyidandremove(groupid",{"_index":581,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.findbyidandupdate",{"_index":576,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.findone",{"_index":603,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupservice.addkid(body.id,params.id",{"_index":506,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.creategroup(body",{"_index":495,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.deletegroup(params.id",{"_index":498,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.getallgroupassoid(params.id",{"_index":500,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.getallgroups",{"_index":501,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.getallgroupsuserid(params.id",{"_index":503,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.getgroupbyid(params.id",{"_index":489,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.getgroupdetailsbyassoid(params.id",{"_index":493,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.getgroupnamebyeventid(params.id",{"_index":491,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.removekid(params.id",{"_index":507,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.updategroup(params.id",{"_index":496,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.nats.emit(cmd",{"_index":687,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["this.natsmessengerservice.send",{"_index":342,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{}}}],["this.relationmodel",{"_index":838,"title":{},"body":{"injectables/RelationService.html":{}}}],["this.relationmodel.create({...body",{"_index":821,"title":{},"body":{"injectables/RelationService.html":{}}}],["this.relationmodel.find({asso_id",{"_index":823,"title":{},"body":{"injectables/RelationService.html":{}}}],["this.relationmodel.find({fromref_id",{"_index":822,"title":{},"body":{"injectables/RelationService.html":{}}}],["this.relationmodel.findbyid(relationid",{"_index":824,"title":{},"body":{"injectables/RelationService.html":{}}}],["this.relationmodel.findbyidanddelete(relationid",{"_index":826,"title":{},"body":{"injectables/RelationService.html":{}}}],["this.relationmodel.findbyidandupdate",{"_index":825,"title":{},"body":{"injectables/RelationService.html":{}}}],["this.relationservice.createrelation(body",{"_index":760,"title":{},"body":{"controllers/RelationController.html":{}}}],["this.relationservice.deleterelation(params.id",{"_index":769,"title":{},"body":{"controllers/RelationController.html":{}}}],["this.relationservice.fetchparentfromkidrelation(kidarray",{"_index":770,"title":{},"body":{"controllers/RelationController.html":{}}}],["this.relationservice.getallrelationsbyasso(params.id",{"_index":764,"title":{},"body":{"controllers/RelationController.html":{}}}],["this.relationservice.getrelationbyid(params.id",{"_index":766,"title":{},"body":{"controllers/RelationController.html":{}}}],["this.relationservice.getrelationsbyuserid(params.id",{"_index":762,"title":{},"body":{"controllers/RelationController.html":{}}}],["this.relationservice.updaterelation(params.id",{"_index":767,"title":{},"body":{"controllers/RelationController.html":{}}}],["thisevent",{"_index":612,"title":{},"body":{"injectables/GroupService.html":{}}}],["thisevent.datas.groups",{"_index":617,"title":{},"body":{"injectables/GroupService.html":{}}}],["through",{"_index":616,"title":{},"body":{"injectables/GroupService.html":{},"controllers/RelationController.html":{}}}],["throw",{"_index":232,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["timestamps",{"_index":118,"title":{},"body":{"classes/Association.html":{},"classes/Group.html":{},"classes/Relation.html":{}}}],["todo",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["toref_id",{"_index":692,"title":{},"body":{"classes/Relation.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"injectables/RelationService.html":{}}}],["toute",{"_index":1066,"title":{},"body":{"index.html":{}}}],["transformed",{"_index":879,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["transformer",{"_index":985,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["transforms",{"_index":873,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["transport",{"_index":647,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["transport.nats",{"_index":657,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["trouvée",{"_index":590,"title":{},"body":{"injectables/GroupService.html":{}}}],["true",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"classes/Association.html":{},"injectables/AssociationService.html":{},"classes/Group.html":{},"classes/GroupDto.html":{},"injectables/GroupService.html":{},"modules/NatsMessengerModule.html":{},"classes/Relation.html":{},"injectables/RelationService.html":{},"miscellaneous/variables.html":{}}}],["true})@apiproperty",{"_index":397,"title":{},"body":{"classes/Group.html":{}}}],["true})@apiproperty()@ismongoid",{"_index":695,"title":{},"body":{"classes/Relation.html":{}}}],["true})@isenum(linkrelationenum)@apiproperty",{"_index":698,"title":{},"body":{"classes/Relation.html":{}}}],["true})@maxlength(50)@minlength(3)@isstring()@apiproperty",{"_index":108,"title":{},"body":{"classes/Association.html":{},"classes/Group.html":{}}}],["try",{"_index":226,"title":{},"body":{"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["type",{"_index":75,"title":{},"body":{"interfaces/AssoInterface.html":{},"classes/AssoNameDTO.html":{},"classes/Association.html":{},"controllers/AssociationController.html":{},"classes/AssociationDTO.html":{},"injectables/AssociationService.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"injectables/GroupService.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"injectables/NatsMessengerService.html":{},"classes/Relation.html":{},"controllers/RelationController.html":{},"classes/RelationDTO.html":{},"interfaces/RelationInterface.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/assoUserEditInterface.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1088,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":1003,"title":{},"body":{"dependencies.html":{}}}],["types",{"_index":404,"title":{},"body":{"classes/Group.html":{},"classes/Relation.html":{},"injectables/RpcSuccessInterceptor.html":{},"dependencies.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["types.objectid",{"_index":385,"title":{},"body":{"classes/Group.html":{},"classes/Relation.html":{}}}],["types/bcrypt",{"_index":979,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":919,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["un",{"_index":164,"title":{},"body":{"controllers/AssociationController.html":{},"classes/Group.html":{}}}],["undefined",{"_index":387,"title":{},"body":{"classes/Group.html":{},"classes/Relation.html":{}}}],["unique",{"_index":653,"title":{},"body":{"modules/NatsMessengerModule.html":{},"injectables/RelationService.html":{}}}],["unknown",{"_index":545,"title":{},"body":{"injectables/GroupService.html":{}}}],["unlicensed",{"_index":1086,"title":{},"body":{"properties.html":{}}}],["update",{"_index":339,"title":{},"body":{"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{}}}],["update_user_asso_role",{"_index":343,"title":{},"body":{"injectables/AssociationService.html":{}}}],["updateassociation",{"_index":140,"title":{},"body":{"controllers/AssociationController.html":{}}}],["updateassociation(params",{"_index":196,"title":{},"body":{"controllers/AssociationController.html":{}}}],["updated",{"_index":626,"title":{},"body":{"injectables/GroupService.html":{}}}],["updatedgroup",{"_index":629,"title":{},"body":{"injectables/GroupService.html":{}}}],["updatedgroup.save",{"_index":633,"title":{},"body":{"injectables/GroupService.html":{}}}],["updatedgroup.users",{"_index":631,"title":{},"body":{"injectables/GroupService.html":{}}}],["updatedgroup.users.filter(userid",{"_index":632,"title":{},"body":{"injectables/GroupService.html":{}}}],["updatedgroup.users.includes(kidid",{"_index":630,"title":{},"body":{"injectables/GroupService.html":{}}}],["updategroup",{"_index":427,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["updategroup(groupid",{"_index":567,"title":{},"body":{"injectables/GroupService.html":{}}}],["updategroup(params",{"_index":474,"title":{},"body":{"controllers/GroupController.html":{}}}],["updategroupaddkid",{"_index":428,"title":{},"body":{"controllers/GroupController.html":{}}}],["updategroupaddkid(body",{"_index":479,"title":{},"body":{"controllers/GroupController.html":{}}}],["updaterelation",{"_index":721,"title":{},"body":{"controllers/RelationController.html":{},"injectables/RelationService.html":{}}}],["updaterelation(params",{"_index":750,"title":{},"body":{"controllers/RelationController.html":{}}}],["updaterelation(relationid",{"_index":810,"title":{},"body":{"injectables/RelationService.html":{}}}],["use",{"_index":600,"title":{},"body":{"injectables/GroupService.html":{},"injectables/RelationService.html":{}}}],["used",{"_index":843,"title":{},"body":{"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["useinterceptors",{"_index":203,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{}}}],["useinterceptors(rpcsuccessinterceptor",{"_index":221,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{}}}],["user",{"_index":82,"title":{},"body":{"interfaces/AssoInterface.html":{},"controllers/AssociationController.html":{},"injectables/AssociationService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/RelationController.html":{},"injectables/RelationService.html":{},"interfaces/assoUserEditInterface.html":{},"miscellaneous/enumerations.html":{}}}],["user's",{"_index":340,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{}}}],["userassociations",{"_index":370,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{}}}],["userassociations.datas",{"_index":597,"title":{},"body":{"injectables/GroupService.html":{}}}],["userassociations.map((association",{"_index":375,"title":{},"body":{"injectables/AssociationService.html":{}}}],["userassos",{"_index":355,"title":{},"body":{"injectables/AssociationService.html":{}}}],["userassos.filter((association",{"_index":371,"title":{},"body":{"injectables/AssociationService.html":{}}}],["userassos.push",{"_index":362,"title":{},"body":{"injectables/AssociationService.html":{}}}],["userdetails",{"_index":350,"title":{},"body":{"injectables/AssociationService.html":{}}}],["userdetails.datas.associations",{"_index":354,"title":{},"body":{"injectables/AssociationService.html":{}}}],["userid",{"_index":296,"title":{},"body":{"injectables/AssociationService.html":{},"injectables/GroupService.html":{}}}],["userkid",{"_index":801,"title":{},"body":{"injectables/RelationService.html":{}}}],["usermodified",{"_index":341,"title":{},"body":{"injectables/AssociationService.html":{}}}],["users",{"_index":384,"title":{},"body":{"classes/Group.html":{},"classes/GroupDto.html":{},"interfaces/GroupInterface.html":{},"injectables/GroupService.html":{}}}],["uses",{"_index":655,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["using",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"injectables/AssociationService.html":{},"injectables/GroupService.html":{},"injectables/NatsMessengerService.html":{},"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["utilisateur",{"_index":165,"title":{},"body":{"controllers/AssociationController.html":{},"classes/Relation.html":{}}}],["utilisateurs",{"_index":710,"title":{},"body":{"classes/Relation.html":{}}}],["v",{"_index":1029,"title":{},"body":{"index.html":{}}}],["va",{"_index":1043,"title":{},"body":{"index.html":{}}}],["validationpipe",{"_index":204,"title":{},"body":{"controllers/AssociationController.html":{},"controllers/GroupController.html":{},"controllers/RelationController.html":{}}}],["validator",{"_index":96,"title":{},"body":{"classes/AssoNameDTO.html":{},"classes/Association.html":{},"classes/AssociationDTO.html":{},"classes/Group.html":{},"classes/GroupDto.html":{},"classes/IdDto.html":{},"classes/NameDto.html":{},"classes/Relation.html":{},"classes/RelationDTO.html":{},"dependencies.html":{},"index.html":{}}}],["value",{"_index":912,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":849,"title":{},"body":{"injectables/RelationService.html":{},"injectables/RpcSuccessInterceptor.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["values.code",{"_index":903,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["values.paginate",{"_index":898,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["values?.code",{"_index":901,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["values?.paginate",{"_index":896,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["values[object.keys(values)[0",{"_index":921,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["variable",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1093,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1028,"title":{},"body":{"index.html":{},"properties.html":{}}}],["versionkey",{"_index":119,"title":{},"body":{"classes/Association.html":{},"classes/Group.html":{},"classes/Relation.html":{}}}],["visualiser",{"_index":1065,"title":{},"body":{"index.html":{}}}],["without",{"_index":685,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AssociationModule.html":{},"modules/GroupModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RelationModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAssociationModule\n\nAssociationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAssociationModule->AppModule\n\n\n\n\n\nGroupModule\n\nGroupModule\n\nAppModule -->\n\nGroupModule->AppModule\n\n\n\n\n\nNatsMessengerModule\n\nNatsMessengerModule\n\nAppModule -->\n\nNatsMessengerModule->AppModule\n\n\n\n\n\nRelationModule\n\nRelationModule\n\nAppModule -->\n\nRelationModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AssociationModule\n                        \n                        \n                            GroupModule\n                        \n                        \n                            NatsMessengerModule\n                        \n                        \n                            RelationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AssociationModule } from './Association/association.module';\nimport { RelationModule } from './Relation/relation.module';\nimport { NatsMessengerModule } from '@app/nats-messenger';\nimport { GroupModule } from './Group/group.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule } from '@nestjs/config';\nimport { Module } from '@nestjs/common';\n\n//Main module from the application asso-groupe-relation\n@Module({\n  imports: [\n    // Configure global application settings using ConfigModule\n    ConfigModule.forRoot({\n      isGlobal: true,\n      //TODO set to true for PRODUCTION\n      //cache: true,\n    }),\n    // Configure MongooseModule to connect to the database\n    MongooseModule.forRoot(`${process.env.URI_BDD}?retryWrites=true&w=majority`), \n    // Import modules for associations, relations, and groups\n    AssociationModule,\n    RelationModule, \n    GroupModule, \n    // Import the module for NATS messaging\n    NatsMessengerModule\n  ],\n  controllers: [],\n  providers: [],\n\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AssoInterface.html":{"url":"interfaces/AssoInterface.html","title":"interface - AssoInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AssoInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Association/interface/association.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            image\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        image:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface AssoInterface {\n    name: string;\n    description?: string;\n    image?:string\n}\n\nexport interface assoUserEditInterface{\n  id: string; \n  role: string \n}\n\nexport enum RoleUserEnum {\n    User = 'User', //default \n    Admin = 'Admin'\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AssoNameDTO.html":{"url":"classes/AssoNameDTO.html","title":"class - AssoNameDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AssoNameDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Association/Dto/association.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MaxLength(50)@MinLength(3)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Association/Dto/association.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class AssociationDTO {\n\n    @MaxLength(50)\n    @MinLength(3)\n    @IsString()\n    readonly name: string;\n    \n    @MaxLength(500)\n    @IsString()\n    readonly description?: string;\n\n    @IsString()\n    readonly image?: string;\n\n    }\n    \n    export class AssoNameDTO {\n\n    @MaxLength(50)\n    @MinLength(3)\n    @IsString()\n    readonly name: string;\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Association.html":{"url":"classes/Association.html","title":"class - Association","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Association\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Association/Schema/association.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@MaxLength(500)@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Association/Schema/association.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@MaxLength(250)@IsString()@ApiProperty()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Association/Schema/association.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@MaxLength(50)@MinLength(3)@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Association/Schema/association.schema.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory, } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsString, MaxLength, MinLength } from 'class-validator';\n\n\nexport type AssociationDocument = Association & Document;\n@Schema({ collection: 'associations', timestamps: true, versionKey: false })\nexport class Association {\n    \n    @Prop({ required: true, })\n    @MaxLength(50)\n    @MinLength(3)\n    @IsString()\n    @ApiProperty()\n    name: string;\n\n    @Prop()\n    @MaxLength(500)\n    @IsString()\n    @ApiProperty()\n    description: string;\n\n    @Prop()\n    @MaxLength(250)\n    @IsString()\n    @ApiProperty()\n    @MaxLength(255)\n    image?: string;\n}\n\nexport const AssociationSchema = SchemaFactory.createForClass(Association);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AssociationController.html":{"url":"controllers/AssociationController.html","title":"controller - AssociationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AssociationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Association/association.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                assoByRoleAdmin\n                            \n                            \n                                    \n                                    Async\n                                assoByRoleUser\n                            \n                            \n                                    \n                                    Async\n                                assoByUser\n                            \n                            \n                                    \n                                    Async\n                                createAssociation\n                            \n                            \n                                    \n                                    Async\n                                deleteAssociation\n                            \n                            \n                                    \n                                    Async\n                                findAllAsso\n                            \n                            \n                                    \n                                    Async\n                                findAssoByID\n                            \n                            \n                                    \n                                    Async\n                                findAssoByName\n                            \n                            \n                                    \n                                    Async\n                                updateAssociation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        assoByRoleAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    assoByRoleAdmin(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('INDEX_ASSO_BY_ROLE_ADMIN')\n                \n            \n\n                    \n                        \n                            Defined in src/Association/association.controller.ts:95\n                        \n                    \n\n\n            \n                \n                        Fetch associations where the user provided has an ADMIN role\nGET - 'asso/role/admin/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto - user ID \nGET - 'asso/role/admin/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        assoByRoleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assoByRoleUser(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('INDEX_ASSO_BY_ROLE_USER')\n                \n            \n\n                    \n                        \n                            Defined in src/Association/association.controller.ts:81\n                        \n                    \n\n\n            \n                \n                        Fetch associations where the user provided has a USER role\nGET - 'asso/role/user/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto - user ID \nGET - 'asso/role/user/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        assoByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assoByUser(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('INDEX_ASSO_BY_USER')\n                \n            \n\n                    \n                        \n                            Defined in src/Association/association.controller.ts:65\n                        \n                    \n\n\n            \n                \n                        Récupération des associations dont fait partie un utilisateur\nMethode GET - 'asso/user/:id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto - ID de l'utilisateur\nMethode GET - 'asso/user/:id\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createAssociation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAssociation(body: AssociationDTO, params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('CREATE_ASSOCIATION')\n                \n            \n\n                    \n                        \n                            Defined in src/Association/association.controller.ts:109\n                        \n                    \n\n\n            \n                \n                        Creation of a new association by user ID\nPOST - 'association/create/byUser/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AssociationDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto - user IDPOST - 'association/create/byUser/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteAssociation\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAssociation(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('DELETE_ASSOCIATION')\n                \n            \n\n                    \n                        \n                            Defined in src/Association/association.controller.ts:143\n                        \n                    \n\n\n            \n                \n                        Delete an association\nDELETE - 'asso/delete/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto - association ID \nDELETE - 'asso/delete/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllAsso\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllAsso()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('INDEX_ASSOCIATIONS')\n                \n            \n\n                    \n                        \n                            Defined in src/Association/association.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Retrieve all associations from the application\nGET - 'associations'\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAssoByID\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAssoByID(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('GET_ASSOCIATION_BY_ID')\n                \n            \n\n                    \n                        \n                            Defined in src/Association/association.controller.ts:24\n                        \n                    \n\n\n            \n                \n                        Retrieve an association with its ID\nGET - 'association/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDTO - association ID \nGET - 'association/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAssoByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAssoByName(params: NameDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('GET_ASSOCIATION_BY_NAME')\n                \n            \n\n                    \n                        \n                            Defined in src/Association/association.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Retrieve an association with its name\nGET - 'association/ByName/:name'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            NameDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nnameDTO - association name \nGET - 'association/ByName/:name'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateAssociation\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAssociation(params: IdDto, body: AssociationDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('UPDATE_ASSOCIATION')\n                \n            \n\n                    \n                        \n                            Defined in src/Association/association.controller.ts:126\n                        \n                    \n\n\n            \n                \n                        Modification of an association\nMethode PUT - 'asso/update/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto - association ID \nMethode PUT - 'asso/update/:id'\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            AssociationDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, NotFoundException, UseInterceptors, ValidationPipe } from '@nestjs/common'\nimport { RpcSuccessInterceptor } from 'src/Interceptor/RpcSuccessInterceptor';\nimport { AssociationDocument } from './Schema/association.schema';\nimport { MessagePattern, Payload } from '@nestjs/microservices'\nimport { AssociationService } from './association.service';\nimport { AssociationDTO } from './Dto/association.dto';\nimport { NameDto } from './Dto/name.dto';\nimport { IdDto } from './Dto/id.dto';\n\n//Controller responsible for managing API endpoints related to ASSOCIATIONS \n@Controller()\n@UseInterceptors(RpcSuccessInterceptor)\nexport class AssociationController {\n    constructor(\n        private readonly associationService: AssociationService,\n        ) {}\n    \n    /**\n     * Retrieve an association with its ID \n     * @param params - IdDTO - association ID \n     * GET - 'association/:id'\n     */\n    @MessagePattern('GET_ASSOCIATION_BY_ID')\n    async findAssoByID(@Payload('params', new ValidationPipe()) params: IdDto): Promise {\n        try {\n            return await this.associationService.getAssoByID(params.id)\n        } catch (error) {\n            throw new NotFoundException(error) \n        }\n    }\n\n    /**\n     * Retrieve an association with its name\n     * @param params - nameDTO - association name \n     * GET - 'association/ByName/:name'\n     */\n    @MessagePattern('GET_ASSOCIATION_BY_NAME')\n    async findAssoByName(@Payload('params', new ValidationPipe()) params: NameDto): Promise {\n        try {\n            return await this.associationService.getOneAssoByName(params.name);\n        } catch (error) {\n            throw new NotFoundException(error) \n        }\n    }\n\n    /**\n     * Retrieve all associations from the application \n     * GET - 'associations'\n     */\n    @MessagePattern('INDEX_ASSOCIATIONS')\n    async findAllAsso(): Promise {\n        try {\n        return await this.associationService.getAllAssociations();\n        } catch (error) {\n            throw new NotFoundException(error) \n        }\n    }\n\n    /**\n     * Récupération des associations dont fait partie un utilisateur\n     * @param params - IdDto - ID de l'utilisateur\n     * Methode GET - 'asso/user/:id\n     */\n    @MessagePattern('INDEX_ASSO_BY_USER')\n    async assoByUser(@Payload('params') params: IdDto):Promise {\n        try {\n           const assos = await this.associationService.getAssosByUser(params.id)\n           console.log(\"🚀 ~ file: association.controller.ts:68 ~ AssociationController ~ assoByUser ~ assos:\", assos)\n           return assos;\n        } catch (error) {\n            throw new NotFoundException(error) \n        }\n    }\n\n    /**\n     * Fetch associations where the user provided has a USER role \n     * @param params - IdDto - user ID \n     * GET - 'asso/role/user/:id'\n     */\n    @MessagePattern('INDEX_ASSO_BY_ROLE_USER')\n    async assoByRoleUser(@Payload('params', new ValidationPipe()) params: IdDto):Promise {\n        try {\n           return await this.associationService.getAssosByRoleUser(params.id)\n        } catch (error) {\n            throw new NotFoundException(error) \n        }\n    }\n\n    /**\n     * Fetch associations where the user provided has an ADMIN role\n     * @param params - IdDto - user ID \n     * GET - 'asso/role/admin/:id'\n     */    \n    @MessagePattern('INDEX_ASSO_BY_ROLE_ADMIN')\n    async assoByRoleAdmin(@Payload('params', new ValidationPipe()) params: IdDto) :Promise{\n        try {\n           return await this.associationService.getAssosByRoleAdmin(params.id)\n        } catch (error) {\n            throw new NotFoundException(error) \n        }\n    }\n\n    /**\n     * Creation of a new association by user ID \n     * @param params - IdDto - user ID  \n     * POST - 'association/create/byUser/:id'\n     */   \n    @MessagePattern('CREATE_ASSOCIATION')\n    async createAssociation(\n        @Payload('body', new ValidationPipe()) body: AssociationDTO,\n        @Payload('params', new ValidationPipe()) params: IdDto): Promise { \n\n        try {\n            return await this.associationService.createAssociation(body, params.id);\n        } catch (error) {\n            throw new NotFoundException(error) \n        }\n    }\n        \n    /**\n     * Modification of an association\n     * @param params - IdDto - association ID \n     * Methode PUT - 'asso/update/:id'\n     */ \n    @MessagePattern('UPDATE_ASSOCIATION')\n    async updateAssociation(\n        @Payload('params', new ValidationPipe()) params: IdDto, \n        @Payload('body', new ValidationPipe()) body: AssociationDTO\n        ): Promise {\n        try {\n            return await this.associationService.associationEdit(params.id, body);\n        } catch (error) {\n            throw new NotFoundException(error) \n        }    \n    }\n\n    /**\n     * Delete an association \n     * @param params - IdDto - association ID \n     * DELETE - 'asso/delete/:id'\n     */  \n    @MessagePattern('DELETE_ASSOCIATION')\n    async deleteAssociation(@Payload('params', new ValidationPipe()) params: IdDto):Promise {\n        try {\n            await this.associationService.associationDelete(params.id);\n        } catch (error) {\n            throw new NotFoundException(error) \n        }\n    }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AssociationDTO.html":{"url":"classes/AssociationDTO.html","title":"class - AssociationDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AssociationDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Association/Dto/association.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Readonly\n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MaxLength(500)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Association/Dto/association.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Association/Dto/association.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MaxLength(50)@MinLength(3)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Association/Dto/association.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class AssociationDTO {\n\n    @MaxLength(50)\n    @MinLength(3)\n    @IsString()\n    readonly name: string;\n    \n    @MaxLength(500)\n    @IsString()\n    readonly description?: string;\n\n    @IsString()\n    readonly image?: string;\n\n    }\n    \n    export class AssoNameDTO {\n\n    @MaxLength(50)\n    @MinLength(3)\n    @IsString()\n    readonly name: string;\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AssociationModule.html":{"url":"modules/AssociationModule.html","title":"module - AssociationModule","body":"\n                   \n\n\n\n\n    Modules\n    AssociationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AssociationModule\n\n\n\ncluster_AssociationModule_providers\n\n\n\ncluster_AssociationModule_exports\n\n\n\ncluster_AssociationModule_imports\n\n\n\n\nNatsMessengerModule\n\nNatsMessengerModule\n\n\n\nAssociationModule\n\nAssociationModule\n\nAssociationModule -->\n\nNatsMessengerModule->AssociationModule\n\n\n\n\n\nAssociationService \n\nAssociationService \n\nAssociationService  -->\n\nAssociationModule->AssociationService \n\n\n\n\n\nAssociationService\n\nAssociationService\n\nAssociationModule -->\n\nAssociationService->AssociationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Association/association.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AssociationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AssociationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            NatsMessengerModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AssociationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AssociationSchema } from './Schema/association.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Module, forwardRef } from '@nestjs/common';\nimport { AssociationController } from './association.controller';\nimport { AssociationService } from './association.service';\nimport { GroupModule } from 'src/Group/group.module';\nimport { NatsMessengerModule } from '@app/nats-messenger';\n\n//Module in charge of handling ASSOCIATIONS\n@Module({\n    imports: [\n        // import the database schema for ASSOCIATIONS in Mongoose\n        MongooseModule.forFeature([\n            { name: 'Associations', schema: AssociationSchema},\n        ]),\n        // import the GroupModule module as dependency \n        forwardRef(() => GroupModule),\n        // import NatsMessengerModule module for NATS messenging\n        NatsMessengerModule\n    ],\n    controllers: [AssociationController],\n    providers: [AssociationService],\n    exports: [AssociationService],\n})\nexport class AssociationModule { }\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AssociationService.html":{"url":"injectables/AssociationService.html","title":"injectable - AssociationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AssociationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Association/association.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                associationDelete\n                            \n                            \n                                    Async\n                                associationEdit\n                            \n                            \n                                    Async\n                                createAssociation\n                            \n                            \n                                    Async\n                                getAllAssociations\n                            \n                            \n                                    Async\n                                getAssoByID\n                            \n                            \n                                    Async\n                                getAssoByName\n                            \n                            \n                                    Async\n                                getAssosByRoleAdmin\n                            \n                            \n                                    Async\n                                getAssosByRoleUser\n                            \n                            \n                                    Async\n                                getAssosByUser\n                            \n                            \n                                    Async\n                                getOneAssoByName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(associationModel: Model, groupService: GroupService, natsMessengerService: NatsMessengerService)\n                    \n                \n                        \n                            \n                                Defined in src/Association/association.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        associationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        groupService\n                                                  \n                                                        \n                                                                        GroupService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        natsMessengerService\n                                                  \n                                                        \n                                                                        NatsMessengerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        associationDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    associationDelete(assoId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Association/association.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Delete an association\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                assoId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        associationEdit\n                        \n                    \n                \n            \n            \n                \n                        \n                    associationEdit(assoId: string, body: AssoInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Association/association.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Modification of an association\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                assoId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            AssoInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAssoInterface\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAssociation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAssociation(asso: AssoInterface, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Association/association.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Creation of a new association\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                asso\n                                            \n                                                            AssoInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllAssociations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllAssociations()\n                \n            \n\n\n                    \n                        \n                            Defined in src/Association/association.service.ts:81\n                        \n                    \n\n\n            \n                \n                        Retrieve the list of all associations of the application\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAssoByID\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAssoByID(assoId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Association/association.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Retrieve an association by its ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                assoId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAssoByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAssoByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Association/association.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Retrieve an association by its name\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAssosByRoleAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAssosByRoleAdmin(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Association/association.service.ts:195\n                        \n                    \n\n\n            \n                \n                        Retrieve the association where the user is a part of with an ADMIN role\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAssosByRoleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAssosByRoleUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Association/association.service.ts:173\n                        \n                    \n\n\n            \n                \n                        Retrieve the association where the user is a part of with an USER role\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAssosByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAssosByUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Association/association.service.ts:134\n                        \n                    \n\n\n            \n                \n                        Retrieve the association list where the user is part of\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOneAssoByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOneAssoByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Association/association.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Retrive an association by its name\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable, NotFoundException, forwardRef } from '@nestjs/common';\nimport { AssoInterface, RoleUserEnum } from './interface/association.interface';\nimport { AssociationDocument } from './Schema/association.schema';\nimport { NatsMessengerService } from '@app/nats-messenger';\nimport { GroupService } from 'src/Group/group.service';\nimport { InjectModel} from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n\n// Service responsible for managing operations related to ASSOCIATIONS \n@Injectable()\nexport class AssociationService {\n    constructor(\n        @InjectModel('Associations')\n        private associationModel: Model,\n        @Inject(forwardRef(() => GroupService))\n        private groupService: GroupService,\n        private readonly natsMessengerService: NatsMessengerService,\n    ) { }\n    \n    /**\n     * Retrieve an association by its ID\n     * @param params - ID of the association\n     */\n    async getAssoByID(assoId: string): Promise {\n      try {\n        return await this.associationModel.findById(assoId);\n      } catch (error) {\n        throw new NotFoundException(error) \n      }\n    }\n\n    /**\n     * Retrieve an association by its name\n     * @param params - name of the association\n     */\n    async getAssoByName(name: string):Promise {\n      try {\n        const [assoName] = await this.associationModel.find({ name });\n        return assoName\n      } catch (error) {\n        throw new NotFoundException(error) \n      }\n    }\n\n    /**\n     * Creation of a new association \n     * @param params - user ID \n     * @param body - AssoInterface \n     */\n    async createAssociation(asso: AssoInterface, userId: string ): Promise {\n      try {\n        // Check if an association with the same name already exists\n        if (await this.getOneAssoByName(asso.name)) throw new BadRequestException('Association already exists');\n        // Create the association\n        const assoCreated = await this.associationModel.create(asso);\n\n        if(assoCreated) {\n          // Send a message to update the user's association role to ADMIN\n          const userModified = await this.natsMessengerService.send(\n            'UPDATE_USER_ASSO_ROLE',\n            {\n              params: {\n                id: userId\n              },\n              body: {\n                id: assoCreated._id,\n                role: RoleUserEnum.Admin\n              }\n            }\n            )\n          return userModified\n        } \n      } catch (error) {\n        throw new NotFoundException(error) \n      }\n    }\n\n    /**\n     * Retrieve the list of all associations of the application \n     */\n    async getAllAssociations(): Promise {\n      try {\n        return await this.associationModel.find()\n      } catch (error) {\n        throw new NotFoundException(error) \n      }\n    }\n\n    /**\n     * Modification of an association  \n     * @param params - ID of the association \n     * @param body - AssoInterface  \n     */\n    async associationEdit(assoId: string, body: AssoInterface): Promise {\n    try {\n        return await this.associationModel.findByIdAndUpdate(\n          assoId,\n          body,\n          { new: true }\n        )\n      } catch (error) {\n        throw new NotFoundException(error) \n      }\n    }\n    \n    /**\n     * Delete an association \n     * @param params - association ID \n     */ \n    async associationDelete(assoId: string) {\n      try {\n        await this.associationModel.findByIdAndRemove(assoId);\n      } catch (error) {\n        throw new NotFoundException(error) \n      }\n    }\n\n    /**\n     * Retrive an association by its name \n     * @param params - association name \n     */ \n    async getOneAssoByName(name: string): Promise {\n      try {\n        return await this.associationModel.findOne({ name });\n      } catch (error) {\n        throw new NotFoundException(error) \n      }\n    }\n\n    /**\n     * Retrieve the association list where the user is part of \n     * @param params - user ID \n     */ \n    async getAssosByUser(userId: string):Promise {\n      try {\n        //get the user details using NATS service \n        const userDetails = await this.natsMessengerService.send(\n          'GET_USER_BY_ID',\n          { params: { id: userId }}\n        )\n        console.log(\"🚀 ~ file: association.service.ts:141 ~ AssociationService ~ getAssosByUser ~ userDetails:\", userDetails)\n        \n      // Check if user details contain associations\n      if (userDetails.datas.associations) {\n        const userAssos = [];\n\n        for (const asso of userDetails.datas.associations) {\n          //retrieve the details of the association \n          const association = await this.getAssoByID(asso.id);\n          console.log(\"🚀 ~ file: association.service.ts:150 ~ AssociationService ~ getAssosByUser ~ association:\", association)\n          //if the association exists, we push into the array \n          if (association) {\n          // Push association data into the result array\n          userAssos.push({\n            id: asso.id,\n            role: asso.role,\n            name: association.name,\n          });\n        }}\n\n        return userAssos;\n        }\n      } catch (error) {\n        throw new NotFoundException(error) \n      }\n    }\n\n\n    /**\n     * Retrieve the association where the user is a part of with an USER role \n     * @param params - user ID \n     */ \n    async getAssosByRoleUser(userId: string):Promise {\n      try {\n        //retrieve the user details using NATS \n        const userDetails = await this.natsMessengerService.send(\n          'GET_USER_BY_ID',\n          { params: { id:userId }}\n        )\n        // Extract associations from the user details\n        const userAssos = userDetails.datas.associations\n        // Filter associations based on USER role\n        const userAssociations = userAssos.filter((association: { role: string; }) => association.role === RoleUserEnum.User)\n        // Return an array of association IDs\n        return userAssociations.map((association: { _id: string; }) => association._id)\n      } catch (error) {\n        throw new NotFoundException(error) \n      }\n    }\n  \n    /**\n     * Retrieve the association where the user is a part of with an ADMIN role \n     * @param params - user ID\n     */ \n    async getAssosByRoleAdmin(userId: string):Promise {\n      try {\n        //retrieve the user details using NATS  \n        const userDetails = await this.natsMessengerService.send(\n          'GET_USER_BY_ID',\n          { params: { id:userId } }\n        )\n        // Extract associations from the user details\n        const userAssos = userDetails.datas.associations\n        // Filter associations based on ADMIN role\n        const userAssociations = userAssos.filter((association: { role: string; }) => association.role === RoleUserEnum.Admin)\n        // Return an array of association IDs\n        return userAssociations.map((association: { _id: string; }) => association._id)\n      } catch (error) {\n        throw new NotFoundException(error) \n      }\n    } \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n\n@Module({\n    imports: [MongooseModule.forRoot(`${process.env.URI_BDD}?retryWrites=true&w=majority`)],\n})\nexport class DatabaseModule { }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Group.html":{"url":"classes/Group.html","title":"class - Group","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Group\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Group/Schema/group.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                association_id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                headcount\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        association_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string | Types.ObjectId | AssociationDocument\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Association'})@IsMongoId()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Group/Schema/group.schema.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@MaxLength(500)@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Group/Schema/group.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        headcount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Max(50)@IsNumber()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Group/Schema/group.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@MaxLength(50)@MinLength(3)@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Group/Schema/group.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@IsArray()@IsMongoId({each: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Group/Schema/group.schema.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose'\nimport { ApiProperty } from '@nestjs/swagger'\nimport { IsArray, IsMongoId, IsNumber, IsString, Max, MaxLength, MinLength } from 'class-validator'\nimport { SchemaTypes, Types, Document } from 'mongoose'\nimport { AssociationDocument } from 'src/Association/Schema/association.schema'\n\nexport type GroupDocument = Group & Document\n@Schema({ collection: 'group', timestamps: true, versionKey: false })\nexport class Group {\n    @Prop({ required: true, })\n    @MaxLength(50)\n    @MinLength(3)\n    @IsString()\n    @ApiProperty()\n    name: string\n\n    @Prop()\n    @MaxLength(500)\n    @IsString()\n    @ApiProperty()\n    description: string\n\n    @Prop()\n    @Max(50)\n    @IsNumber()\n    @ApiProperty()\n    headcount: number;\n  \n    //string car ref à un autre ms\n    @Prop()\n    @IsArray()\n    @IsMongoId({each: true})\n    @ApiProperty()\n    users: string[]\n\n    //ref asso car ds meme ms\n    @Prop({ type: SchemaTypes.ObjectId, ref: 'Association' })\n    @IsMongoId()\n    @ApiProperty()\n    association_id: string | Types.ObjectId | AssociationDocument;\n\n}\nexport const GroupSchema = SchemaFactory.createForClass(Group)\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GroupController.html":{"url":"controllers/GroupController.html","title":"controller - GroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Group/group.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createGroup\n                            \n                            \n                                    \n                                    Async\n                                deleteGroup\n                            \n                            \n                                    \n                                    Async\n                                findAllAsso\n                            \n                            \n                                    \n                                    Async\n                                findGroupDetailsByAssoId\n                            \n                            \n                                    \n                                    Async\n                                findGroupID\n                            \n                            \n                                    \n                                    Async\n                                findGroupNameByEventId\n                            \n                            \n                                    \n                                    Async\n                                indexGroupByAssoId\n                            \n                            \n                                    \n                                    Async\n                                indexGroupByUserId\n                            \n                            \n                                    \n                                    Async\n                                removeKidToGroup\n                            \n                            \n                                    \n                                    Async\n                                updateGroup\n                            \n                            \n                                    \n                                    Async\n                                updateGroupAddKid\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createGroup\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGroup(body: GroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('CREATE_GROUP')\n                \n            \n\n                    \n                        \n                            Defined in src/Group/group.controller.ts:66\n                        \n                    \n\n\n            \n                \n                        Création of a new group\nPOST - 'group/create'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            GroupDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nGroupDTO\nPOST - 'group/create'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteGroup\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteGroup(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('DELETE_GROUP')\n                \n            \n\n                    \n                        \n                            Defined in src/Group/group.controller.ts:99\n                        \n                    \n\n\n            \n                \n                        Delete a group\nDELETE - 'group/delete/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \ngroup IDDELETE - 'group/delete/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllAsso\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllAsso()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('INDEX_GROUPS')\n                \n            \n\n                    \n                        \n                            Defined in src/Group/group.controller.ts:126\n                        \n                    \n\n\n            \n                \n                        Retrieve all groups.\nGET - 'groups'\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findGroupDetailsByAssoId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findGroupDetailsByAssoId(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('GET_GROUPDETAILS_BY_ASSO')\n                \n            \n\n                    \n                        \n                            Defined in src/Group/group.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Get the names+IDs of groups based on the ID of an association.\nGET - 'grouplist/ByAsso/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAssociation ID\nGET - 'grouplist/ByAsso/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findGroupID\n                        \n                    \n                \n            \n            \n                \n                        \n                    findGroupID(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('GET_GROUP_BY_ID')\n                \n            \n\n                    \n                        \n                            Defined in src/Group/group.controller.ts:23\n                        \n                    \n\n\n            \n                \n                        Retrieve a group by its ID.\nGET - 'group/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \ngroup ID \nGET - 'group/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findGroupNameByEventId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findGroupNameByEventId(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('GET_GROUPNAME_BY_EVENTID')\n                \n            \n\n                    \n                        \n                            Defined in src/Group/group.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Get the names of groups based on the ID of an event.\nGET - 'group/name/ByEvent/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nevent ID .\nGET - 'group/name/ByEvent/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        indexGroupByAssoId\n                        \n                    \n                \n            \n            \n                \n                        \n                    indexGroupByAssoId(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('GET_GROUPS_BY_ASSO_ID')\n                \n            \n\n                    \n                        \n                            Defined in src/Group/group.controller.ts:113\n                        \n                    \n\n\n            \n                \n                        Retrieve all groups belonging to a specific association.\nGET - 'groups/ByAsso/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nassociation ID \nGET - 'groups/ByAsso/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        indexGroupByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    indexGroupByUserId(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('GET_GROUPS_BY_USER_ID')\n                \n            \n\n                    \n                        \n                            Defined in src/Group/group.controller.ts:140\n                        \n                    \n\n\n            \n                \n                        Retrieve all groups belonging to a specific association based on the user.\nGET -  'groups/ByAsso/ByUser/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID \nGET -  'groups/ByAsso/ByUser/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        removeKidToGroup\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeKidToGroup(params: IdDto, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('REMOVE_KID_FROM_GROUP')\n                \n            \n\n                    \n                        \n                            Defined in src/Group/group.controller.ts:172\n                        \n                    \n\n\n            \n                \n                        Update a group by removing a Kid ID.\nPOST - 'group/removeKid/ByGroup/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    -Group ID\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nKid ID\nPOST - 'group/removeKid/ByGroup/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateGroup\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateGroup(params: IdDto, body: GroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('UPDATE_GROUP')\n                \n            \n\n                    \n                        \n                            Defined in src/Group/group.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Modification of a group\nPUT - 'group/update/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \ngroup IDPUT - 'group/update/:id'\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            GroupDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nGroupDTO\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateGroupAddKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateGroupAddKid(body: literal type, params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('ADD_KID_TO_GROUP')\n                \n            \n\n                    \n                        \n                            Defined in src/Group/group.controller.ts:155\n                        \n                    \n\n\n            \n                \n                        Update a group by adding a Kid ID.\nPOST - 'group/addKid/byGroup/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nKid ID\nPOST - 'group/addKid/byGroup/:id'\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nGroup ID\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, NotFoundException, UseInterceptors, ValidationPipe } from '@nestjs/common'\nimport { RpcSuccessInterceptor } from 'src/Interceptor/RpcSuccessInterceptor'\nimport { MessagePattern, Payload } from '@nestjs/microservices'\nimport { GroupDocument } from './Schema/group.schema'\nimport { IdDto } from 'src/Association/Dto/id.dto'\nimport { GroupService } from './group.service'\nimport { GroupDto } from './Dto/group.dto'\n\n// Controller responsible for handling API endpoints related to GROUPS\n@Controller()\n@UseInterceptors(RpcSuccessInterceptor)\nexport class GroupController {\n    constructor(\n        private readonly groupService: GroupService,\n    ) { }\n\n    /**\n     * Retrieve a group by its ID.  \n     * @param params - group ID \n     * GET - 'group/:id'\n     */\n    @MessagePattern('GET_GROUP_BY_ID')\n    async findGroupID(@Payload('params', new ValidationPipe()) params: IdDto): Promise {\n        try {\n            return await this.groupService.getGroupById(params.id);\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Get the names of groups based on the ID of an event.\n     * @param params - event ID .\n     * GET - 'group/name/ByEvent/:id'\n     */    \n    @MessagePattern('GET_GROUPNAME_BY_EVENTID')\n    async findGroupNameByEventId(@Payload('params', new ValidationPipe()) params: IdDto):Promise {\n        try {\n            return await this.groupService.getGroupNameByEventId(params.id)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Get the names+IDs of groups based on the ID of an association.\n     * @param params - Association ID\n     * GET - 'grouplist/ByAsso/:id'\n     */ \n    @MessagePattern('GET_GROUPDETAILS_BY_ASSO')\n    async findGroupDetailsByAssoId(@Payload('params', new ValidationPipe()) params: IdDto):Promise \n    {\n        try {\n            return await this.groupService.getGroupDetailsByAssoId(params.id)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n \n     /**\n     * Création of a new group\n     * @param body - GroupDTO\n     * POST - 'group/create'\n     */ \n    @MessagePattern('CREATE_GROUP')\n    async createGroup(@Payload('body') body: GroupDto): Promise\n    {\n        try {\n            return await this.groupService.createGroup(body);\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Modification of a group\n     * @param body - GroupDTO\n     * @param params - group ID  \n     * PUT - 'group/update/:id'\n     */ \n    @MessagePattern('UPDATE_GROUP')\n    async updateGroup(\n        @Payload('params', new ValidationPipe()) params: IdDto, \n        @Payload('body') body: GroupDto): Promise\n    {\n        try {\n            return await this.groupService.updateGroup(params.id, body); \n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n        \n    /**\n     * Delete a group \n     * @param params - group ID  \n     * DELETE - 'group/delete/:id'\n     */ \n    @MessagePattern('DELETE_GROUP')\n    async deleteGroup(@Payload('params', new ValidationPipe()) params: IdDto):Promise {\n        try {\n            return await this.groupService.deleteGroup(params.id);\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Retrieve all groups belonging to a specific association.\n     * @param params - association ID \n     * GET - 'groups/ByAsso/:id'\n     */ \n    @MessagePattern('GET_GROUPS_BY_ASSO_ID')\n    async indexGroupByAssoId(@Payload('params', new ValidationPipe()) params: IdDto):Promise {\n        try {\n            return await this.groupService.getAllGroupAssoId(params.id)\n        } catch (error) {\n            throw new NotFoundException(error) \n        }\n    }\n\n    /**\n     * Retrieve all groups.\n     * GET - 'groups'\n     */ \n    @MessagePattern('INDEX_GROUPS')\n    async findAllAsso(): Promise {\n        try {\n            return await this.groupService.getAllGroups();\n        } catch (error) {\n            throw new NotFoundException(error) \n        }\n    }\n\n    /**\n     * Retrieve all groups belonging to a specific association based on the user.\n     * @param params - User ID \n     * GET -  'groups/ByAsso/ByUser/:id'\n     */ \n    @MessagePattern('GET_GROUPS_BY_USER_ID')\n    async indexGroupByUserId(@Payload('params', new ValidationPipe()) params: IdDto):Promise {\n        try {\n            return await this.groupService.getAllGroupsUserId(params.id)\n        } catch (error) {\n            throw new NotFoundException(error) \n        }\n    }\n\n    /**\n     * Update a group by adding a Kid ID.\n     * @param params - Group ID\n     * @param body - Kid ID\n     * POST - 'group/addKid/byGroup/:id'\n     */ \n    @MessagePattern('ADD_KID_TO_GROUP')\n    async updateGroupAddKid( \n        @Payload('body') body: {id: string}, //kidId\n        @Payload('params', new ValidationPipe()) params: IdDto): Promise {  //groupID\n        try {\n            return await this.groupService.addKid(body.id,params.id)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n   \n    /**\n     * Update a group by removing a Kid ID.\n     * @param params -Group ID\n     * @param body - Kid ID\n     * POST - 'group/removeKid/ByGroup/:id'\n     */ \n    @MessagePattern('REMOVE_KID_FROM_GROUP')\n    async removeKidToGroup(\n        @Payload('params', new ValidationPipe()) params: IdDto, // groupId\n        @Payload('body') body: {id: string}): Promise{\n        try {\n            return await this.groupService.removeKid(params.id, body.id)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupDto.html":{"url":"classes/GroupDto.html","title":"class - GroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Group/Dto/group.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                association_id\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                headcount\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    Readonly\n                                    Optional\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        association_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Group/Dto/group.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MaxLength(500)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Group/Dto/group.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        headcount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Max(50)@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Group/Dto/group.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MaxLength(50)@MinLength(3)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Group/Dto/group.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                            Optional\n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsMongoId({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Group/Dto/group.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsMongoId, IsNumber, IsString, Max, MaxLength, MinLength,} from 'class-validator';\n\nexport class GroupDto {\n\n    @MaxLength(50)\n    @MinLength(3)\n    @IsString()\n    readonly name: string\n\n    @MaxLength(500)\n    @IsString()\n    readonly description?: string\n\n    @Max(50)\n    @IsNumber()\n    readonly headcount?: number\n\n    @IsMongoId({ each: true })\n    readonly users?: string[]\n\n    @IsMongoId()\n    readonly association_id: string\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GroupInterface.html":{"url":"interfaces/GroupInterface.html","title":"interface - GroupInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GroupInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Group/interface/group.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            association_id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headcount\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            users\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        association_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        association_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headcount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headcount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        users\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        users:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface GroupInterface {\n    name: string;\n    description?: string;\n    headcount?: number;\n    users?: string[];\n    association_id: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GroupModule.html":{"url":"modules/GroupModule.html","title":"module - GroupModule","body":"\n                   \n\n\n\n\n    Modules\n    GroupModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GroupModule\n\n\n\ncluster_GroupModule_imports\n\n\n\ncluster_GroupModule_exports\n\n\n\ncluster_GroupModule_providers\n\n\n\n\nNatsMessengerModule\n\nNatsMessengerModule\n\n\n\nGroupModule\n\nGroupModule\n\nGroupModule -->\n\nNatsMessengerModule->GroupModule\n\n\n\n\n\nGroupService \n\nGroupService \n\nGroupService  -->\n\nGroupModule->GroupService \n\n\n\n\n\nGroupService\n\nGroupService\n\nGroupModule -->\n\nGroupService->GroupModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Group/group.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GroupService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GroupController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            NatsMessengerModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GroupService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AssociationModule } from 'src/Association/association.module';\nimport { GroupSchema } from '../Group/Schema/group.schema';\nimport { NatsMessengerModule } from '@app/nats-messenger';\nimport { GroupController } from './group.controller';\nimport { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { GroupService } from './group.service';\n\n// Module responsible for managing GROUPS\n@Module({\n  imports: [\n    // import database schema of GROUPS in Mongoose\n    MongooseModule.forFeature([\n      { name: 'Group', schema: GroupSchema }\n    ]),\n    // import the AssociationModule module as dependancy\n    forwardRef(() => AssociationModule),\n    // import NatsMessengerModule module for NATS messenging\n    NatsMessengerModule\n  ],\n  controllers: [GroupController],\n  providers: [GroupService],\n  exports:[GroupService]\n})\nexport class GroupModule{}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GroupService.html":{"url":"injectables/GroupService.html","title":"injectable - GroupService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Group/group.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addKid\n                            \n                            \n                                    Async\n                                createGroup\n                            \n                            \n                                    Async\n                                deleteGroup\n                            \n                            \n                                    Async\n                                getAllGroupAssoId\n                            \n                            \n                                    Async\n                                getAllGroups\n                            \n                            \n                                    Async\n                                getAllGroupsUserId\n                            \n                            \n                                    Async\n                                getGroupById\n                            \n                            \n                                    Async\n                                getGroupByName\n                            \n                            \n                                    Async\n                                getGroupDetailsByAssoId\n                            \n                            \n                                    Async\n                                getGroupNameByEventId\n                            \n                            \n                                    Async\n                                removeKid\n                            \n                            \n                                    Async\n                                updateGroup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(groupModel: Model, assoService: AssociationService, natsMessengerService: NatsMessengerService)\n                    \n                \n                        \n                            \n                                Defined in src/Group/group.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        groupModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        assoService\n                                                  \n                                                        \n                                                                        AssociationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        natsMessengerService\n                                                  \n                                                        \n                                                                        NatsMessengerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    addKid(kidId: string, groupId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Group/group.service.ts:197\n                        \n                    \n\n\n            \n                \n                        Modification of a group by adding a user (type kid)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                kidId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                groupId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createGroup\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGroup(body: GroupInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Group/group.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Create a new group\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            GroupInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nGroupInterface\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteGroup\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteGroup(groupId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Group/group.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Delete a group\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                groupId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllGroupAssoId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllGroupAssoId(assoId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Group/group.service.ts:81\n                        \n                    \n\n\n            \n                \n                        Retrieve all the groups of an association\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                assoId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllGroups\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllGroups()\n                \n            \n\n\n                    \n                        \n                            Defined in src/Group/group.service.ts:140\n                        \n                    \n\n\n            \n                \n                        Retrieve all the groups of the application\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllGroupsUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllGroupsUserId(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Group/group.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Retrive all the groups by user ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getGroupById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGroupById(groupId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Group/group.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Retrieve a group by its ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                groupId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getGroupByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGroupByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Group/group.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Retrieve a group by its name\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getGroupDetailsByAssoId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGroupDetailsByAssoId(assoId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Group/group.service.ts:152\n                        \n                    \n\n\n            \n                \n                        Retrieves the names and IDs of all groups belonging to an association.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                assoId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getGroupNameByEventId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGroupNameByEventId(eventId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Group/group.service.ts:168\n                        \n                    \n\n\n            \n                \n                        Retrieves the names of all groups participating in an event.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeKid(groupId: string, kidId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Group/group.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Modification of a group by removing a user (type kid)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                groupId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                kidId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateGroup\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateGroup(groupId: string, body: GroupInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Group/group.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Modification of a group\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                groupId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            GroupInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nGroupInterface\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable, NotFoundException, forwardRef } from '@nestjs/common'\nimport { AssociationService } from 'src/Association/association.service'\nimport { Group, GroupDocument } from './Schema/group.schema'\nimport { GroupInterface } from './interface/group.interface'\nimport { NatsMessengerService } from '@app/nats-messenger'\nimport { InjectModel } from '@nestjs/mongoose'\nimport { Model } from 'mongoose'\n\n// Service responsible for managing operations related to GROUPS\n@Injectable()\nexport class GroupService {\n    constructor(\n      @InjectModel('Group')\n      private groupModel: Model,\n      @Inject(forwardRef(() => AssociationService))\n      private assoService: AssociationService,\n      private readonly natsMessengerService: NatsMessengerService,\n    ) { }\n  \n  /**\n   * Retrieve a group by its ID\n   * @param params - group ID\n   */\n  async getGroupById(groupId: string): Promise {\n    try {\n      return await this.groupModel.findById(groupId);\n    } catch (error) {\n      throw new NotFoundException(error) \n    }\n  }\n\n  /**\n   * Create a new group \n   * @param body - GroupInterface\n   */\n  async createGroup(body: GroupInterface): Promise {\n    try {\n    if (await this.getGroupByName(body.name)) throw new BadRequestException('Group name already exists');\n      return this.groupModel.create(body);\n    } catch (error) {\n      throw new NotFoundException(error)\n    }\n  }\n\n  /**\n   * Modification of a group \n   * @param body - GroupInterface\n   * @param params - group ID \n   */\n  async updateGroup(groupId: string, body: GroupInterface): Promise {\n    try {\n       return await this.groupModel.findByIdAndUpdate(\n        groupId,\n        body,\n        { new: true }\n        )\n    } catch (error) {\n      throw new NotFoundException(error)\n    }\n  }\n    \n  /**\n   * Delete a group \n   * @param params - group ID \n   */\n  async deleteGroup(groupId: string):Promise {\n    try {\n      // Find and remove the group with the given ID\n      const deletedGroup = await this.groupModel.findByIdAndRemove(groupId);\n      // Check if the group was found and deleted\n      return deletedGroup !== null ? true : false\n    } catch (error) {\n      throw new NotFoundException(error) \n    }  \n  }\n\n  /**\n   * Retrieve all the groups of an association\n   * @param params - association ID \n   */\n  async getAllGroupAssoId(assoId: string): Promise {\n    // Check if the association exists  \n    const assoExist = await this.assoService.getAssoByID(assoId)\n\n    if(!assoExist) throw new NotFoundException('Association non trouvée')\n\n    try {\n      // Retrieve all groups associated with the given association ID using the groupModel\n      return await this.groupModel.find({\n        association_id : assoId\n      })\n    } catch (error) {\n      throw new NotFoundException(error) \n    }\n  }\n  \n  /**\n   * Retrive all the groups by user ID \n   * @param params - user ID\n   */\n  async getAllGroupsUserId(userId: string): Promise {\n    // Retrieve the user's associations using NATS\n    const userAssociations = await this.natsMessengerService.send(\n        'INDEX_ASSO_BY_USER',\n        { params: { id: userId }}\n    )\n    // Extract association IDs from userAssociations and store them in assoIds array\n    const assoIds = [];\n    for (const e of userAssociations.datas) {\n      assoIds.push(e.association.id)  \n    }\n    try {\n      // Retrieve all groups associated with the extracted association IDs using the groupModel\n      return await this.groupModel.find({\n        association_id: {\n        //Use the $in operator to match groups with any of the extracted association IDs\n          '$in': assoIds\n        }\n      })\n    } catch (error) {\n      throw new NotFoundException(error) \n    }\n  }    \n\n  /**\n   * Retrieve a group by its name \n   * @param params - group name \n   */\n  async getGroupByName(name :string): Promise {\n    try {\n      return await this.groupModel.findOne({ name });\n    } catch (error) {\n      throw new NotFoundException(error)\n    }\n  }\n\n    /**\n   * Retrieve all the groups of the application \n   */\n  async getAllGroups(): Promise {\n    try {\n      return await this.groupModel.find()\n    } catch (error) {\n      throw new NotFoundException(error) \n    }\n  }\n\n  /**\n   * Retrieves the names and IDs of all groups belonging to an association.\n   * @param params - association ID \n   */\n  async getGroupDetailsByAssoId(assoId: string):Promise \n  {\n    try {\n      // Retrieve all groups associated with the specified association ID\n      const allGroupsByAsso = await this.getAllGroupAssoId(assoId)\n      // Map the retrieved group data to an array of objects containing group IDs and names\n      return allGroupsByAsso.map(({ _id, name }) => ({ _id, name }));\n    } catch (error) {\n      throw new NotFoundException(error)\n    }\n  }\n\n  /**\n   * Retrieves the names of all groups participating in an event.\n   * @param params - ID of the event\n   */\n  async getGroupNameByEventId(eventId: string):Promise {\n    try {\n      // Retrieve the event details using NATS \n      const thisEvent = await this.natsMessengerService.send(\n        'GET_EVENT_BY_ID',\n        {params : {id: eventId}}\n      )\n\n      const groupNames: string[] = []\n      // Iterate through the group IDs associated with the event\n      for (const groupId of thisEvent.datas.groups) {\n        // Retrieve the group details using the group ID\n        const group = await this.getGroupById(groupId)\n        // Push the retrieved group name to the array\n        groupNames.push(group.name);\n      \n      }\n      // Return an array containing the names of groups participating in the event\n      return groupNames;\n    } catch (error) {\n      throw new NotFoundException(error)\n    }\n  }\n\n  /**\n   * Modification of a group by adding a user (type kid)\n   * @param params - group ID \n   * @param body - user (type kid) ID  \n   */\n  async addKid(kidId: string, groupId: string) {\n    try{\n      // Retrieve the group by its ID\n      const group = await this.groupModel.findById(groupId)\n   \n      // Check if the child is already in the group\n      if (!group.users.includes(kidId)) {\n        // Add the kid's ID to the list of users in the group\n        group.users.push(kidId)\n        // Save the updated group to the database\n        await group.save()\n      }\n      // Return the updated group with the child added\n      return group\n      } catch (error) {\n        throw new NotFoundException(error)\n      }\n    }\n\n    /**\n   * Modification of a group by removing a user (type kid)\n   * @param params - group ID \n   * @param body - user (type kid) ID  \n   */\n  async removeKid(groupId: string, kidId: string) {\n \n    try {\n      // Retrieve the group by its ID\n      const updatedGroup = await this.groupModel.findById(groupId)\n      \n      // Check if the child is already in the group\n      if (updatedGroup.users.includes(kidId)) {\n        //Remove the kid's ID to the list of users in the group\n        updatedGroup.users = updatedGroup.users.filter(userId => userId != kidId)\n        // Save the updated group to the database\n        await updatedGroup.save()\n      }\n      // Return the updated group with the child removed\n      return updatedGroup\n    } catch (error) {\n      throw new NotFoundException(error)\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdDto.html":{"url":"classes/IdDto.html","title":"class - IdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Association/Dto/id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Association/Dto/id.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsMongoId, IsString } from \"class-validator\";\n\nexport class IdDto {\n\n    @IsString()\n    @IsMongoId()\n    readonly id: string;\n    \n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NameDto.html":{"url":"classes/NameDto.html","title":"class - NameDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NameDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Association/Dto/name.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Association/Dto/name.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsString } from \"class-validator\";\n\nexport class NameDto {\n\n    @IsString()\n    readonly name: string;\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NatsMessengerModule.html":{"url":"modules/NatsMessengerModule.html","title":"module - NatsMessengerModule","body":"\n                   \n\n\n\n\n    Modules\n    NatsMessengerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NatsMessengerModule\n\n\n\ncluster_NatsMessengerModule_exports\n\n\n\ncluster_NatsMessengerModule_providers\n\n\n\n\nNatsMessengerService \n\nNatsMessengerService \n\n\n\nNatsMessengerModule\n\nNatsMessengerModule\n\nNatsMessengerService  -->\n\nNatsMessengerModule->NatsMessengerService \n\n\n\n\n\nNatsMessengerService\n\nNatsMessengerService\n\nNatsMessengerModule -->\n\nNatsMessengerService->NatsMessengerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/nats-messenger/src/nats-messenger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NatsMessengerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NatsMessengerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ClientsModule, Transport } from '@nestjs/microservices'\nimport { NatsMessengerService } from './nats-messenger.service'\nimport { Module } from '@nestjs/common'\nimport { ConfigModule } from '@nestjs/config'\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      //cache: true,\n    }),\n    //register the client module \n    ClientsModule.register([\n      {\n        // defines an unique name for the client \n        name: 'NATS_SERVICE', \n        // uses NATS transport for the communication\n        transport: Transport.NATS,\n        options: {\n          // specifies the NATS servers addresses\n          servers: [`nats://${process.env.NATS_DNS}:${process.env.NATS_PORT}`]\n        }\n      }\n    ])\n  ],\n  // provides the NatsMessengerService service in the module \n  providers: [NatsMessengerService], \n  // makes the NatsMessengerService service accessible to other modules\n  exports: [NatsMessengerService],\n})\nexport class NatsMessengerModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NatsMessengerService.html":{"url":"injectables/NatsMessengerService.html","title":"injectable - NatsMessengerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NatsMessengerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/nats-messenger/src/nats-messenger.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                emit\n                            \n                            \n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(nats: ClientProxy)\n                    \n                \n                        \n                            \n                                Defined in libs/nats-messenger/src/nats-messenger.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        nats\n                                                  \n                                                        \n                                                                    ClientProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        emit\n                        \n                    \n                \n            \n            \n                \n                        \n                    emit(cmd: string, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/nats-messenger/src/nats-messenger.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                cmd\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        send\n                        \n                    \n                \n            \n            \n                \n                        \n                    send(cmd: string, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/nats-messenger/src/nats-messenger.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                cmd\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { firstValueFrom } from 'rxjs/internal/firstValueFrom'\nimport { Inject, Injectable } from '@nestjs/common'\nimport { ClientProxy } from '@nestjs/microservices'\n\n//Service in charge of handling NATS related operations \n@Injectable()\nexport class NatsMessengerService {\n\n    constructor(\n        //injects the NATS_SERVICE dependency using ClientProxy from the module\n        @Inject('NATS_SERVICE')\n        private readonly nats: ClientProxy\n        ) { }\n\n    //sends with a response in return \n    async send(cmd: string, payload: any): Promise {\n        try {\n            console.log('send', cmd, payload)\n            return await firstValueFrom(this.nats.send(cmd, payload))\n        } catch (error) {\n            console.log(\"error\", error)\n        }\n    }\n\n    //sends without any response in return\n    async emit(cmd: string, payload: any): Promise {\n        try {\n            console.log('emit', cmd, payload)\n            this.nats.emit(cmd, payload)\n        } catch (error) {\n            console.log(\"error\", error)\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Relation.html":{"url":"classes/Relation.html","title":"class - Relation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Relation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Relation/Schema/relation.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                asso_id\n                            \n                            \n                                    \n                                    \n                                    \n                                fromRef_id\n                            \n                            \n                                    \n                                    \n                                    \n                                link\n                            \n                            \n                                    \n                                    \n                                    \n                                toRef_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        asso_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string | Types.ObjectId | AssociationDocument\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({type: undefined, ref: 'Association'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Relation/Schema/relation.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        fromRef_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@ApiProperty()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Relation/Schema/relation.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LinkRelationEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: LinkRelationEnum, required: true})@IsEnum(LinkRelationEnum)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Relation/Schema/relation.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        toRef_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@ApiProperty()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Relation/Schema/relation.schema.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose'\nimport { ApiProperty } from '@nestjs/swagger'\nimport { SchemaTypes, Types, Document } from 'mongoose'\nimport { LinkRelationEnum } from '../Enum/relation.enum'\nimport { IsEnum, IsMongoId } from 'class-validator'\nimport { AssociationDocument } from 'src/Association/Schema/association.schema'\n\nexport type RelationDocument = Relation & Document\n@Schema({ collection: 'relation', timestamps: true, versionKey: false })\nexport class Relation {\n\n  @Prop({ required: true })\n  @ApiProperty()\n  @IsMongoId()\n  fromRef_id: string //ID utilisateur de départ\n\n  @Prop({ required: true })\n  @ApiProperty()\n  @IsMongoId()\n  toRef_id: string //ID utilisateur de comparaison\n\n  @Prop({ type: String, enum: LinkRelationEnum, required: true })\n  @IsEnum(LinkRelationEnum)\n  @ApiProperty()\n  link: LinkRelationEnum  //Lien entre deux utilisateurs\n\n  @ApiProperty()\n  @Prop({ type: SchemaTypes.ObjectId, ref: 'Association' })\n  asso_id: string | Types.ObjectId | AssociationDocument\n\n}\n\nexport const RelationSchema = SchemaFactory.createForClass(Relation)\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RelationController.html":{"url":"controllers/RelationController.html","title":"controller - RelationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RelationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Relation/relation.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createNewRelation\n                            \n                            \n                                    \n                                    Async\n                                deleteRelation\n                            \n                            \n                                    \n                                    Async\n                                fetchParentFromKidRelation\n                            \n                            \n                                    \n                                    Async\n                                findAllRelations\n                            \n                            \n                                    \n                                    Async\n                                findRelationById\n                            \n                            \n                                    \n                                    Async\n                                findRelativesByUser\n                            \n                            \n                                    \n                                    Async\n                                updateRelation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createNewRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createNewRelation(body: RelationDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('CREATE_RELATION')\n                \n            \n\n                    \n                        \n                            Defined in src/Relation/relation.controller.ts:23\n                        \n                    \n\n\n            \n                \n                         Create a new relation\nPOST - 'relation/create'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            RelationDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRelationDTO - data of the relation to create.\nPOST - 'relation/create'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteRelation(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('DELETE_RELATION')\n                \n            \n\n                    \n                        \n                            Defined in src/Relation/relation.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        Delete a relation.\nDELETE - 'relation/delete/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRelation ID\nDELETE - 'relation/delete/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        fetchParentFromKidRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchParentFromKidRelation(KidArray: string[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('FETCH_TOREF_LINK_KID')\n                \n            \n\n                    \n                        \n                            Defined in src/Relation/relation.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Retrieve parents from child relations.\nCommand through NATS only\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                KidArray\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn array of child IDs.\nCommand through NATS only\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllRelations\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllRelations(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('INDEX_RELATIONS_BY_ASSO')\n                \n            \n\n                    \n                        \n                            Defined in src/Relation/relation.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Retrieve all relations by association ID.\nGET - 'relations/ByAsso/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nassociation ID \nGET - 'relations/ByAsso/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findRelationById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findRelationById(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('GET_RELATION_BY_ID')\n                \n            \n\n                    \n                        \n                            Defined in src/Relation/relation.controller.ts:65\n                        \n                    \n\n\n            \n                \n                        Retrieve a relation by its ID.\nMethode : GET - prefix : 'relation/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRelation ID.\nMethode : GET - prefix : 'relation/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findRelativesByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findRelativesByUser(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('GET_RELATION_BY_USER')\n                \n            \n\n                    \n                        \n                            Defined in src/Relation/relation.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Retrieve relations by user ID\nGET - 'relation/ByUser/:UserID'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nuser ID\nGET - 'relation/ByUser/:UserID'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRelation(params: IdDto, body: RelationDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('UPDATE_RELATION')\n                \n            \n\n                    \n                        \n                            Defined in src/Relation/relation.controller.ts:80\n                        \n                    \n\n\n            \n                \n                        Update a relation.\nPUT - 'relation/update/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nrelation ID\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            RelationDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRelationDTO\nPUT - 'relation/update/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, NotFoundException, UseInterceptors, ValidationPipe } from '@nestjs/common'\nimport { RpcSuccessInterceptor } from 'src/Interceptor/RpcSuccessInterceptor'\nimport { MessagePattern, Payload } from '@nestjs/microservices'\nimport { RelationDocument } from './Schema/relation.schema'\nimport { RelationService } from './relation.service'\nimport { IdDto } from 'src/Association/Dto/id.dto'\nimport { RelationDTO } from './Dto/relation.dto'\n\n// Controller responsible for handling API endpoints related to RELATION \n@Controller()\n@UseInterceptors(RpcSuccessInterceptor)\nexport class RelationController {\n  constructor(\n    private readonly relationService: RelationService\n    ) {}\n\n  /**\n   *  Create a new relation\n   * @param body - RelationDTO - data of the relation to create.\n   * POST - 'relation/create'\n   */\n  @MessagePattern('CREATE_RELATION')\n  async createNewRelation(@Payload() body: RelationDTO):Promise {\n    try {\n      return await this.relationService.createRelation(body);\n    } catch (error) {\n      throw new NotFoundException(error)\n    }\n  }\n\n  /**\n   * Retrieve relations by user ID\n   * @param params - user ID\n   * GET - 'relation/ByUser/:UserID'\n   */\n  @MessagePattern('GET_RELATION_BY_USER')\n  async findRelativesByUser(@Payload('params', new ValidationPipe()) params: IdDto): Promise {\n    try {\n      return await this.relationService.getRelationsByUserId(params.id)\n    } catch (error) {\n      throw new NotFoundException(error) \n    }\n  }\n\n  /**\n   * Retrieve all relations by association ID.\n   * @param params - association ID \n   * GET - 'relations/ByAsso/:id'\n   */\n  @MessagePattern('INDEX_RELATIONS_BY_ASSO')\n  async findAllRelations(@Payload('params', new ValidationPipe()) params: IdDto):Promise {\n    try {\n      return this.relationService.getAllRelationsByAsso(params.id);\n    } catch (error) {\n      throw new NotFoundException(error) \n    }\n  }\n\n  /**\n   * Retrieve a relation by its ID.\n   * @param params - Relation ID.\n   * Methode : GET - prefix : 'relation/:id'\n   */\n  @MessagePattern('GET_RELATION_BY_ID')\n  async findRelationById(@Payload('params', new ValidationPipe()) params: IdDto):Promise {\n    try {\n      return await this.relationService.getRelationById(params.id)\n    } catch (error) {\n      throw new NotFoundException(error) \n    }\n  }\n\n  /**\n   * Update a relation.\n   * @param params - relation ID \n   * @param body - RelationDTO\n   * PUT - 'relation/update/:id'\n   */\n  @MessagePattern('UPDATE_RELATION')\n  async updateRelation(\n    @Payload('params', new ValidationPipe()) params: IdDto,\n    @Payload('body') body: RelationDTO\n  ):Promise {\n    try {\n      return await this.relationService.updateRelation(params.id, body)\n    } catch (error) {\n      throw new NotFoundException(error) \n    }\n  }\n\n  /**\n   * Delete a relation.\n   * @param params - Relation ID\n   * DELETE - 'relation/delete/:id'\n   */\n  @MessagePattern('DELETE_RELATION')\n  async deleteRelation(@Payload('params', new ValidationPipe()) params: IdDto): Promise {\n    try {\n      return await this.relationService.deleteRelation(params.id)\n    } catch (error) {\n      throw new NotFoundException(error) \n    }\n  }\n\n  /**\n   * Retrieve parents from child relations.\n   * @param KidArray - An array of child IDs.\n   * Command through NATS only\n   */\n  @MessagePattern('FETCH_TOREF_LINK_KID')\n  async fetchParentFromKidRelation(KidArray: string[]): Promise {\n    try {\n      return await this.relationService.fetchParentFromKidRelation(KidArray)\n    } catch (error) {\n      throw new NotFoundException(error) \n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RelationDTO.html":{"url":"classes/RelationDTO.html","title":"class - RelationDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RelationDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Relation/Dto/relation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                asso_id\n                            \n                            \n                                    \n                                    Readonly\n                                fromRef_id\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                link\n                            \n                            \n                                    \n                                    Readonly\n                                toRef_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        asso_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Relation/Dto/relation.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        fromRef_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Relation/Dto/relation.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LinkRelationEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(LinkRelationEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Relation/Dto/relation.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        toRef_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Relation/Dto/relation.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsMongoId, IsNotEmpty } from \"class-validator\";\nimport { LinkRelationEnum } from \"../Enum/relation.enum\";\n\nexport class RelationDTO {\n\n    @IsMongoId()\n    readonly fromRef_id: string;\n\n    @IsMongoId()\n    readonly toRef_id: string;\n\n    @IsNotEmpty()\n    @IsEnum(LinkRelationEnum)\n    readonly link: LinkRelationEnum;\n\n    @IsMongoId()\n    readonly asso_id: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RelationInterface.html":{"url":"interfaces/RelationInterface.html","title":"interface - RelationInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RelationInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Relation/interface/relation.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            asso_id\n                                        \n                                \n                                \n                                        \n                                            fromRef_id\n                                        \n                                \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                        \n                                            toRef_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        asso_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        asso_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fromRef_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fromRef_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         LinkRelationEnum\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LinkRelationEnum\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        toRef_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        toRef_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { LinkRelationEnum } from \"../Enum/relation.enum\";\n\nexport interface RelationInterface {\n    fromRef_id: string;\n    toRef_id: string;\n    link: LinkRelationEnum;\n    asso_id: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RelationModule.html":{"url":"modules/RelationModule.html","title":"module - RelationModule","body":"\n                   \n\n\n\n\n    Modules\n    RelationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RelationModule\n\n\n\ncluster_RelationModule_exports\n\n\n\ncluster_RelationModule_imports\n\n\n\ncluster_RelationModule_providers\n\n\n\n\nNatsMessengerModule\n\nNatsMessengerModule\n\n\n\nRelationModule\n\nRelationModule\n\nRelationModule -->\n\nNatsMessengerModule->RelationModule\n\n\n\n\n\nRelationService \n\nRelationService \n\nRelationService  -->\n\nRelationModule->RelationService \n\n\n\n\n\nRelationService\n\nRelationService\n\nRelationModule -->\n\nRelationService->RelationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Relation/relation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RelationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RelationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            NatsMessengerModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RelationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { RelationController } from './relation.controller';\nimport { RelationSchema } from './Schema/relation.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RelationService } from './relation.service';\nimport { AssociationModule } from 'src/Association/association.module';\nimport { NatsMessengerModule } from '@app/nats-messenger';\n\n//Module in charge of handling RELATIONS \n@Module({\n  imports:[\n    // import the database schema for RELATIONS in Mongoose\n    MongooseModule.forFeature([\n      { name: 'Relations', schema: RelationSchema }\n    ]),\n    // import the AssociationModule module as dependency \n    forwardRef(() => AssociationModule),\n    // import NatsMessengerModule module for NATS messenging\n    NatsMessengerModule\n  ],\n  controllers: [RelationController],\n  providers: [RelationService],\n  exports: [RelationService],\n})\nexport class RelationModule{}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RelationService.html":{"url":"injectables/RelationService.html","title":"injectable - RelationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RelationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Relation/relation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createRelation\n                            \n                            \n                                    Async\n                                deleteRelation\n                            \n                            \n                                    Async\n                                fetchParentFromKidRelation\n                            \n                            \n                                    Async\n                                getAllRelationsByAsso\n                            \n                            \n                                    Async\n                                getRelationById\n                            \n                            \n                                    Async\n                                getRelationsByUserId\n                            \n                            \n                                    Async\n                                updateRelation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(relationModel: Model, assoService: AssociationService)\n                    \n                \n                        \n                            \n                                Defined in src/Relation/relation.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        relationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        assoService\n                                                  \n                                                        \n                                                                        AssociationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRelation(body: RelationInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Relation/relation.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Creation of a new relation\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            RelationInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRelationInterface\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteRelation(relationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Relation/relation.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Delete a relation\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                relationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        fetchParentFromKidRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchParentFromKidRelation(kidsIds: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/Relation/relation.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Retrieve parents from a userKid ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                kidsIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllRelationsByAsso\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllRelationsByAsso(assoId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Relation/relation.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Retrieve the list of relations by asso ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                assoId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRelationById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRelationById(relationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Relation/relation.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Retrieve a relation by its ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                relationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRelationsByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRelationsByUserId(fromRefUserId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Relation/relation.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Retrieve relations by user ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fromRefUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateRelation\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRelation(relationId: string, body: RelationInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Relation/relation.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Modification od a relation\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                relationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            RelationInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRelationInterface\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable, NotFoundException, forwardRef } from '@nestjs/common'\nimport { AssociationService } from 'src/Association/association.service'\nimport { RelationInterface } from './interface/relation.interface'\nimport { RelationDocument } from './Schema/relation.schema'\nimport { LinkRelationEnum } from './Enum/relation.enum'\nimport { InjectModel } from '@nestjs/mongoose'\nimport { Model } from 'mongoose'\n\n/// Service responsible for managing operations related to RELATIONS\n@Injectable()\nexport class RelationService {\n    constructor(\n        @InjectModel('Relations')\n        private relationModel: Model,\n        @Inject(forwardRef(() => AssociationService))\n        private assoService: AssociationService\n    ) {}\n\n    /**\n     * Creation of a new relation \n     * @param body - RelationInterface \n     */\n    async createRelation(body: RelationInterface):Promise {\n        try {\n            // Check if the association exists\n            const assoExists = await this.assoService.getAssoByID(body.asso_id)\n\n            if(!assoExists) throw new BadRequestException('Association does not exist')\n            //return the new relation created \n            return await this.relationModel.create({...body})\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Retrieve relations by user ID \n     * @param param - user ID  \n     */\n    async getRelationsByUserId(fromRefUserId: string): Promise {\n        try {\n            return await this.relationModel.find({fromRef_id : fromRefUserId})\n        } catch (error) {\n            throw new NotFoundException(error) \n        }\n    }\n\n    /**\n     * Retrieve the list of relations by asso ID\n     * @param param - association ID \n     */\n    async getAllRelationsByAsso(assoId: string): Promise {\n        try {\n            return this.relationModel.find({asso_id: assoId})\n        } catch (error) {\n            throw new NotFoundException(error) \n        }\n    }\n\n    /**\n     * Retrieve a relation by its ID \n     * @param param - relation ID \n     */\n    async getRelationById(relationId: string): Promise{\n        try {\n            return await this.relationModel.findById(relationId)\n        } catch (error) {\n            throw new NotFoundException(error) \n        }\n    }\n\n    /**\n     * Modification od a relation \n     * @param param - relation ID \n     * @param body - RelationInterface \n     */\n    async updateRelation(relationId: string, body: RelationInterface): Promise {\n        try {\n            return await this.relationModel.findByIdAndUpdate(\n                relationId, \n                body,\n                {new : true}\n                )\n        } catch (error) {\n            throw new NotFoundException(error) \n        }\n    }\n\n\n    /**\n     * Delete a relation \n     * @param param - relation ID \n     */\n    async deleteRelation(relationId: string): Promise {\n        try {\n            return this.relationModel.findByIdAndDelete(relationId)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Retrieve parents from a userKid ID\n     * @param param - array of user (type kid)\n     */\n    async fetchParentFromKidRelation(kidsIds: string[]): Promise {\n        try {\n            // Check if kidsIds is not an array, and if so, throw an error\n            if (!Array.isArray(kidsIds)) {\n                throw new Error('kidsIds should be an array')\n            }\n            // Use Promise.all to concurrently process queries for each kidId\n            const parents = await Promise.all(\n                // The map function generates an array of promises, each resolving to an array of related relations\n                kidsIds.map((kidId) =>\n                    this.relationModel\n                        // Each promise performs a query to find relations\n                        // where the kidId is the 'fromRef_id' and the link is 'kid'\n                        .find({\n                            fromRef_id: kidId,\n                            link: LinkRelationEnum.kid\n                        })\n                        // 'select' is used to project only the 'toRef_id' field\n                        .select('toRef_id')\n                        // 'distinct' ensures that only unique 'toRef_id' values are retrieved\n                        .distinct('toRef_id')\n                )\n            )\n            // Flatten the array of arrays containing 'toRef_id' values into a single array of parent IDs\n            // This is done using the 'flatMap' function\n            // The result is an array of parent IDs corresponding to the kid IDs provided\n            return parents.flatMap((id) => id)\n\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RpcSuccessInterceptor.html":{"url":"injectables/RpcSuccessInterceptor.html","title":"injectable - RpcSuccessInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RpcSuccessInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Interceptor/RpcSuccessInterceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor to handle successful responses for NATS communication.\nThis interceptor generates a standardized response payload using the responsePayloadNat function.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(_context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Interceptor/RpcSuccessInterceptor.ts:67\n                        \n                    \n\n\n            \n                \n                        Intercepts the response and transforms it using the responsePayloadNat function.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                _context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nNext handler in the chain.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Transformed Observable containing the standardized response payload.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { map } from 'rxjs';\n\n/**\n * Interface for the response payload structure used for NATS communication.\n */\ninterface responsePayloadNatsInterface {\n    paginate?: object;\n    statusCode?: number;\n    datas: any;\n}\n\n/**\n * Generates a response payload for NATS communication.\n * @param values - Data and additional information to include in the payload.\n * @returns A response payload conforming to responsePayloadNatsInterface.\n */\nfunction responsePayloadNat(values: any): responsePayloadNatsInterface {\n    // Initialize an empty payload object\n    const payload = {} as responsePayloadNatsInterface;\n\n    // Extract and set pagination details if provided\n    if (values?.paginate) {\n        payload.paginate = values.paginate;\n        delete values.paginate;\n    }\n\n    // Extract and set status code if provided\n    if (values?.code) {\n        payload.statusCode = values.code;\n        delete values.code;\n    }\n        \n    // Determine the format of the data and set it in the payload\n    if (values) {    \n        payload.datas = Array.isArray(values) ? values : (Object.keys(values).length === 1 ? getFirstValue(values) : { ...JSON.parse(JSON.stringify(values)) })\n    } else {\n        payload.datas = null; // If no value is provided, set datas to null\n    }\n\n    return payload;\n}\n\n/**\n * Extracts the value of the first property from an object.\n * @param values - Object from which to extract the value.\n * @returns The value of the first property in the object.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction getFirstValue(values: Object): string {\n    return values[Object.keys(values)[0]];\n}\n\n/**\n * Interceptor to handle successful responses for NATS communication.\n * This interceptor generates a standardized response payload using the responsePayloadNat function.\n */\n@Injectable()\nexport class RpcSuccessInterceptor {\n    /**\n     * Intercepts the response and transforms it using the responsePayloadNat function.\n     * @param _context - Execution context.\n     * @param next - Next handler in the chain.\n     * @returns Transformed Observable containing the standardized response payload.\n     */\n    intercept(_context: ExecutionContext, next: CallHandler) {\n        return next\n            .handle()\n            .pipe(map(value => responsePayloadNat(value)));\n\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/assoUserEditInterface.html":{"url":"interfaces/assoUserEditInterface.html","title":"interface - assoUserEditInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  assoUserEditInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Association/interface/association.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface AssoInterface {\n    name: string;\n    description?: string;\n    image?:string\n}\n\nexport interface assoUserEditInterface{\n  id: string; \n  role: string \n}\n\nexport enum RoleUserEnum {\n    User = 'User', //default \n    Admin = 'Admin'\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                libs/nats-messenger/src/nats-messenger.service.ts\n            \n            injectable\n            NatsMessengerService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/Association/Dto/association.dto.ts\n            \n            class\n            AssociationDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/Association/Dto/association.dto.ts\n            \n            class\n            AssoNameDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/Association/Dto/id.dto.ts\n            \n            class\n            IdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/Association/Dto/name.dto.ts\n            \n            class\n            NameDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/Association/Schema/association.schema.ts\n            \n            class\n            Association\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/Association/Schema/association.schema.ts\n            \n            variable\n            AssociationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Association/association.controller.ts\n            \n            controller\n            AssociationController\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/Association/association.service.ts\n            \n            injectable\n            AssociationService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                src/Association/decorators/publicAssociation.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Association/decorators/publicAssociation.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Association/interface/association.interface.ts\n            \n            interface\n            AssoInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/Association/interface/association.interface.ts\n            \n            interface\n            assoUserEditInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/Group/Dto/group.dto.ts\n            \n            class\n            GroupDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/Group/Schema/group.schema.ts\n            \n            class\n            Group\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/Group/Schema/group.schema.ts\n            \n            variable\n            GroupSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Group/decorators/publicGroup.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Group/decorators/publicGroup.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Group/group.controller.ts\n            \n            controller\n            GroupController\n            \n                91 %\n                (11/12)\n            \n        \n        \n            \n                \n                src/Group/group.service.ts\n            \n            injectable\n            GroupService\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                src/Group/interface/group.interface.ts\n            \n            interface\n            GroupInterface\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/Interceptor/RpcSuccessInterceptor.ts\n            \n            injectable\n            RpcSuccessInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/Interceptor/RpcSuccessInterceptor.ts\n            \n            interface\n            responsePayloadNatsInterface\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/Interceptor/RpcSuccessInterceptor.ts\n            \n            function\n            getFirstValue\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Interceptor/RpcSuccessInterceptor.ts\n            \n            function\n            responsePayloadNat\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Relation/Dto/relation.dto.ts\n            \n            class\n            RelationDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/Relation/Schema/relation.schema.ts\n            \n            class\n            Relation\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/Relation/Schema/relation.schema.ts\n            \n            variable\n            RelationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Relation/interface/relation.interface.ts\n            \n            interface\n            RelationInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/Relation/relation.controller.ts\n            \n            controller\n            RelationController\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/Relation/relation.service.ts\n            \n            injectable\n            RelationService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @asyncapi/cli : ^0.51.13\n        \n            @nestjs/common : ^9.2.0\n        \n            @nestjs/config : ^2.3.2\n        \n            @nestjs/core : ^9.2.0\n        \n            @nestjs/jwt : ^10.0.3\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^9.1.6\n        \n            @nestjs/mongoose : ^9.2.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.2.0\n        \n            @nestjs/swagger : ^6.3.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @types/bcrypt : ^5.0.0\n        \n            argon2 : ^0.30.3\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            dotenv : ^16.1.4\n        \n            nats : ^2.14.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.11.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.16\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LinkRelationEnum   (src/.../relation.enum.ts)\n                        \n                        \n                            RoleUserEnum   (src/.../association.interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/Relation/Enum/relation.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        LinkRelationEnum\n                    \n                \n                        \n                            \n                                 kid\n                            \n                        \n                        \n                            \n                                Value : enfant\n                            \n                        \n                        \n                            \n                                 parent\n                            \n                        \n                        \n                            \n                                Value : parent\n                            \n                        \n            \n        \n\n    src/Association/interface/association.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        RoleUserEnum\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : User\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : Admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getFirstValue   (src/.../RpcSuccessInterceptor.ts)\n                        \n                        \n                            responsePayloadNat   (src/.../RpcSuccessInterceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/Interceptor/RpcSuccessInterceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getFirstValue\n                        \n                    \n                \n            \n            \n                \ngetFirstValue(values: Object)\n                \n            \n\n\n\n\n            \n                \n                        Extracts the value of the first property from an object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                values\n                                            \n                                                            Object\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nObject from which to extract the value.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The value of the first property in the object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        responsePayloadNat\n                        \n                    \n                \n            \n            \n                \nresponsePayloadNat(values: any)\n                \n            \n\n\n\n\n            \n                \n                        Generates a response payload for NATS communication.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                values\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData and additional information to include in the payload.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         responsePayloadNatsInterface\n\n                        \n                            \n                                A response payload conforming to responsePayloadNatsInterface.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nms-asso-groupe-relation\nBRANCH DEV\n//  installation de nestJs en global //\n$ npm i -g @nestjs/cli\n// création d'un nouveau projet nestJS //\n$ nest new project-name\n// version de nestJs \nnest -v\n// installer la dépendance de mongoose sur nestJs //\nnpm i @nestjs/mongoose\n// relier la database //\non click sur la droite de  localhost et on copy le lien //\n-mongodb://localhost:27017\n// ont va dans app.module.ts //\nEt on met dans import MongooseModule.forRoot('mongodb://127.0.0.1:27017/')\nOn rajoute import { MongooseModule } from '@nestjs/mongoose';\nAu cas ou npm install mongoose@6.2.2 --save\n// puis ont se connect //\n-Avec la commence npm run server start:dev\n// installer les dépendances pour insérér les validator\nnpm i --save class-validator class-transformer \n// installer les dépendances pour visualiser toute nos routes dans le navigateur\nnpm install --save @nestjs/swagger\n// installer les dépendances pour installer les librairies \nnest g library library_name\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AssociationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GroupModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NatsMessengerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RelationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AssociationModule\n\n\n\ncluster_AssociationModule_exports\n\n\n\ncluster_AssociationModule_providers\n\n\n\ncluster_GroupModule\n\n\n\ncluster_GroupModule_exports\n\n\n\ncluster_GroupModule_providers\n\n\n\ncluster_NatsMessengerModule\n\n\n\ncluster_NatsMessengerModule_exports\n\n\n\ncluster_NatsMessengerModule_providers\n\n\n\ncluster_RelationModule\n\n\n\ncluster_RelationModule_exports\n\n\n\ncluster_RelationModule_providers\n\n\n\n\nAssociationModule\n\nAssociationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAssociationModule->AppModule\n\n\n\n\n\nAssociationService \n\nAssociationService \n\nAssociationService  -->\n\nAssociationModule->AssociationService \n\n\n\n\n\nGroupModule\n\nGroupModule\n\nAppModule -->\n\nGroupModule->AppModule\n\n\n\n\n\nGroupService \n\nGroupService \n\nGroupService  -->\n\nGroupModule->GroupService \n\n\n\n\n\nNatsMessengerModule\n\nNatsMessengerModule\n\nAssociationModule -->\n\nNatsMessengerModule->AssociationModule\n\n\n\nGroupModule -->\n\nNatsMessengerModule->GroupModule\n\n\n\n\n\nRelationModule\n\nRelationModule\n\nRelationModule -->\n\nNatsMessengerModule->RelationModule\n\n\n\nAppModule -->\n\nNatsMessengerModule->AppModule\n\n\n\n\n\nNatsMessengerService \n\nNatsMessengerService \n\nNatsMessengerService  -->\n\nNatsMessengerModule->NatsMessengerService \n\n\n\nAppModule -->\n\nRelationModule->AppModule\n\n\n\n\n\nRelationService \n\nRelationService \n\nRelationService  -->\n\nRelationModule->RelationService \n\n\n\n\n\nAssociationService\n\nAssociationService\n\nAssociationModule -->\n\nAssociationService->AssociationModule\n\n\n\n\n\nGroupService\n\nGroupService\n\nGroupModule -->\n\nGroupService->GroupModule\n\n\n\n\n\nNatsMessengerService\n\nNatsMessengerService\n\nNatsMessengerModule -->\n\nNatsMessengerService->NatsMessengerModule\n\n\n\n\n\nRelationService\n\nRelationService\n\nRelationModule -->\n\nRelationService->RelationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/responsePayloadNatsInterface.html":{"url":"interfaces/responsePayloadNatsInterface.html","title":"interface - responsePayloadNatsInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  responsePayloadNatsInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Interceptor/RpcSuccessInterceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for the response payload structure used for NATS communication.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            datas\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            paginate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        datas\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        datas:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paginate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paginate:         object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         object\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { map } from 'rxjs';\n\n/**\n * Interface for the response payload structure used for NATS communication.\n */\ninterface responsePayloadNatsInterface {\n    paginate?: object;\n    statusCode?: number;\n    datas: any;\n}\n\n/**\n * Generates a response payload for NATS communication.\n * @param values - Data and additional information to include in the payload.\n * @returns A response payload conforming to responsePayloadNatsInterface.\n */\nfunction responsePayloadNat(values: any): responsePayloadNatsInterface {\n    // Initialize an empty payload object\n    const payload = {} as responsePayloadNatsInterface;\n\n    // Extract and set pagination details if provided\n    if (values?.paginate) {\n        payload.paginate = values.paginate;\n        delete values.paginate;\n    }\n\n    // Extract and set status code if provided\n    if (values?.code) {\n        payload.statusCode = values.code;\n        delete values.code;\n    }\n        \n    // Determine the format of the data and set it in the payload\n    if (values) {    \n        payload.datas = Array.isArray(values) ? values : (Object.keys(values).length === 1 ? getFirstValue(values) : { ...JSON.parse(JSON.stringify(values)) })\n    } else {\n        payload.datas = null; // If no value is provided, set datas to null\n    }\n\n    return payload;\n}\n\n/**\n * Extracts the value of the first property from an object.\n * @param values - Object from which to extract the value.\n * @returns The value of the first property in the object.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction getFirstValue(values: Object): string {\n    return values[Object.keys(values)[0]];\n}\n\n/**\n * Interceptor to handle successful responses for NATS communication.\n * This interceptor generates a standardized response payload using the responsePayloadNat function.\n */\n@Injectable()\nexport class RpcSuccessInterceptor {\n    /**\n     * Intercepts the response and transforms it using the responsePayloadNat function.\n     * @param _context - Execution context.\n     * @param next - Next handler in the chain.\n     * @returns Transformed Observable containing the standardized response payload.\n     */\n    intercept(_context: ExecutionContext, next: CallHandler) {\n        return next\n            .handle()\n            .pipe(map(value => responsePayloadNat(value)));\n\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AssociationDocument   (src/.../association.schema.ts)\n                        \n                        \n                            GroupDocument   (src/.../group.schema.ts)\n                        \n                        \n                            RelationDocument   (src/.../relation.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/Association/Schema/association.schema.ts\n    \n    \n        \n            \n                \n                    \n                    AssociationDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/Group/Schema/group.schema.ts\n    \n    \n        \n            \n                \n                    \n                    GroupDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/Relation/Schema/relation.schema.ts\n    \n    \n        \n            \n                \n                    \n                    RelationDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AssociationSchema   (src/.../association.schema.ts)\n                        \n                        \n                            GroupSchema   (src/.../group.schema.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../publicAssociation.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../publicGroup.decorator.ts)\n                        \n                        \n                            Public   (src/.../publicAssociation.decorator.ts)\n                        \n                        \n                            Public   (src/.../publicGroup.decorator.ts)\n                        \n                        \n                            RelationSchema   (src/.../relation.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/Association/Schema/association.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AssociationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Association)\n                    \n                \n\n\n        \n    \n\n    src/Group/Schema/group.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GroupSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Group)\n                    \n                \n\n\n        \n    \n\n    src/Association/decorators/publicAssociation.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/Group/decorators/publicGroup.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/Relation/Schema/relation.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RelationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Relation)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
