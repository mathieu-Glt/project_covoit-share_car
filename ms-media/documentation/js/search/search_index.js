var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.639,1,1.846]],["body/modules/AppModule.html",[0,2.611,1,3.73,2,1.731,3,1.731,4,2.223,5,2.223,6,1.731,7,3.353,8,2.223,9,2.589,10,2.589,11,2.589,12,2.991,13,0.04,14,2.677,15,2.991,16,2.991,17,1.964,18,2.991,19,2.677,20,2.975,21,2.223,22,2.223,23,0.354,24,0.3,25,0.3,26,3.145,27,3.465,28,0.766,29,0.929,30,3.145,31,2.589,32,3.145,33,1.731,34,1.731,35,3.145,36,4.209,37,1.95,38,3.145,39,2.223,40,3.145,41,3.145,42,3.145,43,3.145,44,3.145,45,3.145,46,3.145,47,3.145,48,3.145,49,1.394,50,3.145,51,1.028,52,3.145,53,3.145,54,1.55,55,3.145,56,3.145,57,3.145,58,3.145,59,2.223,60,0.354,61,0.062,62,0.027,63,0.027]],["title/injectables/AvatarWorker.html",[14,1.467,64,0.572]],["body/injectables/AvatarWorker.html",[13,0.04,14,1.739,17,1.813,23,0.275,24,0.233,25,0.233,28,0.63,29,0.721,51,1.764,60,0.275,61,0.048,62,0.023,63,0.023,64,0.678,65,0.977,66,2.011,67,0.275,68,0.759,69,3.412,70,3.412,71,1.153,72,2.906,73,2.906,74,1.64,75,2.906,76,3.529,77,0.586,78,2.011,79,1.241,80,3.529,81,1.74,82,0.776,83,1.155,84,2.906,85,2.443,86,3.815,87,1.089,88,1.357,89,2.906,90,3.412,91,2.443,92,2.906,93,0.94,94,1.042,95,1.411,96,3.547,97,3.547,98,2.495,99,3.657,100,2.906,101,2.443,102,1.514,103,1.514,104,3.529,105,3.412,106,2.443,107,1.153,108,2.188,109,2.188,110,3.737,111,2.906,112,3.737,113,3.737,114,3.529,115,2.443,116,2.011,117,2.011,118,1.727,119,2.495,120,2.188,121,2.011,122,0.977,123,2.011,124,2.011,125,1.498,126,2.011,127,1.573,128,1.727,129,2.011,130,2.443,131,2.906,132,1.283,133,2.011,134,2.011,135,2.011,136,2.011,137,2.011,138,2.011,139,2.011,140,2.011,141,2.011,142,3.412,143,2.011,144,2.906,145,2.011,146,2.011,147,2.011,148,2.011,149,2.011,150,2.011,151,2.011,152,2.011,153,2.011]],["title/injectables/FileCreatedListener.html",[15,1.639,64,0.572]],["body/injectables/FileCreatedListener.html",[13,0.04,14,2.727,15,2.419,19,2.778,23,0.378,24,0.32,25,0.32,28,0.724,29,0.992,33,1.849,34,1.849,37,2.082,51,1.436,60,0.378,61,0.066,62,0.028,63,0.028,64,0.844,65,1.343,67,0.378,71,1.436,74,1.601,77,1.054,79,1.054,81,1.588,82,0.659,83,1.054,87,0.805,102,2.082,107,1.436,127,1.436,132,1.171,154,2.765,155,4.395,156,3.358,157,3.463,158,4.279,159,3.358,160,4.395,161,2.082,162,4.395,163,3.358,164,2.765,165,2.765,166,1.948,167,3.358,168,3.358,169,3.358,170,3.037,171,2.765,172,5.639,173,3.358,174,3.358,175,4.395,176,3.358,177,3.358,178,3.618,179,4.395,180,3.618,181,4.395,182,3.358,183,3.358]],["title/injectables/FileDeletedListener.html",[16,1.639,64,0.572]],["body/injectables/FileDeletedListener.html",[13,0.04,16,2.859,23,0.428,24,0.362,25,0.453,28,0.679,29,1.122,33,2.092,34,2.092,37,2.356,51,1.555,60,0.428,61,0.075,62,0.031,63,0.031,64,0.914,65,1.52,67,0.428,71,1.555,77,1.141,79,1.141,81,1.719,82,0.714,83,1.141,87,0.912,102,3.374,157,3.363,158,4.481,161,2.356,164,3.129,165,3.129,170,2.356,171,3.129,178,3.129,184,3.129,185,5.194,186,3.801,187,3.801,188,4.758,189,4.758,190,3.801,191,3.917,192,3.129,193,3.801]],["title/classes/FileInfoInterface.html",[61,0.059,166,1.319]],["body/classes/FileInfoInterface.html",[13,0.04,23,0.393,24,0.43,25,0.333,28,0.59,60,0.393,61,0.089,62,0.029,63,0.029,67,0.393,68,0.97,79,1.341,82,0.854,83,1.081,86,2.468,88,1.397,93,1.33,94,1.474,95,1.396,96,2.468,97,2.468,98,2.468,99,2.468,120,2.794,161,3.467,166,1.998,194,1.72,195,2.874,196,2.46,197,2.212,198,2.212,199,2.46,200,5.981,201,3.491,202,3.079,203,3.491,204,3.491,205,3.491,206,3.491,207,3.491,208,3.491,209,2.874,210,2.874,211,2.468,212,3.491,213,1.922,214,3.491]],["title/classes/FileResponseInterface.html",[61,0.059,215,1.639]],["body/classes/FileResponseInterface.html",[13,0.039,23,0.467,24,0.395,25,0.535,28,0.543,60,0.565,61,0.099,62,0.032,63,0.032,67,0.467,68,1.08,79,1.204,82,0.753,88,1.295,95,1.659,166,2.547,194,2.044,215,2.764,216,2.933,217,3.967,218,4.149,219,4.149,220,3.416,221,2.284,222,2.933,223,2.572,224,2.572,225,2.572]],["title/controllers/FilesController.html",[226,1.846,227,1.846]],["body/controllers/FilesController.html",[13,0.04,17,1.237,23,0.385,24,0.17,25,0.551,28,0.608,29,0.525,33,0.979,34,0.979,49,1.232,51,1.616,59,1.258,60,0.2,61,0.035,62,0.025,63,0.018,67,0.2,71,0.909,74,1.851,77,0.427,79,1.115,81,1.68,82,0.759,83,1.115,87,1.115,88,1.334,93,0.474,95,1.369,103,2.399,107,1.454,125,1.892,127,1.805,128,1.258,132,1.347,161,2.882,170,2.122,192,1.465,215,0.979,217,2.735,221,0.979,222,1.965,223,1.103,224,2.602,225,2.122,226,1.103,227,2.122,228,1.465,229,1.779,230,1.779,231,1.37,232,2.289,233,2.781,234,2.781,235,2.781,236,2.781,237,1.531,238,1.465,239,5.236,240,2.13,241,2.781,242,1.779,243,2.284,244,0.979,245,5.308,246,2.781,247,1.779,248,1.779,249,2.781,250,1.779,251,1.779,252,2.781,253,1.779,254,1.779,255,2.781,256,1.779,257,1.779,258,2.781,259,1.779,260,1.779,261,1.779,262,1.779,263,3.869,264,2.781,265,0.979,266,1.779,267,1.779,268,1.465,269,1.465,270,0.979,271,1.779,272,1.103,273,1.103,274,2.781,275,1.465,276,1.779,277,1.686,278,1.465,279,1.465,280,1.779,281,1.779,282,1.779,283,1.779,284,1.779,285,1.779,286,1.779,287,2.781,288,1.37,289,1.779,290,1.779,291,2.781,292,1.779,293,1.779,294,4.198,295,4.811,296,3.423,297,2.068,298,1.517,299,4.198,300,1.86,301,4.198,302,4.198,303,4.198,304,3.423,305,1.779,306,3.423,307,1.779,308,1.779,309,1.779,310,1.779,311,1.779,312,1.779,313,3.869,314,2.818,315,3.423,316,1.779,317,1.779,318,1.779,319,1.779,320,1.465,321,1.779,322,2.781,323,1.779,324,1.779,325,1.779,326,1.779,327,1.779,328,3.423,329,2.781,330,1.779,331,1.779,332,1.779,333,1.779]],["title/modules/FilesModule.html",[0,1.639,12,1.639]],["body/modules/FilesModule.html",[0,2.85,2,2.077,3,2.077,4,2.668,5,2.668,6,2.077,7,3.659,8,2.668,12,3.224,13,0.04,17,2.063,20,3.348,21,2.668,22,2.668,23,0.425,24,0.36,25,0.36,27,3.107,28,0.747,29,1.114,59,3.348,60,0.425,61,0.075,62,0.031,63,0.031,227,3.209,272,2.339,273,2.339,275,3.107,277,2.812,278,3.107,334,3.107,335,3.107,336,3.774,337,3.774,338,3.774,339,3.209,340,2.668,341,3.774,342,3.774,343,3.774]],["title/classes/FilesResponseInterface.html",[61,0.059,221,1.639]],["body/classes/FilesResponseInterface.html",[13,0.039,23,0.448,24,0.379,25,0.467,28,0.521,60,0.551,61,0.097,62,0.032,63,0.032,67,0.448,68,1.053,79,1.327,82,0.83,88,1.272,95,1.958,166,2.563,194,1.962,215,2.192,216,2.815,217,3.911,220,3.279,221,2.696,222,3.749,223,3.036,224,3.288,225,3.288,344,3.982,345,3.982,346,3.982,347,3.982]],["title/injectables/FilesService.html",[17,1.076,64,0.572]],["body/injectables/FilesService.html",[13,0.04,17,1.152,23,0.24,24,0.203,25,0.203,28,0.648,29,0.628,39,1.504,49,1.882,51,1.664,54,2.093,60,0.24,61,0.042,62,0.021,63,0.021,64,0.612,65,0.851,67,0.24,68,0.686,71,1.042,74,1.898,77,0.51,79,1.249,81,1.841,82,0.764,83,1.221,87,1.188,88,1.38,93,1.132,94,0.942,95,1.698,103,1.977,107,1.733,108,1.977,109,1.977,122,0.851,125,1.535,127,1.618,132,1.319,166,0.943,170,2.633,196,1.571,197,1.413,198,1.413,199,1.571,223,1.319,225,1.977,231,2.353,238,2.625,240,1.171,243,1.882,268,1.752,269,1.752,279,1.752,288,2.093,297,2.093,298,1.726,300,1.413,348,1.752,349,3.824,350,3.189,351,3.189,352,3.189,353,3.189,354,1.755,355,2.625,356,1.752,357,2.726,358,3.189,359,2.128,360,1.755,361,3.189,362,2.128,363,3.189,364,2.128,365,3.189,366,2.128,367,3.189,368,2.128,369,3.189,370,2.128,371,1.048,372,1.755,373,4.247,374,2.128,375,1.695,376,2.128,377,1.171,378,1.048,379,2.625,380,2.128,381,2.128,382,2.128,383,2.128,384,2.128,385,1.171,386,3.189,387,3.189,388,3.824,389,2.128,390,1.048,391,2.128,392,2.128,393,2.128,394,2.128,395,4.247,396,2.338,397,4.247,398,3.189,399,3.189,400,3.189,401,1.755,402,3.189,403,3.189,404,3.189,405,1.752,406,2.128,407,3.189,408,2.128,409,2.128,410,2.128,411,3.189,412,2.128,413,2.128,414,2.128,415,2.128]],["title/injectables/FormatterUtil.html",[64,0.572,277,1.467]],["body/injectables/FormatterUtil.html",[13,0.039,23,0.435,24,0.368,25,0.458,28,0.506,29,1.142,51,1.263,60,0.435,61,0.076,62,0.031,63,0.031,64,0.923,65,1.546,67,0.435,71,1.571,77,1.255,79,1.153,81,1.397,82,0.58,83,0.927,87,0.927,93,1.281,94,1.42,132,1.03,197,2.131,198,2.131,211,3.399,243,2.131,277,2.369,314,3.183,320,3.183,416,3.183,417,4.808,418,3.866,419,3.866,420,3.866,421,4.808,422,4.808,423,2.647,424,4.808,425,2.647,426,3.866,427,3.866,428,3.866,429,3.866,430,3.866,431,3.866,432,3.866,433,3.866,434,3.866,435,3.866]],["title/injectables/FsUtil.html",[18,1.639,64,0.572]],["body/injectables/FsUtil.html",[13,0.04,18,2.423,23,0.379,24,0.321,25,0.321,28,0.576,29,0.994,51,1.764,60,0.379,61,0.067,62,0.028,63,0.028,64,0.845,65,1.346,67,0.379,71,1.438,74,1.81,77,1.176,79,1.248,81,1.772,82,0.736,83,1.176,87,1.176,88,1.388,107,1.7,127,1.1,132,0.897,191,3.623,298,1.591,300,1.951,390,2.168,436,2.771,437,4.401,438,4.401,439,4.401,440,3.365,441,4.401,442,3.365,443,4.401,444,3.365,445,3.365,446,4.401,447,3.365,448,2.168,449,2.423,450,3.365,451,3.365,452,2.423,453,1.853,454,3.365,455,3.365,456,3.365,457,3.365,458,1.853,459,3.365]],["title/classes/GridFsMulterConfigService.html",[61,0.059,339,1.846]],["body/classes/GridFsMulterConfigService.html",[13,0.04,23,0.407,24,0.44,25,0.484,28,0.664,60,0.407,61,0.072,62,0.03,63,0.03,67,0.407,68,0.992,71,1.507,77,1.218,79,1.218,87,0.868,93,1.353,94,1.069,95,1.447,125,1.308,132,1.229,194,1.783,210,2.979,211,2.558,224,2.243,272,2.243,273,2.243,298,1.667,339,2.859,340,2.558,371,2.273,448,1.783,460,4.402,461,2.979,462,4.613,463,5.077,464,5.523,465,5.347,466,4.613,467,3.619,468,5.077,469,1.783,470,3.797,471,4.613,472,3.619,473,3.619,474,3.619,475,3.619,476,3.619,477,1.992,478,3.619]],["title/interfaces/IDownloadOptions.html",[479,0.973,480,1.467]],["body/interfaces/IDownloadOptions.html",[13,0.041,23,0.203,24,0.172,25,0.402,28,0.585,49,1.726,54,2.445,60,0.439,61,0.036,62,0.018,63,0.018,67,0.203,68,0.604,74,1.689,77,0.432,82,0.421,83,0.673,87,0.432,88,1.39,93,1.287,94,1.019,107,1.778,122,1.789,125,1.526,127,1.526,132,1.485,196,1.383,197,0.798,198,1.529,199,0.888,202,1.899,213,2.324,231,1.7,237,0.992,243,1.871,244,0.992,265,2.965,270,0.992,288,0.888,297,1.7,298,1.616,300,0.798,354,0.992,357,1.899,360,0.992,371,1.383,372,0.992,375,0.798,377,0.992,378,0.888,385,1.546,390,1.919,396,1.546,401,0.992,423,1.899,425,0.992,448,0.888,449,1.546,452,1.546,453,0.992,458,0.992,469,1.7,477,0.992,479,1.127,480,2.08,481,0.992,482,0.992,483,0.992,484,2.415,485,1.74,486,1.117,487,1.74,488,1.74,489,1.117,490,1.117,491,1.117,492,1.117,493,1.117,494,1.7,495,1.117,496,1.117,497,1.74,498,1.919,499,1.74,500,1.74,501,1.117,502,3.205,503,1.117,504,1.117,505,1.117,506,1.117,507,1.117,508,2.995,509,1.117,510,1.74,511,2.415,512,1.117,513,1.117,514,1.117,515,1.117,516,1.117,517,1.117,518,1.117,519,2.773,520,1.74,521,1.74,522,1.117,523,1.117,524,1.117,525,1.117,526,1.117,527,1.117,528,1.117,529,1.117,530,1.117,531,1.117,532,2.415,533,1.74,534,1.117,535,1.117,536,1.74,537,2.139,538,1.74,539,1.117,540,1.117,541,0.992,542,1.117,543,1.117,544,1.117,545,1.117,546,1.117,547,1.117,548,1.117,549,1.117,550,1.117,551,1.117,552,1.117,553,1.117,554,1.117,555,1.117,556,1.117,557,1.117,558,1.74,559,1.74,560,1.117,561,1.74,562,1.74,563,1.117,564,1.117,565,1.117,566,1.117,567,1.117,568,1.117]],["title/interfaces/IGridFSObject.html",[479,0.973,494,1.467]],["body/interfaces/IGridFSObject.html",[13,0.041,23,0.193,24,0.163,25,0.393,28,0.573,49,1.681,54,2.409,60,0.427,61,0.034,62,0.017,63,0.017,67,0.193,68,0.581,74,1.668,77,0.411,82,0.713,83,1.051,87,0.411,88,1.391,93,1.266,94,1.294,107,1.76,122,1.752,125,1.491,127,1.499,132,1.473,196,2.033,197,1.681,198,1.942,199,1.869,202,2.524,213,1.84,231,1.647,237,0.944,243,1.828,244,0.944,265,2.933,270,0.944,288,0.845,297,1.647,298,1.584,300,0.76,354,0.944,357,1.84,360,0.944,371,1.331,372,0.944,375,0.76,377,0.944,378,0.845,385,1.488,390,1.869,396,1.488,401,0.944,423,1.84,425,2.088,448,0.845,449,1.488,452,1.488,453,0.944,458,0.944,469,1.647,477,0.944,479,1.092,480,1.869,481,0.944,482,0.944,483,0.944,484,1.064,485,2.351,486,1.064,487,1.675,488,1.675,489,1.064,490,1.064,491,1.064,492,1.064,493,1.064,494,1.869,495,2.072,496,2.351,497,2.351,498,1.869,499,1.675,500,1.675,501,1.064,502,3.164,503,1.064,504,1.064,505,1.064,506,1.064,507,1.064,508,2.945,509,1.064,510,1.675,511,2.351,512,1.064,513,1.064,514,1.064,515,1.064,516,1.064,517,1.064,518,1.064,519,2.717,520,1.675,521,1.675,522,1.064,523,1.064,524,1.064,525,1.064,526,1.064,527,1.064,528,1.064,529,1.064,530,1.064,531,1.064,532,2.351,533,1.675,534,1.064,535,1.064,536,1.675,537,2.072,538,1.675,539,1.064,540,1.064,541,0.944,542,1.064,543,1.064,544,1.064,545,1.064,546,1.064,547,1.064,548,1.064,549,1.064,550,1.064,551,1.064,552,1.064,553,1.064,554,1.064,555,1.064,556,1.064,557,1.064,558,1.675,559,1.675,560,1.064,561,1.675,562,1.675,563,1.064,564,1.064,565,1.064,566,1.064,567,1.064,568,1.064]],["title/interfaces/IGridFSWriteOption.html",[479,0.973,498,1.467]],["body/interfaces/IGridFSWriteOption.html",[13,0.041,23,0.197,24,0.167,25,0.397,28,0.578,49,1.7,54,2.424,60,0.432,61,0.035,62,0.018,63,0.018,67,0.197,68,0.591,74,1.677,77,0.42,82,0.625,83,1.148,87,0.42,88,1.394,93,1.275,94,1.305,107,1.768,122,1.768,125,1.506,127,1.51,132,1.478,196,1.353,197,0.776,198,1.959,199,0.863,202,2.294,213,1.865,231,1.669,237,0.964,243,1.847,244,0.964,265,2.947,270,0.964,288,0.863,297,1.669,298,1.598,300,0.776,354,0.964,357,1.865,360,0.964,371,1.353,372,0.964,375,0.776,377,0.964,378,0.863,385,1.512,390,1.89,396,1.512,401,0.964,423,1.865,425,0.964,448,0.863,449,1.512,452,1.512,453,0.964,458,0.964,469,1.669,477,0.964,479,1.107,480,1.89,481,0.964,482,0.964,483,0.964,484,1.086,485,1.703,486,1.086,487,1.703,488,1.703,489,1.086,490,1.086,491,1.086,492,1.086,493,1.086,494,1.669,495,1.086,496,1.086,497,2.378,498,2.053,499,2.583,500,2.583,501,1.086,502,3.181,503,1.086,504,1.086,505,1.086,506,1.086,507,1.086,508,2.967,509,1.086,510,1.703,511,2.378,512,1.086,513,1.086,514,1.086,515,1.086,516,1.086,517,1.086,518,1.086,519,2.741,520,1.703,521,1.703,522,1.086,523,1.086,524,1.086,525,1.086,526,1.086,527,1.086,528,1.086,529,1.086,530,1.086,531,1.086,532,2.378,533,1.703,534,1.086,535,1.086,536,1.703,537,2.1,538,1.703,539,1.086,540,1.086,541,0.964,542,1.086,543,1.086,544,1.086,545,1.086,546,1.086,547,1.086,548,1.086,549,1.086,550,1.086,551,1.086,552,1.086,553,1.086,554,1.086,555,1.086,556,1.086,557,1.086,558,1.703,559,1.703,560,1.086,561,1.703,562,1.703,563,1.086,564,1.086,565,1.086,566,1.086,567,1.086,568,1.086]],["title/classes/MongoGridFS.html",[61,0.059,375,1.319]],["body/classes/MongoGridFS.html",[13,0.04,23,0.154,24,0.13,25,0.431,28,0.517,49,1.628,51,1.522,54,2.579,60,0.374,61,0.027,62,0.015,63,0.015,67,0.154,68,0.484,71,0.735,74,1.813,77,0.688,79,1.19,81,1.683,82,0.731,83,1.117,87,1.145,88,1.384,93,1.053,94,0.847,107,1.793,108,1.778,109,1.778,122,1.862,125,1.328,127,1.365,132,1.408,194,0.673,196,1.108,197,0.606,198,1.271,199,0.673,202,1.579,213,2.023,231,1.81,232,1.852,237,1.239,243,2.064,244,1.239,265,2.776,270,1.83,288,0.673,297,1.413,298,1.428,300,0.606,354,1.579,355,1.852,356,1.125,357,2.176,360,1.239,371,1.638,372,1.239,375,0.997,377,0.752,378,0.673,385,2.176,390,1.947,396,1.239,401,0.752,405,1.852,423,2.3,425,0.752,448,0.673,449,1.239,452,1.239,453,0.752,458,0.752,469,1.947,477,0.752,479,0.937,480,2.151,482,2.776,483,0.752,484,0.847,485,1.395,486,0.847,487,2.278,488,1.395,489,0.847,490,0.847,491,0.847,492,0.847,493,0.847,494,1.81,495,0.847,496,0.847,497,1.395,498,2.151,499,1.395,500,1.395,501,0.847,502,3.526,503,1.778,504,0.847,505,0.847,506,1.778,507,1.395,508,2.706,509,0.847,510,1.395,511,2.06,512,0.847,513,0.847,514,0.847,515,0.847,516,0.847,517,0.847,518,1.395,519,2.887,520,1.395,521,1.395,522,1.395,523,1.395,524,1.395,525,0.847,526,0.847,527,0.847,528,0.847,529,0.847,530,0.847,531,0.847,532,2.887,533,2.06,534,1.395,535,0.847,536,1.395,537,2.45,538,2.06,539,1.395,540,0.847,541,0.752,542,0.847,543,0.847,544,1.395,545,1.395,546,0.847,547,1.395,548,0.847,549,0.847,550,0.847,551,0.847,552,0.847,553,0.847,554,0.847,555,0.847,556,0.847,557,1.395,558,1.778,559,1.395,560,0.847,561,1.395,562,1.395,563,0.847,564,0.847,565,0.847,566,0.847,567,1.395,568,0.847,569,2.25,570,2.25,571,2.25,572,2.25,573,1.367,574,2.25,575,1.367,576,1.367,577,1.367,578,1.367,579,1.367,580,1.367,581,1.367,582,1.367,583,1.367,584,1.367,585,1.367,586,1.367,587,1.367]],["title/injectables/ProductWorker.html",[19,1.467,64,0.572]],["body/injectables/ProductWorker.html",[13,0.04,17,1.807,19,1.725,23,0.272,24,0.23,25,0.23,28,0.627,29,0.714,51,1.809,60,0.272,61,0.048,62,0.023,63,0.023,64,0.672,65,0.966,67,0.272,68,0.753,69,3.391,70,3.391,71,1.144,72,2.883,73,2.883,74,1.634,75,2.883,77,0.58,78,1.989,79,1.237,81,1.733,82,0.774,83,1.15,84,2.883,86,3.805,87,1.083,88,1.355,89,2.883,90,3.391,92,2.883,93,0.933,94,1.034,95,1.4,96,3.534,97,3.534,98,2.475,99,3.645,100,2.883,102,1.498,103,1.498,105,3.391,107,1.144,108,2.171,109,2.171,110,3.718,111,2.883,112,3.718,113,3.718,116,1.989,117,1.989,118,1.708,119,2.475,120,2.171,121,1.989,122,0.966,123,1.989,124,1.989,125,1.489,126,1.989,127,1.567,128,1.708,129,1.989,131,2.883,132,1.277,133,1.989,134,1.989,135,1.989,136,1.989,137,1.989,138,1.989,139,1.989,140,1.989,141,1.989,142,3.391,143,1.989,144,2.883,145,1.989,146,1.989,147,1.989,148,1.989,149,1.989,150,1.989,151,1.989,152,1.989,153,1.989,588,1.989,589,3.502,590,3.502,591,2.417,592,2.417,593,2.417,594,3.502,595,2.417,596,3.502,597,2.417,598,2.417,599,2.417]],["title/coverage.html",[600,2.867]],["body/coverage.html",[6,1.93,13,0.04,14,1.728,15,1.93,16,1.93,17,1.267,18,1.93,19,1.728,25,0.334,61,0.108,62,0.029,63,0.029,64,1.094,66,2.887,82,0.526,154,2.887,166,1.554,184,2.887,195,2.887,215,1.93,216,3.195,221,1.93,226,2.174,227,2.174,228,2.887,240,1.93,277,1.728,298,1.267,339,2.174,348,2.887,375,1.554,416,2.887,436,2.887,460,2.887,461,2.887,479,1.727,480,1.728,482,2.909,483,2.909,494,1.728,498,1.728,541,3.341,588,2.887,600,2.479,601,3.507,602,3.507,603,3.507,604,5.003,605,3.507,606,2.887,607,5.6,608,3.507,609,4.521,610,3.507,611,2.887,612,3.507,613,3.507,614,3.507,615,3.507,616,3.507,617,3.507,618,3.507,619,3.507]],["title/interfaces/deleteFileInterface.html",[240,1.639,479,0.973]],["body/interfaces/deleteFileInterface.html",[13,0.038,23,0.493,24,0.417,25,0.417,60,0.493,62,0.034,63,0.034,67,0.493,68,1.115,82,0.778,88,1.418,180,4.703,240,2.855,479,1.431,481,2.41,606,3.604,620,5.713]],["title/dependencies.html",[3,1.97,621,2.05]],["body/dependencies.html",[3,2.113,13,0.04,29,1.133,31,3.159,33,2.113,34,2.113,37,2.379,39,2.713,61,0.076,62,0.031,63,0.031,93,1.023,94,1.133,118,2.713,119,2.713,120,2.379,122,1.535,157,2.713,209,3.159,272,2.379,273,2.379,340,3.383,378,1.891,379,3.159,469,2.358,470,3.941,622,3.838,623,5.462,624,3.838,625,3.838,626,3.838,627,3.838,628,3.838,629,3.838,630,3.838,631,3.838,632,3.838,633,3.838,634,3.838,635,3.838,636,3.838,637,3.838,638,3.838,639,3.838,640,3.838,641,3.838,642,3.838,643,3.838,644,3.838,645,3.838,646,3.838,647,3.838,648,3.838,649,3.838,650,3.838,651,3.838,652,3.838]],["title/miscellaneous/functions.html",[653,2.05,654,2.946]],["body/miscellaneous/functions.html",[6,3.129,13,0.035,62,0.035,63,0.035,67,0.528,611,3.86,653,3.86,654,3.86,655,4.689]],["title/index.html",[67,0.28,656,2.49,657,2.49]],["body/index.html",[13,0.039,24,0.355,62,0.03,63,0.03,600,2.636,658,3.729,659,3.729,660,4.701,661,3.729,662,3.729,663,3.729,664,3.729,665,3.729,666,3.729,667,3.07,668,5.149,669,3.729,670,3.729,671,3.729,672,3.729,673,5.149,674,5.777,675,3.729,676,3.729,677,3.729,678,5.69,679,3.729,680,3.729,681,4.701,682,3.729,683,3.729,684,3.729,685,3.729,686,4.701,687,4.701,688,3.729,689,3.729,690,3.729,691,4.701,692,4.701,693,3.729,694,3.729,695,3.729,696,3.729,697,3.729,698,3.07,699,3.729,700,3.729,701,3.729,702,3.729,703,3.729,704,3.729,705,3.729,706,3.729,707,3.729,708,3.729,709,3.07,710,3.729,711,3.729,712,3.729,713,3.729,714,3.729,715,3.729,716,3.07]],["title/modules.html",[2,2.233]],["body/modules.html",[1,2.881,2,2.558,12,2.558,13,0.035,62,0.035,63,0.035,698,4.421,717,5.37,718,5.37,719,5.37]],["title/overview.html",[720,3.339]],["body/overview.html",[0,2.123,1,3.788,2,2.123,3,2.123,4,2.726,5,2.726,6,2.123,7,2.726,8,2.726,9,3.175,10,3.175,11,3.175,12,3.203,13,0.039,14,2.576,15,2.878,16,2.878,17,1.977,18,2.878,19,2.576,20,3.394,21,2.726,22,2.726,62,0.031,63,0.031,65,1.542,194,1.9,226,2.391,277,2.576,334,3.175,335,3.175,481,2.123,720,3.175,721,3.856,722,3.856,723,3.856,724,3.856,725,3.856]],["title/properties.html",[68,0.77,621,2.05]],["body/properties.html",[13,0.039,62,0.035,63,0.035,68,1,667,3.826,709,3.826,716,3.826,726,4.648,727,4.648,728,4.648]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{},"coverage.html":{},"interfaces/deleteFileInterface.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":541,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"coverage.html":{}}}],["0.0.1",{"_index":727,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["0.30.7",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":605,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":610,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":722,"title":{},"body":{"overview.html":{}}}],["1.0.2",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["150",{"_index":113,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["2",{"_index":721,"title":{},"body":{"overview.html":{}}}],["2.0.1",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["2.0.6",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["2.15.1",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["2.3.4",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":725,"title":{},"body":{"overview.html":{}}}],["4.0.5",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["4.16.0",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["40",{"_index":110,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["5",{"_index":724,"title":{},"body":{"overview.html":{}}}],["5.0.2",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["5.88.2",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["6.11.4",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["69",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":723,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["8.4.7",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["9.2.2",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["9/13",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["_id",{"_index":196,"title":{},"body":{"classes/FileInfoInterface.html":{},"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["_reject",{"_index":475,"title":{},"body":{"classes/GridFsMulterConfigService.html":{}}}],["_req",{"_index":474,"title":{},"body":{"classes/GridFsMulterConfigService.html":{}}}],["accessors",{"_index":572,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["aliases",{"_index":500,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["amazing",{"_index":699,"title":{},"body":{"index.html":{}}}],["app",{"_index":676,"title":{},"body":{"index.html":{}}}],["applications",{"_index":666,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":74,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/FsUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{}}}],["attachment",{"_index":319,"title":{},"body":{"controllers/FilesController.html":{}}}],["author",{"_index":709,"title":{},"body":{"index.html":{},"properties.html":{}}}],["auto'}_${date.now()}.jpeg",{"_index":147,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["avatarworker",{"_index":14,"title":{"injectables/AvatarWorker.html":{}},"body":{"modules/AppModule.html":{},"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":127,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/FsUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{}}}],["back",{"_index":524,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["backers",{"_index":700,"title":{},"body":{"index.html":{}}}],["body",{"_index":239,"title":{},"body":{"controllers/FilesController.html":{}}}],["body.lowprocess",{"_index":287,"title":{},"body":{"controllers/FilesController.html":{}}}],["boolean",{"_index":213,"title":{},"body":{"classes/FileInfoInterface.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":719,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":717,"title":{},"body":{"modules.html":{}}}],["bson",{"_index":486,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["bucket",{"_index":503,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["bucketname",{"_index":423,"title":{},"body":{"injectables/FormatterUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["buffer",{"_index":119,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{},"dependencies.html":{}}}],["building",{"_index":661,"title":{},"body":{"index.html":{}}}],["case",{"_index":175,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["catch",{"_index":411,"title":{},"body":{"injectables/FilesService.html":{}}}],["catch((err",{"_index":566,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["catch(err",{"_index":406,"title":{},"body":{"injectables/FilesService.html":{}}}],["child",{"_index":223,"title":{},"body":{"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{}}}],["childs",{"_index":225,"title":{},"body":{"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{}}}],["chunksize",{"_index":197,"title":{},"body":{"classes/FileInfoInterface.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["chunksizebytes",{"_index":499,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["class",{"_index":61,"title":{"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"classes/FilesResponseInterface.html":{},"classes/GridFsMulterConfigService.html":{},"classes/MongoGridFS.html":{}},"body":{"modules/AppModule.html":{},"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":194,"title":{},"body":{"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"classes/FilesResponseInterface.html":{},"classes/GridFsMulterConfigService.html":{},"classes/MongoGridFS.html":{},"overview.html":{}}}],["clientproxy",{"_index":158,"title":{},"body":{"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{}}}],["clientsmodule",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["clientsmodule.register",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":334,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":335,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["condition",{"_index":537,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["config.service",{"_index":341,"title":{},"body":{"modules/FilesModule.html":{}}}],["config.service.ts",{"_index":461,"title":{},"body":{"classes/GridFsMulterConfigService.html":{},"coverage.html":{}}}],["config.service.ts:26",{"_index":467,"title":{},"body":{"classes/GridFsMulterConfigService.html":{}}}],["config.service.ts:6",{"_index":466,"title":{},"body":{"classes/GridFsMulterConfigService.html":{}}}],["configmodule",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["connection",{"_index":357,"title":{},"body":{"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["console.log",{"_index":192,"title":{},"body":{"injectables/FileDeletedListener.html":{},"controllers/FilesController.html":{}}}],["console.log(error",{"_index":415,"title":{},"body":{"injectables/FilesService.html":{}}}],["const",{"_index":125,"title":{},"body":{"injectables/AvatarWorker.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{}}}],["constructor",{"_index":77,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{}}}],["constructor(@injectconnection",{"_index":384,"title":{},"body":{"injectables/FilesService.html":{}}}],["constructor(avatarworker",{"_index":156,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["constructor(connection",{"_index":356,"title":{},"body":{"injectables/FilesService.html":{},"classes/MongoGridFS.html":{}}}],["constructor(filesservice",{"_index":78,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["constructor(nats",{"_index":186,"title":{},"body":{"injectables/FileDeletedListener.html":{}}}],["constructor(private",{"_index":123,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["constructor(public",{"_index":501,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["contenttype",{"_index":198,"title":{},"body":{"classes/FileInfoInterface.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["controller",{"_index":226,"title":{"controllers/FilesController.html":{}},"body":{"controllers/FilesController.html":{},"coverage.html":{},"overview.html":{}}}],["controller('/media",{"_index":280,"title":{},"body":{"controllers/FilesController.html":{}}}],["controllers",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{}}}],["cover",{"_index":112,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["coverage",{"_index":600,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createdirectory",{"_index":437,"title":{},"body":{"injectables/FsUtil.html":{}}}],["createdirectory(name",{"_index":441,"title":{},"body":{"injectables/FsUtil.html":{}}}],["createmulteroptions",{"_index":465,"title":{},"body":{"classes/GridFsMulterConfigService.html":{}}}],["csv",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["date",{"_index":495,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["db",{"_index":487,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"overview.html":{}}}],["decorators",{"_index":161,"title":{},"body":{"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"classes/FileInfoInterface.html":{},"controllers/FilesController.html":{}}}],["default",{"_index":108,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FilesService.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{}}}],["defined",{"_index":79,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{}}}],["delete",{"_index":270,"title":{},"body":{"controllers/FilesController.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["delete('/:id",{"_index":241,"title":{},"body":{"controllers/FilesController.html":{}}}],["delete(id",{"_index":567,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["deleted",{"_index":328,"title":{},"body":{"controllers/FilesController.html":{}}}],["deletefile",{"_index":231,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["deletefile(@param('id",{"_index":321,"title":{},"body":{"controllers/FilesController.html":{}}}],["deletefile(id",{"_index":238,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["deletefileinterface",{"_index":240,"title":{"interfaces/deleteFileInterface.html":{}},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"coverage.html":{},"interfaces/deleteFileInterface.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":667,"title":{},"body":{"index.html":{},"properties.html":{}}}],["detected",{"_index":304,"title":{},"body":{"controllers/FilesController.html":{}}}],["development",{"_index":677,"title":{},"body":{"index.html":{}}}],["directly",{"_index":557,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["dirname",{"_index":445,"title":{},"body":{"injectables/FsUtil.html":{}}}],["disposition",{"_index":318,"title":{},"body":{"controllers/FilesController.html":{}}}],["documentation",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["downloadfile",{"_index":232,"title":{},"body":{"controllers/FilesController.html":{},"classes/MongoGridFS.html":{}}}],["downloadfile(@param('id",{"_index":317,"title":{},"body":{"controllers/FilesController.html":{}}}],["downloadfile(id",{"_index":244,"title":{},"body":{"controllers/FilesController.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["downloadpath",{"_index":525,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["e2e",{"_index":688,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":662,"title":{},"body":{"index.html":{}}}],["emitter",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"controllers/FilesController.html":{},"dependencies.html":{}}}],["encoding",{"_index":421,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["enfant",{"_index":330,"title":{},"body":{"controllers/FilesController.html":{}}}],["enfants",{"_index":327,"title":{},"body":{"controllers/FilesController.html":{}}}],["err",{"_index":452,"title":{},"body":{"injectables/FsUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["error",{"_index":300,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/FsUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["error('file",{"_index":560,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["error('no",{"_index":542,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["et",{"_index":325,"title":{},"body":{"controllers/FilesController.html":{}}}],["event",{"_index":102,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"injectables/ProductWorker.html":{}}}],["event.body.target",{"_index":174,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["event.body.targetid",{"_index":181,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["event.file.id",{"_index":131,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["event_pics",{"_index":182,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["eventemitter",{"_index":281,"title":{},"body":{"controllers/FilesController.html":{}}}],["eventemitter2",{"_index":274,"title":{},"body":{"controllers/FilesController.html":{}}}],["eventemittermodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["example",{"_index":673,"title":{},"body":{"index.html":{}}}],["export",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{},"interfaces/deleteFileInterface.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"overview.html":{}}}],["expose",{"_index":200,"title":{},"body":{"classes/FileInfoInterface.html":{}}}],["express",{"_index":273,"title":{},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{},"classes/GridFsMulterConfigService.html":{},"dependencies.html":{}}}],["ext",{"_index":210,"title":{},"body":{"classes/FileInfoInterface.html":{},"classes/GridFsMulterConfigService.html":{}}}],["false",{"_index":360,"title":{},"body":{"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["file",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{},"coverage.html":{},"interfaces/deleteFileInterface.html":{}}}],["file.bucketname",{"_index":432,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["file.chunksize",{"_index":433,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["file.contenttype",{"_index":314,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FormatterUtil.html":{}}}],["file.encoding",{"_index":428,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["file.filename",{"_index":320,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FormatterUtil.html":{}}}],["file.id",{"_index":430,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["file.metadata",{"_index":431,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["file.metadata.parent",{"_index":306,"title":{},"body":{"controllers/FilesController.html":{}}}],["file.mimetype",{"_index":429,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["file.originalname",{"_index":427,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["file.originalname.trim",{"_index":476,"title":{},"body":{"classes/GridFsMulterConfigService.html":{}}}],["file.size",{"_index":434,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["file.uploaddate",{"_index":435,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["filecreatedlistener",{"_index":15,"title":{"injectables/FileCreatedListener.html":{}},"body":{"modules/AppModule.html":{},"injectables/FileCreatedListener.html":{},"coverage.html":{},"overview.html":{}}}],["filedeleted.listener.ts:14",{"_index":193,"title":{},"body":{"injectables/FileDeletedListener.html":{}}}],["filedeletedlistener",{"_index":16,"title":{"injectables/FileDeletedListener.html":{}},"body":{"modules/AppModule.html":{},"injectables/FileDeletedListener.html":{},"coverage.html":{},"overview.html":{}}}],["fileid",{"_index":105,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["fileinfo.interface",{"_index":220,"title":{},"body":{"classes/FileResponseInterface.html":{},"classes/FilesResponseInterface.html":{}}}],["fileinfointerface",{"_index":166,"title":{"classes/FileInfoInterface.html":{}},"body":{"injectables/FileCreatedListener.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"coverage.html":{}}}],["filemodel",{"_index":349,"title":{},"body":{"injectables/FilesService.html":{}}}],["filename",{"_index":93,"title":{},"body":{"injectables/AvatarWorker.html":{},"classes/FileInfoInterface.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{},"dependencies.html":{}}}],["filenameresize",{"_index":92,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["filenames",{"_index":457,"title":{},"body":{"injectables/FsUtil.html":{}}}],["fileresponseinterface",{"_index":215,"title":{"classes/FileResponseInterface.html":{}},"body":{"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"classes/FilesResponseInterface.html":{},"coverage.html":{}}}],["files",{"_index":263,"title":{},"body":{"controllers/FilesController.html":{}}}],["files.controller",{"_index":337,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.controller.ts:37",{"_index":285,"title":{},"body":{"controllers/FilesController.html":{}}}],["files.map",{"_index":286,"title":{},"body":{"controllers/FilesController.html":{}}}],["files.map(async",{"_index":284,"title":{},"body":{"controllers/FilesController.html":{}}}],["files.service",{"_index":275,"title":{},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{}}}],["files/files.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["files/files.service",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["filescontroller",{"_index":227,"title":{"controllers/FilesController.html":{}},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filesinterceptor",{"_index":271,"title":{},"body":{"controllers/FilesController.html":{}}}],["filesmodule",{"_index":12,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesresponseinterface",{"_index":221,"title":{"classes/FilesResponseInterface.html":{}},"body":{"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"classes/FilesResponseInterface.html":{},"coverage.html":{}}}],["filesservice",{"_index":17,"title":{"injectables/FilesService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AvatarWorker.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"injectables/ProductWorker.html":{},"coverage.html":{},"overview.html":{}}}],["filestream",{"_index":295,"title":{},"body":{"controllers/FilesController.html":{}}}],["filestream.pipe(res",{"_index":315,"title":{},"body":{"controllers/FilesController.html":{}}}],["filesystem",{"_index":523,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["filter",{"_index":538,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["finalpath",{"_index":508,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["find",{"_index":532,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["find(filter",{"_index":545,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["findbyid",{"_index":569,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["findbyid(id",{"_index":534,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["findbyid(id).catch(err",{"_index":394,"title":{},"body":{"injectables/FilesService.html":{}}}],["findchildfilesfromparent",{"_index":350,"title":{},"body":{"injectables/FilesService.html":{}}}],["findchildfilesfromparent(id",{"_index":361,"title":{},"body":{"injectables/FilesService.html":{}}}],["findinfo",{"_index":351,"title":{},"body":{"injectables/FilesService.html":{}}}],["findinfo(id",{"_index":363,"title":{},"body":{"injectables/FilesService.html":{}}}],["findinfobyfilename",{"_index":352,"title":{},"body":{"injectables/FilesService.html":{}}}],["findinfobyfilename(filename",{"_index":365,"title":{},"body":{"injectables/FilesService.html":{}}}],["findone",{"_index":405,"title":{},"body":{"injectables/FilesService.html":{},"classes/MongoGridFS.html":{}}}],["findone(filter",{"_index":539,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["fit",{"_index":99,"title":{},"body":{"injectables/AvatarWorker.html":{},"classes/FileInfoInterface.html":{},"injectables/ProductWorker.html":{}}}],["format",{"_index":98,"title":{},"body":{"injectables/AvatarWorker.html":{},"classes/FileInfoInterface.html":{},"injectables/ProductWorker.html":{}}}],["formatterutil",{"_index":277,"title":{"injectables/FormatterUtil.html":{}},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FormatterUtil.html":{},"coverage.html":{},"overview.html":{}}}],["found",{"_index":396,"title":{},"body":{"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["framework",{"_index":660,"title":{},"body":{"index.html":{}}}],["fs",{"_index":390,"title":{},"body":{"injectables/FilesService.html":{},"injectables/FsUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["fs.existssync(`files/${name",{"_index":450,"title":{},"body":{"injectables/FsUtil.html":{}}}],["fs.existssync(uploadfilepath",{"_index":559,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["fs.mkdir(`files/${name",{"_index":451,"title":{},"body":{"injectables/FsUtil.html":{}}}],["fs.readdir(dirname",{"_index":456,"title":{},"body":{"injectables/FsUtil.html":{}}}],["fs.rmdirsync(`files/${name",{"_index":455,"title":{},"body":{"injectables/FsUtil.html":{}}}],["fs.unlinksync(uploadfilepath",{"_index":563,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["fsutil",{"_index":18,"title":{"injectables/FsUtil.html":{}},"body":{"modules/AppModule.html":{},"injectables/FsUtil.html":{},"coverage.html":{},"overview.html":{}}}],["function",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":654,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":249,"title":{},"body":{"controllers/FilesController.html":{}}}],["get('download/:id",{"_index":246,"title":{},"body":{"controllers/FilesController.html":{}}}],["get('filename/:name",{"_index":252,"title":{},"body":{"controllers/FilesController.html":{}}}],["get('info/:id",{"_index":255,"title":{},"body":{"controllers/FilesController.html":{}}}],["get('listfrom/:id",{"_index":258,"title":{},"body":{"controllers/FilesController.html":{}}}],["getbucket",{"_index":586,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["getdownloadpath",{"_index":570,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["getdownloadpath(object",{"_index":507,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["getfile",{"_index":233,"title":{},"body":{"controllers/FilesController.html":{}}}],["getfile(@param('id",{"_index":316,"title":{},"body":{"controllers/FilesController.html":{}}}],["getfile(id",{"_index":248,"title":{},"body":{"controllers/FilesController.html":{}}}],["getfilebyfilename",{"_index":234,"title":{},"body":{"controllers/FilesController.html":{}}}],["getfilebyfilename(@param('name",{"_index":310,"title":{},"body":{"controllers/FilesController.html":{}}}],["getfilebyfilename(name",{"_index":251,"title":{},"body":{"controllers/FilesController.html":{}}}],["getfileinfo",{"_index":235,"title":{},"body":{"controllers/FilesController.html":{}}}],["getfileinfo(@param('id",{"_index":293,"title":{},"body":{"controllers/FilesController.html":{}}}],["getfileinfo(id",{"_index":254,"title":{},"body":{"controllers/FilesController.html":{}}}],["getfilename",{"_index":72,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["getfilename(resize",{"_index":84,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["getlistfrom",{"_index":236,"title":{},"body":{"controllers/FilesController.html":{}}}],["getlistfrom(@param('id",{"_index":305,"title":{},"body":{"controllers/FilesController.html":{}}}],["getlistfrom(id",{"_index":257,"title":{},"body":{"controllers/FilesController.html":{}}}],["getorigin",{"_index":417,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["getorigin(file",{"_index":419,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["getorigin(file:any",{"_index":426,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["getpayload",{"_index":73,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["getpayload(filenameresize",{"_index":89,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["getting",{"_index":656,"title":{"index.html":{}},"body":{}}],["gridfs",{"_index":469,"title":{},"body":{"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"dependencies.html":{}}}],["gridfs.util",{"_index":383,"title":{},"body":{"injectables/FilesService.html":{}}}],["gridfs.util.ts",{"_index":483,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"coverage.html":{}}}],["gridfs.util.ts:110",{"_index":579,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["gridfs.util.ts:119",{"_index":580,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["gridfs.util.ts:132",{"_index":578,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["gridfs.util.ts:141",{"_index":585,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["gridfs.util.ts:165",{"_index":584,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["gridfs.util.ts:191",{"_index":575,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["gridfs.util.ts:32",{"_index":573,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["gridfs.util.ts:39",{"_index":574,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["gridfs.util.ts:42",{"_index":587,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["gridfs.util.ts:46",{"_index":581,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["gridfs.util.ts:79",{"_index":582,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["gridfs.util.ts:90",{"_index":576,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["gridfsbucket",{"_index":488,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["gridfsbucket(this.connection",{"_index":504,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["gridfsbucketreadstream",{"_index":377,"title":{},"body":{"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["gridfsmulterconfigservice",{"_index":339,"title":{"classes/GridFsMulterConfigService.html":{}},"body":{"modules/FilesModule.html":{},"classes/GridFsMulterConfigService.html":{},"coverage.html":{}}}],["gridfsstorage",{"_index":464,"title":{},"body":{"classes/GridFsMulterConfigService.html":{}}}],["grow",{"_index":695,"title":{},"body":{"index.html":{}}}],["handlefilecreatedevent",{"_index":155,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["handlefilecreatedevent(event",{"_index":160,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["handlefiledeletedevent",{"_index":185,"title":{},"body":{"injectables/FileDeletedListener.html":{}}}],["handlefiledeletedevent(event",{"_index":188,"title":{},"body":{"injectables/FileDeletedListener.html":{}}}],["height",{"_index":97,"title":{},"body":{"injectables/AvatarWorker.html":{},"classes/FileInfoInterface.html":{},"injectables/ProductWorker.html":{}}}],["here",{"_index":706,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":268,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["httpexception('an",{"_index":299,"title":{},"body":{"controllers/FilesController.html":{}}}],["httpexception('file",{"_index":395,"title":{},"body":{"injectables/FilesService.html":{}}}],["https://nestjs.com",{"_index":713,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":269,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["httpstatus.expectation_failed",{"_index":303,"title":{},"body":{"controllers/FilesController.html":{}}}],["httpstatus.not_found",{"_index":397,"title":{},"body":{"injectables/FilesService.html":{}}}],["id",{"_index":243,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["identifier",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["idownloadoptions",{"_index":480,"title":{"interfaces/IDownloadOptions.html":{}},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"coverage.html":{}}}],["ignore",{"_index":387,"title":{},"body":{"injectables/FilesService.html":{}}}],["igridfsobject",{"_index":494,"title":{"interfaces/IGridFSObject.html":{}},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"coverage.html":{}}}],["igridfswriteoption",{"_index":498,"title":{"interfaces/IGridFSWriteOption.html":{}},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"coverage.html":{}}}],["implements",{"_index":462,"title":{},"body":{"classes/GridFsMulterConfigService.html":{}}}],["import",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{}}}],["imports",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{}}}],["index",{"_index":67,"title":{"index.html":{}},"body":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{},"interfaces/deleteFileInterface.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{},"interfaces/deleteFileInterface.html":{}}}],["inject",{"_index":164,"title":{},"body":{"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{}}}],["inject('nats_service",{"_index":171,"title":{},"body":{"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{}}}],["injectable",{"_index":64,"title":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"injectables/ProductWorker.html":{}},"body":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"injectables/ProductWorker.html":{},"coverage.html":{}}}],["injectables",{"_index":65,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"injectables/ProductWorker.html":{},"overview.html":{}}}],["injectconnection",{"_index":376,"title":{},"body":{"injectables/FilesService.html":{}}}],["installation",{"_index":672,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":675,"title":{},"body":{"index.html":{}}}],["interface",{"_index":479,"title":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"interfaces/deleteFileInterface.html":{}},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"coverage.html":{},"interfaces/deleteFileInterface.html":{}}}],["interfaces",{"_index":481,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"interfaces/deleteFileInterface.html":{},"overview.html":{}}}],["interfaces/deletefile.interface",{"_index":279,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["interfaces/fileinfo.interface",{"_index":381,"title":{},"body":{"injectables/FilesService.html":{}}}],["interfaces/fileresponse.interface",{"_index":276,"title":{},"body":{"controllers/FilesController.html":{}}}],["isglobal",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["item",{"_index":555,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["join",{"_index":702,"title":{},"body":{"index.html":{}}}],["jorgeferrero/stream",{"_index":118,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{},"dependencies.html":{}}}],["jpeg",{"_index":143,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["jpeg({quality:70",{"_index":152,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["json.stringify(medias",{"_index":179,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["kamil",{"_index":710,"title":{},"body":{"index.html":{}}}],["l'enfant",{"_index":332,"title":{},"body":{"controllers/FilesController.html":{}}}],["le",{"_index":323,"title":{},"body":{"controllers/FilesController.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"overview.html":{}}}],["length",{"_index":199,"title":{},"body":{"classes/FileInfoInterface.html":{},"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["les",{"_index":326,"title":{},"body":{"controllers/FilesController.html":{}}}],["license",{"_index":716,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":692,"title":{},"body":{"index.html":{}}}],["list",{"_index":544,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["listeners/filecreated.listener",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["listeners/filedeleted.listener",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["literal",{"_index":207,"title":{},"body":{"classes/FileInfoInterface.html":{}}}],["lts.1",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["matching",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{},"coverage.html":{},"interfaces/deleteFileInterface.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["md5",{"_index":496,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["media",{"_index":230,"title":{},"body":{"controllers/FilesController.html":{}}}],["medias",{"_index":172,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["message",{"_index":217,"title":{},"body":{"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"classes/FilesResponseInterface.html":{}}}],["metadata",{"_index":94,"title":{},"body":{"injectables/AvatarWorker.html":{},"classes/FileInfoInterface.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{},"dependencies.html":{}}}],["metadata.parent",{"_index":409,"title":{},"body":{"injectables/FilesService.html":{}}}],["methods",{"_index":71,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{}}}],["mimetype",{"_index":422,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["mini",{"_index":111,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["miscellaneous",{"_index":653,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":691,"title":{},"body":{"index.html":{}}}],["mode",{"_index":681,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":378,"title":{},"body":{"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"dependencies.html":{}}}],["mongogridfs",{"_index":375,"title":{"classes/MongoGridFS.html":{}},"body":{"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"coverage.html":{}}}],["mongogridfs(this.connection.db",{"_index":389,"title":{},"body":{"injectables/FilesService.html":{}}}],["mongogridfs.getdownloadpath(object",{"_index":526,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["mongoose",{"_index":379,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["mongoose.types.objectid(id",{"_index":410,"title":{},"body":{"injectables/FilesService.html":{}}}],["mongooseconnection",{"_index":380,"title":{},"body":{"injectables/FilesService.html":{}}}],["mongoosemodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoosemodule.forroot(process.env.mongo_dns",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":705,"title":{},"body":{"index.html":{}}}],["multer",{"_index":340,"title":{},"body":{"modules/FilesModule.html":{},"classes/GridFsMulterConfigService.html":{},"dependencies.html":{}}}],["multermodule",{"_index":338,"title":{},"body":{"modules/FilesModule.html":{}}}],["multermodule.registerasync",{"_index":342,"title":{},"body":{"modules/FilesModule.html":{}}}],["multermoduleoptions",{"_index":468,"title":{},"body":{"classes/GridFsMulterConfigService.html":{}}}],["multeroptionsfactory",{"_index":463,"title":{},"body":{"classes/GridFsMulterConfigService.html":{}}}],["myśliwiec",{"_index":711,"title":{},"body":{"index.html":{}}}],["name",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{}}}],["nats",{"_index":157,"title":{},"body":{"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"dependencies.html":{}}}],["nats://${process.env.nats_dns}:${process.env.nats_port",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["nats_service",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["nest",{"_index":668,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":715,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"injectables/ProductWorker.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["nestjs/event",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"controllers/FilesController.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"injectables/FilesService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":272,"title":{},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{},"classes/GridFsMulterConfigService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":298,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"coverage.html":{}}}],["node.js",{"_index":659,"title":{},"body":{"index.html":{}}}],["npm",{"_index":674,"title":{},"body":{"index.html":{}}}],["null",{"_index":146,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["number",{"_index":202,"title":{},"body":{"classes/FileInfoInterface.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["obj",{"_index":562,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["object",{"_index":519,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["object.filename",{"_index":516,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["objectid",{"_index":485,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["objectid(id",{"_index":536,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["objects",{"_index":547,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["occurred",{"_index":301,"title":{},"body":{"controllers/FilesController.html":{}}}],["on('error",{"_index":553,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["on('finish",{"_index":554,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["once('end",{"_index":529,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["once('error",{"_index":528,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["onevent",{"_index":165,"title":{},"body":{"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{}}}],["onevent('file.created",{"_index":162,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["onevent('file.deleted",{"_index":189,"title":{},"body":{"injectables/FileDeletedListener.html":{}}}],["open",{"_index":693,"title":{},"body":{"index.html":{}}}],["optional",{"_index":83,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"classes/FileInfoInterface.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{}}}],["options",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["options.aliases",{"_index":549,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["options.chunksizebytes",{"_index":550,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["options.contenttype",{"_index":551,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["options.filename",{"_index":511,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["options.metadata",{"_index":552,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["options.targetdir",{"_index":509,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["options.targetdir}/${options.filename",{"_index":515,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["origin",{"_index":224,"title":{},"body":{"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"classes/FilesResponseInterface.html":{},"classes/GridFsMulterConfigService.html":{}}}],["original_file_${date.now()}${path.extname(filename",{"_index":478,"title":{},"body":{"classes/GridFsMulterConfigService.html":{}}}],["originalname",{"_index":211,"title":{},"body":{"classes/FileInfoInterface.html":{},"injectables/FormatterUtil.html":{},"classes/GridFsMulterConfigService.html":{}}}],["originfile",{"_index":137,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["originfile].concat(response",{"_index":139,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["ostmpdir",{"_index":489,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["ostmpdir()}/${object._id",{"_index":513,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["ostmpdir()}/${options.filename",{"_index":512,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["out",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"overview.html":{}}}],["overview",{"_index":720,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":621,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":265,"title":{},"body":{"controllers/FilesController.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["parameters",{"_index":81,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{}}}],["parent",{"_index":95,"title":{},"body":{"injectables/AvatarWorker.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"classes/GridFsMulterConfigService.html":{},"injectables/ProductWorker.html":{}}}],["parentid",{"_index":90,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["parents",{"_index":324,"title":{},"body":{"controllers/FilesController.html":{}}}],["path",{"_index":371,"title":{},"body":{"injectables/FilesService.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["payload",{"_index":373,"title":{},"body":{"injectables/FilesService.html":{}}}],["personnaldata",{"_index":212,"title":{},"body":{"classes/FileInfoInterface.html":{}}}],["pipe(fs.createwritestream(downloadpath",{"_index":531,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["pipe(this.bucket.openuploadstream(options.filename",{"_index":548,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["please",{"_index":703,"title":{},"body":{"index.html":{}}}],["positionid",{"_index":222,"title":{},"body":{"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"classes/FilesResponseInterface.html":{}}}],["post",{"_index":264,"title":{},"body":{"controllers/FilesController.html":{}}}],["post('')@useinterceptors(undefined",{"_index":261,"title":{},"body":{"controllers/FilesController.html":{}}}],["prefix",{"_index":229,"title":{},"body":{"controllers/FilesController.html":{}}}],["private",{"_index":170,"title":{},"body":{"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["proceed",{"_index":75,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["proceed(event",{"_index":100,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["process.env.mongo_dns",{"_index":473,"title":{},"body":{"classes/GridFsMulterConfigService.html":{}}}],["product",{"_index":596,"title":{},"body":{"injectables/ProductWorker.html":{}}}],["production",{"_index":683,"title":{},"body":{"index.html":{}}}],["productworker",{"_index":19,"title":{"injectables/ProductWorker.html":{}},"body":{"modules/AppModule.html":{},"injectables/FileCreatedListener.html":{},"injectables/ProductWorker.html":{},"coverage.html":{},"overview.html":{}}}],["profil",{"_index":114,"title":{},"body":{"injectables/AvatarWorker.html":{}}}],["profile_pics",{"_index":176,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["progressive",{"_index":658,"title":{},"body":{"index.html":{}}}],["project",{"_index":694,"title":{},"body":{"index.html":{}}}],["promise",{"_index":107,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/FsUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{}}}],["promise((resolve",{"_index":448,"title":{},"body":{"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["promise(async",{"_index":527,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["promise.all",{"_index":128,"title":{},"body":{"injectables/AvatarWorker.html":{},"controllers/FilesController.html":{},"injectables/ProductWorker.html":{}}}],["properties",{"_index":68,"title":{"properties.html":{}},"body":{"injectables/AvatarWorker.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{},"interfaces/deleteFileInterface.html":{},"properties.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"overview.html":{}}}],["public",{"_index":502,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["que",{"_index":331,"title":{},"body":{"controllers/FilesController.html":{}}}],["read",{"_index":704,"title":{},"body":{"index.html":{}}}],["readable",{"_index":121,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["readable.from(buffer",{"_index":134,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["readdir",{"_index":438,"title":{},"body":{"injectables/FsUtil.html":{}}}],["readdir(dirname",{"_index":443,"title":{},"body":{"injectables/FsUtil.html":{}}}],["readfilestream",{"_index":571,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["readfilestream(id",{"_index":518,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["readonly",{"_index":385,"title":{},"body":{"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["readstream",{"_index":353,"title":{},"body":{"injectables/FilesService.html":{}}}],["readstream(id",{"_index":367,"title":{},"body":{"injectables/FilesService.html":{}}}],["reflect",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["reject",{"_index":449,"title":{},"body":{"injectables/FsUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["reject(err",{"_index":453,"title":{},"body":{"injectables/FsUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["reject(error",{"_index":458,"title":{},"body":{"injectables/FsUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["removedirectory",{"_index":439,"title":{},"body":{"injectables/FsUtil.html":{}}}],["removedirectory(name",{"_index":446,"title":{},"body":{"injectables/FsUtil.html":{}}}],["repository",{"_index":671,"title":{},"body":{"index.html":{}}}],["require('os",{"_index":490,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["require('unique",{"_index":493,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["res",{"_index":245,"title":{},"body":{"controllers/FilesController.html":{}}}],["res.header('content",{"_index":313,"title":{},"body":{"controllers/FilesController.html":{}}}],["reset",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"overview.html":{}}}],["resize",{"_index":86,"title":{},"body":{"injectables/AvatarWorker.html":{},"classes/FileInfoInterface.html":{},"injectables/ProductWorker.html":{}}}],["resize(resize.width",{"_index":151,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["resize.fit",{"_index":144,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["resize.height",{"_index":142,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["resize.name",{"_index":599,"title":{},"body":{"injectables/ProductWorker.html":{}}}],["resize.name}_${resize.width}x${resize.height",{"_index":145,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["resize.width",{"_index":141,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["resizeavatar",{"_index":76,"title":{},"body":{"injectables/AvatarWorker.html":{}}}],["resizeavatar(resize",{"_index":104,"title":{},"body":{"injectables/AvatarWorker.html":{}}}],["resized",{"_index":69,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["resizeevent",{"_index":589,"title":{},"body":{"injectables/ProductWorker.html":{}}}],["resizeevent(resize",{"_index":594,"title":{},"body":{"injectables/ProductWorker.html":{}}}],["resizes",{"_index":70,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["resolve",{"_index":477,"title":{},"body":{"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["resolve('created",{"_index":454,"title":{},"body":{"injectables/FsUtil.html":{}}}],["resolve(downloadpath",{"_index":530,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["resolve(filenames",{"_index":459,"title":{},"body":{"injectables/FsUtil.html":{}}}],["resolve(item",{"_index":556,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["response",{"_index":126,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["result",{"_index":288,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["result._id.tostring",{"_index":399,"title":{},"body":{"injectables/FilesService.html":{}}}],["result.chunksize",{"_index":402,"title":{},"body":{"injectables/FilesService.html":{}}}],["result.contenttype",{"_index":403,"title":{},"body":{"injectables/FilesService.html":{}}}],["result.filename",{"_index":400,"title":{},"body":{"injectables/FilesService.html":{}}}],["result.length",{"_index":401,"title":{},"body":{"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["result.metadata",{"_index":404,"title":{},"body":{"injectables/FilesService.html":{}}}],["result.shift",{"_index":290,"title":{},"body":{"controllers/FilesController.html":{}}}],["result[0",{"_index":543,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["results",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{},"coverage.html":{},"interfaces/deleteFileInterface.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retrieving",{"_index":302,"title":{},"body":{"controllers/FilesController.html":{}}}],["return",{"_index":132,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{}}}],["returns",{"_index":87,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{}}}],["rimraf",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":678,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":522,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["scalable",{"_index":663,"title":{},"body":{"index.html":{}}}],["server",{"_index":664,"title":{},"body":{"index.html":{}}}],["servers",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["sharp",{"_index":120,"title":{},"body":{"injectables/AvatarWorker.html":{},"classes/FileInfoInterface.html":{},"injectables/ProductWorker.html":{},"dependencies.html":{}}}],["sharp(await",{"_index":148,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["sharp.fitenum",{"_index":214,"title":{},"body":{"classes/FileInfoInterface.html":{}}}],["side",{"_index":665,"title":{},"body":{"index.html":{}}}],["single",{"_index":533,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["size",{"_index":424,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["source",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"classes/GridFsMulterConfigService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{},"interfaces/deleteFileInterface.html":{},"index.html":{}}}],["split",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["sponsors",{"_index":697,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":655,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["src/files/files.controller.ts",{"_index":228,"title":{},"body":{"controllers/FilesController.html":{},"coverage.html":{}}}],["src/files/files.controller.ts:112",{"_index":242,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/files/files.controller.ts:20",{"_index":262,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/files/files.controller.ts:42",{"_index":256,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/files/files.controller.ts:56",{"_index":259,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/files/files.controller.ts:77",{"_index":253,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/files/files.controller.ts:88",{"_index":250,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/files/files.controller.ts:99",{"_index":247,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/files/files.module.ts",{"_index":336,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/files/files.service",{"_index":116,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["src/files/files.service.ts",{"_index":348,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/files/files.service.ts:12",{"_index":358,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:19",{"_index":368,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:23",{"_index":374,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:27",{"_index":370,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:31",{"_index":364,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:47",{"_index":366,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:62",{"_index":362,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:71",{"_index":359,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/interfaces/deletefile.interface.ts",{"_index":606,"title":{},"body":{"coverage.html":{},"interfaces/deleteFileInterface.html":{}}}],["src/files/interfaces/fileinfo.interface",{"_index":167,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["src/files/interfaces/fileinfo.interface.ts",{"_index":195,"title":{},"body":{"classes/FileInfoInterface.html":{},"coverage.html":{}}}],["src/files/interfaces/fileinfo.interface.ts:10",{"_index":206,"title":{},"body":{"classes/FileInfoInterface.html":{}}}],["src/files/interfaces/fileinfo.interface.ts:13",{"_index":203,"title":{},"body":{"classes/FileInfoInterface.html":{}}}],["src/files/interfaces/fileinfo.interface.ts:16",{"_index":205,"title":{},"body":{"classes/FileInfoInterface.html":{}}}],["src/files/interfaces/fileinfo.interface.ts:19",{"_index":204,"title":{},"body":{"classes/FileInfoInterface.html":{}}}],["src/files/interfaces/fileinfo.interface.ts:22",{"_index":208,"title":{},"body":{"classes/FileInfoInterface.html":{}}}],["src/files/interfaces/fileinfo.interface.ts:7",{"_index":201,"title":{},"body":{"classes/FileInfoInterface.html":{}}}],["src/files/interfaces/fileresponse.interface.ts",{"_index":216,"title":{},"body":{"classes/FileResponseInterface.html":{},"classes/FilesResponseInterface.html":{},"coverage.html":{}}}],["src/files/interfaces/fileresponse.interface.ts:10",{"_index":347,"title":{},"body":{"classes/FilesResponseInterface.html":{}}}],["src/files/interfaces/fileresponse.interface.ts:11",{"_index":346,"title":{},"body":{"classes/FilesResponseInterface.html":{}}}],["src/files/interfaces/fileresponse.interface.ts:12",{"_index":344,"title":{},"body":{"classes/FilesResponseInterface.html":{}}}],["src/files/interfaces/fileresponse.interface.ts:4",{"_index":219,"title":{},"body":{"classes/FileResponseInterface.html":{}}}],["src/files/interfaces/fileresponse.interface.ts:5",{"_index":218,"title":{},"body":{"classes/FileResponseInterface.html":{}}}],["src/files/interfaces/fileresponse.interface.ts:9",{"_index":345,"title":{},"body":{"classes/FilesResponseInterface.html":{}}}],["src/files/multer",{"_index":460,"title":{},"body":{"classes/GridFsMulterConfigService.html":{},"coverage.html":{}}}],["src/listeners/filecreated.listener.ts",{"_index":154,"title":{},"body":{"injectables/FileCreatedListener.html":{},"coverage.html":{}}}],["src/listeners/filecreated.listener.ts:11",{"_index":159,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["src/listeners/filecreated.listener.ts:21",{"_index":163,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["src/listeners/filedeleted.listener.ts",{"_index":184,"title":{},"body":{"injectables/FileDeletedListener.html":{},"coverage.html":{}}}],["src/listeners/filedeleted.listener.ts:13",{"_index":190,"title":{},"body":{"injectables/FileDeletedListener.html":{}}}],["src/listeners/filedeleted.listener.ts:6",{"_index":187,"title":{},"body":{"injectables/FileDeletedListener.html":{}}}],["src/main.ts",{"_index":611,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/formatter.util",{"_index":278,"title":{},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{}}}],["src/utils/formatter.util.ts",{"_index":416,"title":{},"body":{"injectables/FormatterUtil.html":{},"coverage.html":{}}}],["src/utils/formatter.util.ts:5",{"_index":418,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["src/utils/formatter.util.ts:9",{"_index":420,"title":{},"body":{"injectables/FormatterUtil.html":{}}}],["src/utils/fs.util.ts",{"_index":436,"title":{},"body":{"injectables/FsUtil.html":{},"coverage.html":{}}}],["src/utils/fs.util.ts:23",{"_index":447,"title":{},"body":{"injectables/FsUtil.html":{}}}],["src/utils/fs.util.ts:27",{"_index":444,"title":{},"body":{"injectables/FsUtil.html":{}}}],["src/utils/fs.util.ts:5",{"_index":440,"title":{},"body":{"injectables/FsUtil.html":{}}}],["src/utils/fs.util.ts:9",{"_index":442,"title":{},"body":{"injectables/FsUtil.html":{}}}],["src/utils/mongo",{"_index":482,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"coverage.html":{}}}],["src/workers/avatar.worker",{"_index":168,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["src/workers/avatar.worker.ts",{"_index":66,"title":{},"body":{"injectables/AvatarWorker.html":{},"coverage.html":{}}}],["src/workers/avatar.worker.ts:11",{"_index":115,"title":{},"body":{"injectables/AvatarWorker.html":{}}}],["src/workers/avatar.worker.ts:26",{"_index":80,"title":{},"body":{"injectables/AvatarWorker.html":{}}}],["src/workers/avatar.worker.ts:30",{"_index":101,"title":{},"body":{"injectables/AvatarWorker.html":{}}}],["src/workers/avatar.worker.ts:51",{"_index":91,"title":{},"body":{"injectables/AvatarWorker.html":{}}}],["src/workers/avatar.worker.ts:66",{"_index":85,"title":{},"body":{"injectables/AvatarWorker.html":{}}}],["src/workers/avatar.worker.ts:70",{"_index":106,"title":{},"body":{"injectables/AvatarWorker.html":{}}}],["src/workers/product.worker",{"_index":169,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["src/workers/product.worker.ts",{"_index":588,"title":{},"body":{"injectables/ProductWorker.html":{},"coverage.html":{}}}],["src/workers/product.worker.ts:11",{"_index":597,"title":{},"body":{"injectables/ProductWorker.html":{}}}],["src/workers/product.worker.ts:26",{"_index":590,"title":{},"body":{"injectables/ProductWorker.html":{}}}],["src/workers/product.worker.ts:30",{"_index":593,"title":{},"body":{"injectables/ProductWorker.html":{}}}],["src/workers/product.worker.ts:51",{"_index":592,"title":{},"body":{"injectables/ProductWorker.html":{}}}],["src/workers/product.worker.ts:67",{"_index":591,"title":{},"body":{"injectables/ProductWorker.html":{}}}],["src/workers/product.worker.ts:71",{"_index":595,"title":{},"body":{"injectables/ProductWorker.html":{}}}],["start",{"_index":679,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":682,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":684,"title":{},"body":{"index.html":{}}}],["started",{"_index":657,"title":{"index.html":{}},"body":{}}],["starter",{"_index":670,"title":{},"body":{"index.html":{}}}],["statements",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":506,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["stay",{"_index":707,"title":{},"body":{"index.html":{}}}],["storage",{"_index":470,"title":{},"body":{"classes/GridFsMulterConfigService.html":{},"dependencies.html":{}}}],["stream",{"_index":122,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{},"dependencies.html":{}}}],["streamtobuffer",{"_index":117,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["streamtobuffer(await",{"_index":149,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["string",{"_index":88,"title":{},"body":{"injectables/AvatarWorker.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"injectables/FsUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{},"interfaces/deleteFileInterface.html":{}}}],["string,parentid",{"_index":140,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["support",{"_index":698,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supprimer",{"_index":322,"title":{},"body":{"controllers/FilesController.html":{}}}],["svg",{"_index":718,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":173,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["table",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":620,"title":{},"body":{"interfaces/deleteFileInterface.html":{}}}],["targetdir",{"_index":484,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["targetid",{"_index":180,"title":{},"body":{"injectables/FileCreatedListener.html":{},"interfaces/deleteFileInterface.html":{}}}],["test",{"_index":687,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":690,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":689,"title":{},"body":{"index.html":{}}}],["tests",{"_index":686,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":696,"title":{},"body":{"index.html":{}}}],["then(result",{"_index":398,"title":{},"body":{"injectables/FilesService.html":{}}}],["then(trydeletefile",{"_index":565,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["this.avatarworker.proceed(event",{"_index":177,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["this.bucket.delete(new",{"_index":568,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["this.bucket.find(filter).toarray",{"_index":546,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["this.bucket.opendownloadstream(object._id",{"_index":521,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["this.bucketname",{"_index":505,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["this.eventemitter.emit('file.created",{"_index":292,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.eventemitter.emit('file.deleted",{"_index":333,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.eventemitter.emitasync('file.created",{"_index":289,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filemodel",{"_index":388,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filemodel.delete(child._id",{"_index":413,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filemodel.delete(id",{"_index":414,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filemodel.find",{"_index":408,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filemodel.readfilestream(id",{"_index":391,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filemodel.uploadfile(path",{"_index":393,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filemodel.writefilestream(stream",{"_index":392,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filesservice.deletefile(id",{"_index":329,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.findchildfilesfromparent(file.metadata.parent",{"_index":309,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.findchildfilesfromparent(id",{"_index":307,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.findinfo(event.file.id",{"_index":138,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["this.filesservice.findinfo(file.metadata.parent",{"_index":308,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.findinfo(id",{"_index":294,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.findinfobyfilename(name",{"_index":311,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.readstream(file._id",{"_index":312,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.readstream(fileid",{"_index":150,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["this.filesservice.readstream(id",{"_index":296,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.writefilestream",{"_index":133,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["this.find(filter",{"_index":540,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["this.findbyid(id",{"_index":520,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["this.findchildfilesfromparent(id",{"_index":412,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.findone",{"_index":535,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["this.formatterutil.getorigin(file",{"_index":291,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.getfilename(resize",{"_index":136,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["this.getpayload",{"_index":135,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["this.gridfsstorage",{"_index":471,"title":{},"body":{"classes/GridFsMulterConfigService.html":{}}}],["this.nats.emit(event.body.target",{"_index":178,"title":{},"body":{"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{}}}],["this.productworker.proceed(event",{"_index":183,"title":{},"body":{"injectables/FileCreatedListener.html":{}}}],["this.resizeavatar(resize",{"_index":130,"title":{},"body":{"injectables/AvatarWorker.html":{}}}],["this.resized",{"_index":124,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["this.resizeevent(resize",{"_index":598,"title":{},"body":{"injectables/ProductWorker.html":{}}}],["this.resizes.map(async",{"_index":129,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["this.writefilestream(fs.createreadstream(uploadfilepath",{"_index":564,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["throw",{"_index":297,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["tmpdir",{"_index":491,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["tobuffer",{"_index":153,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/ProductWorker.html":{}}}],["touch",{"_index":708,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":209,"title":{},"body":{"classes/FileInfoInterface.html":{},"dependencies.html":{}}}],["transport",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["transport.nats",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["try",{"_index":407,"title":{},"body":{"injectables/FilesService.html":{}}}],["trydeletefile",{"_index":561,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["ts",{"_index":386,"title":{},"body":{"injectables/FilesService.html":{}}}],["twitter",{"_index":714,"title":{},"body":{"index.html":{}}}],["type",{"_index":82,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FileCreatedListener.html":{},"injectables/FileDeletedListener.html":{},"classes/FileInfoInterface.html":{},"classes/FileResponseInterface.html":{},"controllers/FilesController.html":{},"classes/FilesResponseInterface.html":{},"injectables/FilesService.html":{},"injectables/FormatterUtil.html":{},"injectables/FsUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{},"coverage.html":{},"interfaces/deleteFileInterface.html":{}}}],["typeof",{"_index":510,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["types/multer",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":669,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":497,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["unique",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["uniquefilename",{"_index":492,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["uniquefilename(options.targetdir",{"_index":517,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["uniquefilename(ostmpdir",{"_index":514,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["unit",{"_index":685,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":103,"title":{},"body":{"injectables/AvatarWorker.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/ProductWorker.html":{}}}],["unlicensed",{"_index":728,"title":{},"body":{"properties.html":{}}}],["upload",{"_index":237,"title":{},"body":{"controllers/FilesController.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["upload(@uploadedfiles",{"_index":283,"title":{},"body":{"controllers/FilesController.html":{}}}],["upload(files",{"_index":260,"title":{},"body":{"controllers/FilesController.html":{}}}],["uploaddate",{"_index":425,"title":{},"body":{"injectables/FormatterUtil.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["uploadedfiles",{"_index":267,"title":{},"body":{"controllers/FilesController.html":{}}}],["uploadfile",{"_index":354,"title":{},"body":{"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["uploadfile(path",{"_index":369,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadfile(uploadfilepath",{"_index":583,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["uploadfilepath",{"_index":558,"title":{},"body":{"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["url",{"_index":472,"title":{},"body":{"classes/GridFsMulterConfigService.html":{}}}],["useclass",{"_index":343,"title":{},"body":{"modules/FilesModule.html":{}}}],["useinterceptors",{"_index":266,"title":{},"body":{"controllers/FilesController.html":{}}}],["useinterceptors(filesinterceptor('file",{"_index":282,"title":{},"body":{"controllers/FilesController.html":{}}}],["utils/fs.util",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/mongo",{"_index":382,"title":{},"body":{"injectables/FilesService.html":{}}}],["value",{"_index":109,"title":{},"body":{"injectables/AvatarWorker.html":{},"injectables/FilesService.html":{},"classes/MongoGridFS.html":{},"injectables/ProductWorker.html":{}}}],["version",{"_index":726,"title":{},"body":{"properties.html":{}}}],["void",{"_index":191,"title":{},"body":{"injectables/FileDeletedListener.html":{},"injectables/FsUtil.html":{}}}],["watch",{"_index":680,"title":{},"body":{"index.html":{}}}],["webpack",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["website",{"_index":712,"title":{},"body":{"index.html":{}}}],["width",{"_index":96,"title":{},"body":{"injectables/AvatarWorker.html":{},"classes/FileInfoInterface.html":{},"injectables/ProductWorker.html":{}}}],["workers/avatar.worker",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["workers/product.worker",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["writefilestream",{"_index":355,"title":{},"body":{"injectables/FilesService.html":{},"classes/MongoGridFS.html":{}}}],["writefilestream(stream",{"_index":372,"title":{},"body":{"injectables/FilesService.html":{},"interfaces/IDownloadOptions.html":{},"interfaces/IGridFSObject.html":{},"interfaces/IGridFSWriteOption.html":{},"classes/MongoGridFS.html":{}}}],["yes",{"_index":577,"title":{},"body":{"classes/MongoGridFS.html":{}}}],["you'd",{"_index":701,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nFilesModule\n\nFilesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nAvatarWorker\n\nAvatarWorker\n\nAppModule -->\n\nAvatarWorker->AppModule\n\n\n\n\n\nFileCreatedListener\n\nFileCreatedListener\n\nAppModule -->\n\nFileCreatedListener->AppModule\n\n\n\n\n\nFileDeletedListener\n\nFileDeletedListener\n\nAppModule -->\n\nFileDeletedListener->AppModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nAppModule -->\n\nFilesService->AppModule\n\n\n\n\n\nFsUtil\n\nFsUtil\n\nAppModule -->\n\nFsUtil->AppModule\n\n\n\n\n\nProductWorker\n\nProductWorker\n\nAppModule -->\n\nProductWorker->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AvatarWorker\n                        \n                        \n                            FileCreatedListener\n                        \n                        \n                            FileDeletedListener\n                        \n                        \n                            FilesService\n                        \n                        \n                            FsUtil\n                        \n                        \n                            ProductWorker\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { FilesModule } from './files/files.module';\nimport { FilesService } from './files/files.service';\nimport { FileCreatedListener } from './listeners/fileCreated.listener';\nimport { FsUtil } from './utils/fs.util';\nimport { AvatarWorker } from './workers/avatar.worker';\nimport { ProductWorker } from './workers/product.worker';\nimport { FileDeletedListener } from './listeners/fileDeleted.listener';\n\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true\n    }),\n    ClientsModule.register([\n      {\n        name: 'NATS_SERVICE', transport: Transport.NATS,\n        options: {\n          servers: [`nats://${process.env.NATS_DNS}:${process.env.NATS_PORT}`],\n        }\n      },\n    ]),\n    EventEmitterModule.forRoot(),\n    MongooseModule.forRoot(process.env.MONGO_DNS),\n    FilesModule,\n\n  ],\n  controllers: [],\n  providers: [FileCreatedListener, FileDeletedListener, AvatarWorker, ProductWorker, FilesService,  FsUtil],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AvatarWorker.html":{"url":"injectables/AvatarWorker.html","title":"injectable - AvatarWorker","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AvatarWorker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workers/avatar.worker.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                resized\n                            \n                            \n                                resizes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getFilename\n                            \n                            \n                                getPayload\n                            \n                            \n                                    Async\n                                proceed\n                            \n                            \n                                    Async\n                                resizeAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/workers/avatar.worker.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getFilename\n                        \n                    \n                \n            \n            \n                \ngetFilename(resize: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workers/avatar.worker.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resize\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPayload\n                        \n                    \n                \n            \n            \n                \ngetPayload(filenameResize: string, parentId: string, resize: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workers/avatar.worker.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filenameResize\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                parentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resize\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { filename: string; metadata: { parent: string; resize: { width: any; height: any; format: string; fit: any; }; }; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        proceed\n                        \n                    \n                \n            \n            \n                \n                        \n                    proceed(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workers/avatar.worker.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resizeAvatar\n                        \n                    \n                \n            \n            \n                \n                        \n                    resizeAvatar(resize: any, fileId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workers/avatar.worker.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resize\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        resized\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/workers/avatar.worker.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resizes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n        { \n            width: 40, \n            height: 40,\n            name: \"mini\",\n            fit: 'cover',\n        },\n        {\n            width: 150,\n            height: 150,\n            name: \"profil\",\n            fit: 'cover',\n        }\n    ]\n                    \n                \n                    \n                        \n                                Defined in src/workers/avatar.worker.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { FilesService } from 'src/files/files.service';\nimport { streamToBuffer } from '@jorgeferrero/stream-to-buffer';\nimport * as sharp from 'sharp';\nimport { Readable } from 'stream';\n\n\n@Injectable()\nexport class AvatarWorker {\n\n    resizes = [\n        { \n            width: 40, \n            height: 40,\n            name: \"mini\",\n            fit: 'cover',\n        },\n        {\n            width: 150,\n            height: 150,\n            name: \"profil\",\n            fit: 'cover',\n        }\n    ]\n\n    resized = [];\n\n    constructor(private filesService: FilesService) { }\n\n    async proceed(event: any) {\n        this.resized = [];\n        const response = await Promise.all(\n            this.resizes.map(async (resize) => {\n                const buffer = await this.resizeAvatar(resize, event.file.id);\n                return await this.filesService.writeFileStream(\n                    Readable.from(buffer),\n                    this.getPayload(\n                        this.getFilename(resize),\n                        event.file.id,\n                        resize\n                    )\n                );\n            })\n        )\n\n        const originFile = await this.filesService.findInfo(event.file.id);\n        return [originFile].concat(response as any[]);\n    }\n\n\n    getPayload(filenameResize: string,parentId: string, resize: any ) {\n        return {\n            filename: filenameResize,\n            metadata: {\n                parent: parentId,\n                resize: {\n                    width: resize.width,\n                    height: resize.height,\n                    format: 'jpeg',\n                    fit: resize.fit\n                }\n            }\n        };\n    }\n\n    getFilename(resize: any): string {\n        return `${resize.name}_${resize.width}x${resize.height != null ? resize.height : 'auto'}_${Date.now()}.jpeg`;\n    }\n\n    async resizeAvatar(resize: any, fileId: string): Promise {\n        return await sharp(await streamToBuffer(await this.filesService.readStream(fileId)))\n            .resize(resize.width, resize.height, {\n                fit: resize.fit\n            })\n            .jpeg({quality:70 })\n            .toBuffer();\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileCreatedListener.html":{"url":"injectables/FileCreatedListener.html","title":"injectable - FileCreatedListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileCreatedListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/listeners/fileCreated.listener.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handlefileCreatedEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(avatarWorker: AvatarWorker, productWorker: ProductWorker, nats: ClientProxy)\n                    \n                \n                        \n                            \n                                Defined in src/listeners/fileCreated.listener.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        avatarWorker\n                                                  \n                                                        \n                                                                        AvatarWorker\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productWorker\n                                                  \n                                                        \n                                                                        ProductWorker\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nats\n                                                  \n                                                        \n                                                                    ClientProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handlefileCreatedEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handlefileCreatedEvent(event: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('file.created')\n                \n            \n\n                    \n                        \n                            Defined in src/listeners/fileCreated.listener.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { FileInfoInterface } from 'src/files/interfaces/fileInfo.interface';\nimport { AvatarWorker } from 'src/workers/avatar.worker';\nimport { ProductWorker } from 'src/workers/product.worker';\n\n\n\n@Injectable()\nexport class FileCreatedListener {\n    constructor(\n        private avatarWorker: AvatarWorker,\n        private productWorker: ProductWorker,\n\n        @Inject('NATS_SERVICE')\n        private nats: ClientProxy,\n    ) { }\n\n    @OnEvent('file.created')\n    async handlefileCreatedEvent(event: any): Promise {\n        let medias: FileInfoInterface[];\n        switch (event.body.target) {\n            case 'PROFILE_PICS':\n                medias = await this.avatarWorker.proceed(event);\n                this.nats.emit(event.body.target, { medias: JSON.stringify(medias), targetId: event.body.targetId });\n                return medias;\n            case 'EVENT_PICS':\n                medias = await this.productWorker.proceed(event);\n                this.nats.emit(event.body.target, { medias: JSON.stringify(medias), targetId: event.body.targetId });\n                return medias;\n        }\n\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileDeletedListener.html":{"url":"injectables/FileDeletedListener.html","title":"injectable - FileDeletedListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileDeletedListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/listeners/fileDeleted.listener.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handlefileDeletedEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(nats: ClientProxy)\n                    \n                \n                        \n                            \n                                Defined in src/listeners/fileDeleted.listener.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        nats\n                                                  \n                                                        \n                                                                    ClientProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handlefileDeletedEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handlefileDeletedEvent(event: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('file.deleted')\n                \n            \n\n                    \n                        \n                            Defined in src/listeners/fileDeleted.listener.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { ClientProxy } from '@nestjs/microservices';\n\n@Injectable()\nexport class FileDeletedListener {\n  constructor(\n    @Inject('NATS_SERVICE')\n    private nats: ClientProxy,\n  ) {}\n\n  @OnEvent('file.deleted')\n  handlefileDeletedEvent(event: any ): void {\n    console.log(\"🚀 ~ file: fileDeleted.listener.ts:14 ~ FileDeletedListener ~ handlefileDeletedEvent ~ event\", event)\n    this.nats.emit(event.body.target, event);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileInfoInterface.html":{"url":"classes/FileInfoInterface.html","title":"class - FileInfoInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileInfoInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/interfaces/fileInfo.interface.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                _id\n                            \n                            \n                                    \n                                chunkSize\n                            \n                            \n                                    \n                                contentType\n                            \n                            \n                                    \n                                filename\n                            \n                            \n                                    \n                                length\n                            \n                            \n                                    \n                                metadata\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/interfaces/fileInfo.interface.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        chunkSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/interfaces/fileInfo.interface.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/interfaces/fileInfo.interface.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/interfaces/fileInfo.interface.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        length\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/interfaces/fileInfo.interface.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/interfaces/fileInfo.interface.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Expose } from 'class-transformer';\nimport sharp from 'sharp';\n\nexport class FileInfoInterface {\n\n    @Expose()\n    _id?: string;\n\n    @Expose()\n    length: number;\n\n    @Expose()\n    chunkSize: number;\n\n    @Expose()\n    filename: string;\n\n    @Expose()\n    contentType: string;\n\n    @Expose()\n    metadata: { \n            source?: 'ext';\n            parent?: string;\n            originalname?: string;\n            personnalData?: boolean;\n            resize?: {\n                width: number;\n                height: number;\n                format: string;\n                fit: sharp.FitEnum;\n            }\n\n\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseInterface.html":{"url":"classes/FileResponseInterface.html","title":"class - FileResponseInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/interfaces/fileResponse.interface.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileInfoInterface\n\n                    \n                \n                    \n                        \n                                Defined in src/files/interfaces/fileResponse.interface.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/interfaces/fileResponse.interface.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FileInfoInterface } from \"./fileInfo.interface\";\n\nexport class FileResponseInterface {\n    message: string;   \n    file: FileInfoInterface;\n}\n\nexport class FilesResponseInterface {\n    message: string;\n    positionId: 'parent' | 'child';\n    origin: FileInfoInterface;\n    childs: FileInfoInterface[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesController.html":{"url":"controllers/FilesController.html","title":"controller - FilesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /media\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deleteFile\n                            \n                            \n                                    \n                                    Async\n                                downloadFile\n                            \n                            \n                                    \n                                    Async\n                                getFile\n                            \n                            \n                                    \n                                    Async\n                                getFileByFilename\n                            \n                            \n                                    \n                                    Async\n                                getFileInfo\n                            \n                            \n                                    \n                                    Async\n                                getlistFrom\n                            \n                            \n                                    \n                                    \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(id: string, body: deleteFileInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/files/files.controller.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            deleteFileInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        downloadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    downloadFile(id: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('download/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/files/files.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFile(id: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/files/files.controller.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getFileByFilename\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileByFilename(name: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filename/:name')\n                \n            \n\n                    \n                        \n                            Defined in src/files/files.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getFileInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileInfo(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('info/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/files/files.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getlistFrom\n                        \n                    \n                \n            \n            \n                \n                        \n                    getlistFrom(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('listFrom/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/files/files.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(files, body: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/files/files.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Post, Get, Param, Res, Controller, UseInterceptors, UploadedFiles, HttpException, HttpStatus, Body, Delete } from '@nestjs/common';\nimport { FilesInterceptor } from '@nestjs/platform-express';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { FilesService } from './files.service';\nimport { FileResponseInterface, FilesResponseInterface } from './interfaces/fileResponse.interface';\nimport { FormatterUtil } from 'src/utils/formatter.util';\nimport { deleteFileInterface } from './interfaces/deleteFile.interface';\n\n\n@Controller('/media')\nexport class FilesController {\n    constructor(\n        private filesService: FilesService,\n        private eventEmitter: EventEmitter2,\n        private formatterUtil: FormatterUtil\n    ) { }\n\n    @Post('')\n    @UseInterceptors(FilesInterceptor('file'))\n    async upload(@UploadedFiles() files, @Body() body: any) {\n\n        return await Promise.all(\n            files.map(async (file: any) => {\n                console.log(\"🚀 ~ file: files.controller.ts:37 ~ FilesController ~ files.map ~ file\", file)\n                if (body.lowProcess && body.lowProcess == \"true\") {\n                    const [result] = await this.eventEmitter.emitAsync('file.created', { body, file });\n                    \n                    result.shift();\n                    return {\n                        origin: this.formatterUtil.getOrigin(file),\n                        childs: result\n                    }\n                }\n                this.eventEmitter.emit('file.created', { body, file });\n                return this.formatterUtil.getOrigin(file)\n\n            })\n        )\n    }\n\n    @Get('info/:id')\n    async getFileInfo(@Param('id') id: string): Promise {\n        const file = await this.filesService.findInfo(id)\n        const filestream = await this.filesService.readStream(id)\n        if (!filestream) {\n            throw new HttpException('An error occurred while retrieving file info', HttpStatus.EXPECTATION_FAILED)\n        }\n        return {\n            message: 'File has been detected',\n            file: file\n        }\n    }\n\n\n    @Get('listFrom/:id')\n    async getlistFrom(@Param('id') id: string): Promise {\n        const file = await this.filesService.findInfo(id)\n        if (!file) throw new HttpException('An error occurred while retrieving file info', HttpStatus.EXPECTATION_FAILED)\n        if (file.metadata.parent === 'origin') {\n            const results = await this.filesService.findChildFilesFromParent(id)\n            return {\n                message: 'Files has been detected',\n                positionId: 'parent',\n                origin: file,\n                childs: results\n            }\n        }\n        return {\n            message: 'Files has been detected',\n            positionId: 'child',\n            origin: await this.filesService.findInfo(file.metadata.parent),\n            childs: await this.filesService.findChildFilesFromParent(file.metadata.parent)\n        }\n    }\n\n    @Get('filename/:name')\n    async getFileByFilename(@Param('name') name: string, @Res() res) {\n        const file = await this.filesService.findInfoByFileName(name)\n        const filestream = await this.filesService.readStream(file._id)\n        if (!filestream) {\n            throw new HttpException('An error occurred while retrieving file', HttpStatus.EXPECTATION_FAILED)\n        }\n        res.header('Content-Type', file.contentType);\n        return filestream.pipe(res)\n    }\n\n    @Get(':id')\n    async getFile(@Param('id') id: string, @Res() res) {\n        const file = await this.filesService.findInfo(id)\n        const filestream = await this.filesService.readStream(id)\n        if (!filestream) {\n            throw new HttpException('An error occurred while retrieving file', HttpStatus.EXPECTATION_FAILED)\n        }\n        res.header('Content-Type', file.contentType);\n        return filestream.pipe(res)\n    }\n\n    @Get('download/:id')\n    async downloadFile(@Param('id') id: string, @Res() res) {\n        const file = await this.filesService.findInfo(id)\n        const filestream = await this.filesService.readStream(id)\n\n        if (!filestream) {\n            throw new HttpException('An error occurred while retrieving file', HttpStatus.EXPECTATION_FAILED)\n        }\n        res.header('Content-Type', file.contentType);\n        res.header('Content-Disposition', 'attachment; filename=' + file.filename);\n        return filestream.pipe(res)\n    }\n\n    @Delete('/:id')\n    async deleteFile(@Param('id') id: string, @Body() body: deleteFileInterface): Promise {\n\n        const file = await this.filesService.findInfo(id)\n        \n        //if parent > supprimer le parents et les enfants\n        if (file.metadata.parent == \"origin\"){\n            let deleted = await this.filesService.deleteFile(id, true)\n        } else {\n            //if enfant > supprimer que l'enfant\n            let deleted = await this.filesService.deleteFile(id)\n\n        }\n        this.eventEmitter.emit('file.deleted', { id, body, parent: file.metadata.parent })\n        \n        return {\n            message: 'File has been deleted',\n            file: file\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\n\nFilesService\n\nFilesService\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nFormatterUtil\n\nFormatterUtil\n\nFilesModule -->\n\nFormatterUtil->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                        \n                            FormatterUtil\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FilesController } from './files.controller';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { GridFsMulterConfigService } from './multer-config.service';\nimport { FilesService } from './files.service'\nimport { FormatterUtil } from 'src/utils/formatter.util';\n\n@Module({\n    imports: [\n        MulterModule.registerAsync({\n            useClass: GridFsMulterConfigService,\n        })\n    ],\n    controllers: [FilesController],\n    providers: [GridFsMulterConfigService, FilesService, FormatterUtil],\n})\nexport class FilesModule { }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesResponseInterface.html":{"url":"classes/FilesResponseInterface.html","title":"class - FilesResponseInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesResponseInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/interfaces/fileResponse.interface.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                childs\n                            \n                            \n                                message\n                            \n                            \n                                origin\n                            \n                            \n                                positionId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        childs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileInfoInterface[]\n\n                    \n                \n                    \n                        \n                                Defined in src/files/interfaces/fileResponse.interface.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/interfaces/fileResponse.interface.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileInfoInterface\n\n                    \n                \n                    \n                        \n                                Defined in src/files/interfaces/fileResponse.interface.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        positionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"parent\" | \"child\"\n\n                    \n                \n                    \n                        \n                                Defined in src/files/interfaces/fileResponse.interface.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FileInfoInterface } from \"./fileInfo.interface\";\n\nexport class FileResponseInterface {\n    message: string;   \n    file: FileInfoInterface;\n}\n\nexport class FilesResponseInterface {\n    message: string;\n    positionId: 'parent' | 'child';\n    origin: FileInfoInterface;\n    childs: FileInfoInterface[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fileModel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                findChildFilesFromParent\n                            \n                            \n                                    Async\n                                findInfo\n                            \n                            \n                                    Async\n                                findInfoByFileName\n                            \n                            \n                                    Async\n                                readStream\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                            \n                                    Async\n                                writeFileStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in src/files/files.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(id: string, parent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/files.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                parent\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findChildFilesFromParent\n                        \n                    \n                \n            \n            \n                \n                        \n                    findChildFilesFromParent(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/files.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    findInfo(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/files.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findInfoByFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findInfoByFileName(filename: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/files.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        readStream\n                        \n                    \n                \n            \n            \n                \n                        \n                    readStream(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/files.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(path: string, options: any, deleteFile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/files.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                deleteFile\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        writeFileStream\n                        \n                    \n                \n            \n            \n                \n                        \n                    writeFileStream(stream, payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/files.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                stream\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fileModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MongoGridFS\n\n                    \n                \n                    \n                        \n                                Defined in src/files/files.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { InjectConnection } from '@nestjs/mongoose';\n\nimport { GridFSBucketReadStream } from 'mongodb';\nimport mongoose, { Connection, connection as mongooseConnection } from 'mongoose';\nimport { FileInfoInterface } from './interfaces/fileInfo.interface';\nimport { MongoGridFS } from \"../utils/mongo-gridfs.util\";\nimport { deleteFileInterface } from './interfaces/deleteFile.interface';\n\n@Injectable()\nexport class FilesService {\n    private fileModel: MongoGridFS;\n\n    constructor(@InjectConnection() private readonly connection: Connection) {\n        // @ts-ignore\n        this.fileModel = new MongoGridFS(this.connection.db, 'fs');\n    }\n\n    async readStream(id: string): Promise {\n        // @ts-ignore\n        return await this.fileModel.readFileStream(id);\n    }\n    async writeFileStream(stream, payload) {\n        return await this.fileModel.writeFileStream(stream, payload)\n    }\n\n    async uploadFile(path: string, options: any, deleteFile = true) {\n        return this.fileModel.uploadFile(path, options, deleteFile);\n    }\n\n    async findInfo(id: string): Promise {\n        const result = await this.fileModel\n            .findById(id).catch(err => { throw new HttpException('File not found', HttpStatus.NOT_FOUND) })\n            .then(result => result)\n\n        return {\n            _id: result._id.toString(),\n            filename: result.filename,\n            length: result.length,\n            chunkSize: result.chunkSize,\n            contentType: result.contentType,\n            metadata: result.metadata\n        }\n    }\n\n\n    async findInfoByFileName(filename: string): Promise {\n        const result = await this.fileModel\n            .findOne({ filename }).catch(err => { throw new HttpException('File not found', HttpStatus.NOT_FOUND) })\n            .then(result => result)\n\n        return {\n            _id: result._id.toString(),\n            filename: result.filename,\n            length: result.length,\n            chunkSize: result.chunkSize,\n            contentType: result.contentType,\n            metadata: result.metadata\n        }\n    }\n\n    async findChildFilesFromParent(id: string): Promise {\n        try {\n            return await this.fileModel.find({ 'metadata.parent': new mongoose.Types.ObjectId(id) })\n        } catch (error) {\n            throw new HttpException('File not found', HttpStatus.NOT_FOUND)\n\n        }\n    }\n\n    async deleteFile(id: string, parent = false): Promise {\n        try {\n            if (parent == true ) {\n                const childs = await this.findChildFilesFromParent(id);\n                for (const child of childs) {\n                    this.fileModel.delete(child._id as string)\n                }\n            }\n            await this.fileModel.delete(id)\n            return true\n        } catch (error) {\n            console.log(error)\n            throw new HttpException('File not found', HttpStatus.NOT_FOUND)\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FormatterUtil.html":{"url":"injectables/FormatterUtil.html","title":"injectable - FormatterUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FormatterUtil\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/formatter.util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getOrigin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/utils/formatter.util.ts:5\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getOrigin\n                        \n                    \n                \n            \n            \n                \ngetOrigin(file: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/formatter.util.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { originalname: any; encoding: any; mimetype: any; id: any; filename: any; metadata: any; bucketName: any; chunkSize: any; size: any; uploadDate: any; contentType: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n\n@Injectable()\nexport class FormatterUtil {\n    constructor() {}\n\n\n    getOrigin(file:any) {\n        return {\n            originalname: file.originalname,\n            encoding: file.encoding,\n            mimetype: file.mimetype,\n            id: file.id,\n            filename: file.filename,\n            metadata: file.metadata,\n            bucketName: file.bucketName,\n            chunkSize: file.chunkSize,\n            size: file.size,\n            uploadDate: file.uploadDate,\n            contentType: file.contentType,\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FsUtil.html":{"url":"injectables/FsUtil.html","title":"injectable - FsUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FsUtil\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/fs.util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createDirectory\n                            \n                            \n                                    Async\n                                readdir\n                            \n                            \n                                removeDirectory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/utils/fs.util.ts:5\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createDirectory\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDirectory(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/fs.util.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        readdir\n                        \n                    \n                \n            \n            \n                \n                        \n                    readdir(dirname: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/fs.util.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dirname\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeDirectory\n                        \n                    \n                \n            \n            \n                \nremoveDirectory(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/fs.util.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as fs from 'fs';\n\n@Injectable()\nexport class FsUtil {\n    constructor() { }\n\n\n    async createDirectory(name: string): Promise {\n        await new Promise((resolve, reject) => {\n            if (!fs.existsSync(`files/${name}`)) {\n                fs.mkdir(`files/${name}`, (err) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    resolve('created');\n                });\n            }\n\n        });\n    }\n\n    removeDirectory(name: string): void {\n        fs.rmdirSync(`files/${name}`)\n    }\n\n    async readdir(dirname: string): Promise {\n        return new Promise((resolve, reject) => {\n            fs.readdir(dirname, (error, filenames) => {\n                if (error) {\n                    reject(error);\n                } else {\n                    resolve(filenames);\n                }\n            });\n        });\n    };\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GridFsMulterConfigService.html":{"url":"classes/GridFsMulterConfigService.html","title":"class - GridFsMulterConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GridFsMulterConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/multer-config.service.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MulterOptionsFactory\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                gridFsStorage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMulterOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/files/multer-config.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        gridFsStorage\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/files/multer-config.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMulterOptions\n                        \n                    \n                \n            \n            \n                \ncreateMulterOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/multer-config.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     MulterModuleOptions\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MulterModuleOptions, MulterOptionsFactory } from '@nestjs/platform-express';\nimport { GridFsStorage } from 'multer-gridfs-storage';\nimport * as path from 'path';\n\nexport class GridFsMulterConfigService implements MulterOptionsFactory {\n    gridFsStorage;\n    constructor() {\n        this.gridFsStorage = new GridFsStorage({\n            url: process.env.MONGO_DNS,\n            file: (_req, file) => {              \n                return new Promise((resolve, _reject) => {\n                    const filename = file.originalname.trim();\n                    resolve({\n                        filename: `original_file_${Date.now()}${path.extname(filename)}`,\n                        metadata: {\n                            source: 'ext',\n                            parent: 'origin',\n                            originalname: filename\n                        }\n                    });\n                });\n            }\n        });\n    }\n\n    createMulterOptions(): MulterModuleOptions {\n        return {\n            storage: this.gridFsStorage,\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDownloadOptions.html":{"url":"interfaces/IDownloadOptions.html","title":"interface - IDownloadOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDownloadOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/mongo-gridfs.util.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            filename\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            targetDir\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filename:     boolean | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targetDir\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        targetDir:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ObjectID } from 'bson';\nimport * as fs from 'fs';\nimport { Db, GridFSBucket, GridFSBucketReadStream } from 'mongodb';\nimport osTmpdir = require('os-tmpdir');\nimport { Stream } from 'stream';\nimport uniqueFilename = require('unique-filename');\n\nexport interface IGridFSObject {\n    _id: ObjectID;\n    length: number;\n    chunkSize: number;\n    uploadDate: Date;\n    md5?: string;\n    filename: string;\n    contentType?: string | undefined;\n    metadata?: any;\n}\n\nexport interface IGridFSWriteOption {\n    filename: string;\n    chunkSizeBytes?: number;\n    metadata?: any;\n    contentType?: string | undefined;\n    aliases?: string[];\n}\n\nexport interface IDownloadOptions {\n    filename: boolean | string;\n    targetDir?: string;\n}\n\nexport class MongoGridFS {\n\n    /**\n     * Constructor\n     * @param {connection} connection\n     * @param {string} bucketName\n     */\n    constructor(public readonly connection: Db, public readonly bucketName: string = 'fs') {\n    }\n\n    public get bucket(): GridFSBucket {\n        return new GridFSBucket(this.connection, { bucketName: this.bucketName });\n    }\n\n    public static getDownloadPath(object: IGridFSObject, options: IDownloadOptions = {\n        filename: false,\n    }) {\n        let finalPath = '';\n        if (!options.targetDir) {\n            if (typeof options.filename === 'string') {\n                finalPath = `${osTmpdir()}/${options.filename}`;\n            } else {\n                if (options.filename === true) {\n                    finalPath = `${osTmpdir()}/${object._id}`;\n                } else {\n                    finalPath = uniqueFilename(osTmpdir());\n                }\n            }\n        } else {\n            if (typeof options.filename === 'string') {\n                finalPath = `${options.targetDir}/${options.filename}`;\n            } else {\n                if (options.filename === true) {\n                    finalPath = object.filename;\n                } else {\n                    finalPath = uniqueFilename(options.targetDir);\n                }\n            }\n        }\n        return finalPath;\n    }\n\n    /**\n     * Returns a stream of a file from the GridFS.\n     * @param {string} id\n     * @return {Promise}\n     */\n    public async readFileStream(id: string): Promise {\n        const object = await this.findById(id);\n        return this.bucket.openDownloadStream(object._id);\n    }\n\n    /**\n     * Save the File from the GridFs to the filesystem and get the Path back\n     * @param {string} id\n     * @param {IDownloadOptions} options\n     * @return {Promise}\n     */\n    public async downloadFile(id: string, options?: IDownloadOptions): Promise {\n        const object = await this.findById(id);\n        const downloadPath = MongoGridFS.getDownloadPath(object, options);\n        return new Promise(async (resolve, reject) => {\n            this.bucket.openDownloadStream(object._id)\n                .once('error', async (error) => {\n                    reject(error);\n                })\n                .once('end', async () => {\n                    resolve(downloadPath);\n                })\n                .pipe(fs.createWriteStream(downloadPath, {}));\n        });\n    }\n\n    /**\n     * Find a single object by id\n     * @param {string} id\n     * @return {Promise}\n     */\n    public async findById(id: string): Promise {\n        return await this.findOne({ _id: new ObjectID(id) });\n    }\n\n    /**\n     * Find a single object by condition\n     * @param filter\n     * @return {Promise}\n     */\n    public async findOne(filter: any): Promise {\n        const result = await this.find(filter);\n        if (result.length === 0) {\n            throw new Error('No Object found');\n        }\n        return result[0];\n    }\n\n    /**\n     * Find a list of object by condition\n     * @param filter\n     * @return {Promise}\n     */\n    public async find(filter: any): Promise {\n        return await this.bucket.find(filter).toArray();\n    }\n\n    /**\n     * Find objects by condition\n     * @param stream\n     * @param options\n     */\n    public writeFileStream(stream: Stream, options: IGridFSWriteOption): Promise {\n        return new Promise((resolve, reject) => stream\n            .pipe(this.bucket.openUploadStream(options.filename, {\n                aliases: options.aliases,\n                chunkSizeBytes: options.chunkSizeBytes,\n                contentType: options.contentType,\n                metadata: options.metadata,\n            }))\n            .on('error', async (err) => {\n                reject(err);\n            })\n            .on('finish', async (item: IGridFSObject) => {\n                resolve(item);\n            }),\n        );\n    }\n\n    /**\n     * Upload a file directly from a fs Path\n     * @param {string} uploadFilePath\n     * @param {IGridFSWriteOption} options\n     * @param {boolean} deleteFile\n     * @return {Promise}\n     */\n    public async uploadFile(\n        uploadFilePath: string,\n        options: IGridFSWriteOption,\n        deleteFile: boolean = true): Promise {\n        if (!fs.existsSync(uploadFilePath)) {\n            throw new Error('File not found');\n        }\n        const tryDeleteFile = (obj?: any): any => {\n            if (fs.existsSync(uploadFilePath) && deleteFile === true) {\n                fs.unlinkSync(uploadFilePath);\n            }\n            return obj;\n        };\n        return await this.writeFileStream(fs.createReadStream(uploadFilePath), options)\n            .then(tryDeleteFile)\n            .catch((err) => {\n                tryDeleteFile();\n                throw err;\n            });\n    }\n\n    /**\n     * Delete an File from the GridFS\n     * @param {string} id\n     * @return {Promise}\n     */\n    public async delete(id: string): Promise {\n        return await this.bucket.delete(new ObjectID(id));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGridFSObject.html":{"url":"interfaces/IGridFSObject.html","title":"interface - IGridFSObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGridFSObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/mongo-gridfs.util.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _id\n                                        \n                                \n                                \n                                        \n                                            chunkSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            contentType\n                                        \n                                \n                                \n                                        \n                                            filename\n                                        \n                                \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            md5\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadata\n                                        \n                                \n                                \n                                        \n                                            uploadDate\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:     ObjectID\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ObjectID\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        chunkSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        chunkSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        contentType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        contentType:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filename:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        md5\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        md5:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uploadDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uploadDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ObjectID } from 'bson';\nimport * as fs from 'fs';\nimport { Db, GridFSBucket, GridFSBucketReadStream } from 'mongodb';\nimport osTmpdir = require('os-tmpdir');\nimport { Stream } from 'stream';\nimport uniqueFilename = require('unique-filename');\n\nexport interface IGridFSObject {\n    _id: ObjectID;\n    length: number;\n    chunkSize: number;\n    uploadDate: Date;\n    md5?: string;\n    filename: string;\n    contentType?: string | undefined;\n    metadata?: any;\n}\n\nexport interface IGridFSWriteOption {\n    filename: string;\n    chunkSizeBytes?: number;\n    metadata?: any;\n    contentType?: string | undefined;\n    aliases?: string[];\n}\n\nexport interface IDownloadOptions {\n    filename: boolean | string;\n    targetDir?: string;\n}\n\nexport class MongoGridFS {\n\n    /**\n     * Constructor\n     * @param {connection} connection\n     * @param {string} bucketName\n     */\n    constructor(public readonly connection: Db, public readonly bucketName: string = 'fs') {\n    }\n\n    public get bucket(): GridFSBucket {\n        return new GridFSBucket(this.connection, { bucketName: this.bucketName });\n    }\n\n    public static getDownloadPath(object: IGridFSObject, options: IDownloadOptions = {\n        filename: false,\n    }) {\n        let finalPath = '';\n        if (!options.targetDir) {\n            if (typeof options.filename === 'string') {\n                finalPath = `${osTmpdir()}/${options.filename}`;\n            } else {\n                if (options.filename === true) {\n                    finalPath = `${osTmpdir()}/${object._id}`;\n                } else {\n                    finalPath = uniqueFilename(osTmpdir());\n                }\n            }\n        } else {\n            if (typeof options.filename === 'string') {\n                finalPath = `${options.targetDir}/${options.filename}`;\n            } else {\n                if (options.filename === true) {\n                    finalPath = object.filename;\n                } else {\n                    finalPath = uniqueFilename(options.targetDir);\n                }\n            }\n        }\n        return finalPath;\n    }\n\n    /**\n     * Returns a stream of a file from the GridFS.\n     * @param {string} id\n     * @return {Promise}\n     */\n    public async readFileStream(id: string): Promise {\n        const object = await this.findById(id);\n        return this.bucket.openDownloadStream(object._id);\n    }\n\n    /**\n     * Save the File from the GridFs to the filesystem and get the Path back\n     * @param {string} id\n     * @param {IDownloadOptions} options\n     * @return {Promise}\n     */\n    public async downloadFile(id: string, options?: IDownloadOptions): Promise {\n        const object = await this.findById(id);\n        const downloadPath = MongoGridFS.getDownloadPath(object, options);\n        return new Promise(async (resolve, reject) => {\n            this.bucket.openDownloadStream(object._id)\n                .once('error', async (error) => {\n                    reject(error);\n                })\n                .once('end', async () => {\n                    resolve(downloadPath);\n                })\n                .pipe(fs.createWriteStream(downloadPath, {}));\n        });\n    }\n\n    /**\n     * Find a single object by id\n     * @param {string} id\n     * @return {Promise}\n     */\n    public async findById(id: string): Promise {\n        return await this.findOne({ _id: new ObjectID(id) });\n    }\n\n    /**\n     * Find a single object by condition\n     * @param filter\n     * @return {Promise}\n     */\n    public async findOne(filter: any): Promise {\n        const result = await this.find(filter);\n        if (result.length === 0) {\n            throw new Error('No Object found');\n        }\n        return result[0];\n    }\n\n    /**\n     * Find a list of object by condition\n     * @param filter\n     * @return {Promise}\n     */\n    public async find(filter: any): Promise {\n        return await this.bucket.find(filter).toArray();\n    }\n\n    /**\n     * Find objects by condition\n     * @param stream\n     * @param options\n     */\n    public writeFileStream(stream: Stream, options: IGridFSWriteOption): Promise {\n        return new Promise((resolve, reject) => stream\n            .pipe(this.bucket.openUploadStream(options.filename, {\n                aliases: options.aliases,\n                chunkSizeBytes: options.chunkSizeBytes,\n                contentType: options.contentType,\n                metadata: options.metadata,\n            }))\n            .on('error', async (err) => {\n                reject(err);\n            })\n            .on('finish', async (item: IGridFSObject) => {\n                resolve(item);\n            }),\n        );\n    }\n\n    /**\n     * Upload a file directly from a fs Path\n     * @param {string} uploadFilePath\n     * @param {IGridFSWriteOption} options\n     * @param {boolean} deleteFile\n     * @return {Promise}\n     */\n    public async uploadFile(\n        uploadFilePath: string,\n        options: IGridFSWriteOption,\n        deleteFile: boolean = true): Promise {\n        if (!fs.existsSync(uploadFilePath)) {\n            throw new Error('File not found');\n        }\n        const tryDeleteFile = (obj?: any): any => {\n            if (fs.existsSync(uploadFilePath) && deleteFile === true) {\n                fs.unlinkSync(uploadFilePath);\n            }\n            return obj;\n        };\n        return await this.writeFileStream(fs.createReadStream(uploadFilePath), options)\n            .then(tryDeleteFile)\n            .catch((err) => {\n                tryDeleteFile();\n                throw err;\n            });\n    }\n\n    /**\n     * Delete an File from the GridFS\n     * @param {string} id\n     * @return {Promise}\n     */\n    public async delete(id: string): Promise {\n        return await this.bucket.delete(new ObjectID(id));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGridFSWriteOption.html":{"url":"interfaces/IGridFSWriteOption.html","title":"interface - IGridFSWriteOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGridFSWriteOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/mongo-gridfs.util.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            aliases\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            chunkSizeBytes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            contentType\n                                        \n                                \n                                \n                                        \n                                            filename\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadata\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aliases\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aliases:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        chunkSizeBytes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        chunkSizeBytes:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        contentType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        contentType:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filename:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ObjectID } from 'bson';\nimport * as fs from 'fs';\nimport { Db, GridFSBucket, GridFSBucketReadStream } from 'mongodb';\nimport osTmpdir = require('os-tmpdir');\nimport { Stream } from 'stream';\nimport uniqueFilename = require('unique-filename');\n\nexport interface IGridFSObject {\n    _id: ObjectID;\n    length: number;\n    chunkSize: number;\n    uploadDate: Date;\n    md5?: string;\n    filename: string;\n    contentType?: string | undefined;\n    metadata?: any;\n}\n\nexport interface IGridFSWriteOption {\n    filename: string;\n    chunkSizeBytes?: number;\n    metadata?: any;\n    contentType?: string | undefined;\n    aliases?: string[];\n}\n\nexport interface IDownloadOptions {\n    filename: boolean | string;\n    targetDir?: string;\n}\n\nexport class MongoGridFS {\n\n    /**\n     * Constructor\n     * @param {connection} connection\n     * @param {string} bucketName\n     */\n    constructor(public readonly connection: Db, public readonly bucketName: string = 'fs') {\n    }\n\n    public get bucket(): GridFSBucket {\n        return new GridFSBucket(this.connection, { bucketName: this.bucketName });\n    }\n\n    public static getDownloadPath(object: IGridFSObject, options: IDownloadOptions = {\n        filename: false,\n    }) {\n        let finalPath = '';\n        if (!options.targetDir) {\n            if (typeof options.filename === 'string') {\n                finalPath = `${osTmpdir()}/${options.filename}`;\n            } else {\n                if (options.filename === true) {\n                    finalPath = `${osTmpdir()}/${object._id}`;\n                } else {\n                    finalPath = uniqueFilename(osTmpdir());\n                }\n            }\n        } else {\n            if (typeof options.filename === 'string') {\n                finalPath = `${options.targetDir}/${options.filename}`;\n            } else {\n                if (options.filename === true) {\n                    finalPath = object.filename;\n                } else {\n                    finalPath = uniqueFilename(options.targetDir);\n                }\n            }\n        }\n        return finalPath;\n    }\n\n    /**\n     * Returns a stream of a file from the GridFS.\n     * @param {string} id\n     * @return {Promise}\n     */\n    public async readFileStream(id: string): Promise {\n        const object = await this.findById(id);\n        return this.bucket.openDownloadStream(object._id);\n    }\n\n    /**\n     * Save the File from the GridFs to the filesystem and get the Path back\n     * @param {string} id\n     * @param {IDownloadOptions} options\n     * @return {Promise}\n     */\n    public async downloadFile(id: string, options?: IDownloadOptions): Promise {\n        const object = await this.findById(id);\n        const downloadPath = MongoGridFS.getDownloadPath(object, options);\n        return new Promise(async (resolve, reject) => {\n            this.bucket.openDownloadStream(object._id)\n                .once('error', async (error) => {\n                    reject(error);\n                })\n                .once('end', async () => {\n                    resolve(downloadPath);\n                })\n                .pipe(fs.createWriteStream(downloadPath, {}));\n        });\n    }\n\n    /**\n     * Find a single object by id\n     * @param {string} id\n     * @return {Promise}\n     */\n    public async findById(id: string): Promise {\n        return await this.findOne({ _id: new ObjectID(id) });\n    }\n\n    /**\n     * Find a single object by condition\n     * @param filter\n     * @return {Promise}\n     */\n    public async findOne(filter: any): Promise {\n        const result = await this.find(filter);\n        if (result.length === 0) {\n            throw new Error('No Object found');\n        }\n        return result[0];\n    }\n\n    /**\n     * Find a list of object by condition\n     * @param filter\n     * @return {Promise}\n     */\n    public async find(filter: any): Promise {\n        return await this.bucket.find(filter).toArray();\n    }\n\n    /**\n     * Find objects by condition\n     * @param stream\n     * @param options\n     */\n    public writeFileStream(stream: Stream, options: IGridFSWriteOption): Promise {\n        return new Promise((resolve, reject) => stream\n            .pipe(this.bucket.openUploadStream(options.filename, {\n                aliases: options.aliases,\n                chunkSizeBytes: options.chunkSizeBytes,\n                contentType: options.contentType,\n                metadata: options.metadata,\n            }))\n            .on('error', async (err) => {\n                reject(err);\n            })\n            .on('finish', async (item: IGridFSObject) => {\n                resolve(item);\n            }),\n        );\n    }\n\n    /**\n     * Upload a file directly from a fs Path\n     * @param {string} uploadFilePath\n     * @param {IGridFSWriteOption} options\n     * @param {boolean} deleteFile\n     * @return {Promise}\n     */\n    public async uploadFile(\n        uploadFilePath: string,\n        options: IGridFSWriteOption,\n        deleteFile: boolean = true): Promise {\n        if (!fs.existsSync(uploadFilePath)) {\n            throw new Error('File not found');\n        }\n        const tryDeleteFile = (obj?: any): any => {\n            if (fs.existsSync(uploadFilePath) && deleteFile === true) {\n                fs.unlinkSync(uploadFilePath);\n            }\n            return obj;\n        };\n        return await this.writeFileStream(fs.createReadStream(uploadFilePath), options)\n            .then(tryDeleteFile)\n            .catch((err) => {\n                tryDeleteFile();\n                throw err;\n            });\n    }\n\n    /**\n     * Delete an File from the GridFS\n     * @param {string} id\n     * @return {Promise}\n     */\n    public async delete(id: string): Promise {\n        return await this.bucket.delete(new ObjectID(id));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MongoGridFS.html":{"url":"classes/MongoGridFS.html","title":"class - MongoGridFS","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MongoGridFS\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/mongo-gridfs.util.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                bucketName\n                            \n                            \n                                    Public\n                                    Readonly\n                                connection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                downloadFile\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findById\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Static\n                                getDownloadPath\n                            \n                            \n                                    Public\n                                    Async\n                                readFileStream\n                            \n                            \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                            \n                                    Public\n                                writeFileStream\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    bucket\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: Db, bucketName: string)\n                    \n                \n                        \n                            \n                                Defined in src/utils/mongo-gridfs.util.ts:32\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Db\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bucketName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'fs'\n                    \n                \n                    \n                        \n                                Defined in src/utils/mongo-gridfs.util.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        connection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Db\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/mongo-gridfs.util.ts:39\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/mongo-gridfs.util.ts:191\n                        \n                    \n\n\n            \n                \n                        Delete an File from the GridFS\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        downloadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    downloadFile(id: string, options?: IDownloadOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/mongo-gridfs.util.ts:90\n                        \n                    \n\n\n            \n                \n                        Save the File from the GridFs to the filesystem and get the Path back\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            IDownloadOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                        \n                    find(filter: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/mongo-gridfs.util.ts:132\n                        \n                    \n\n\n            \n                \n                        Find a list of object by condition\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/mongo-gridfs.util.ts:110\n                        \n                    \n\n\n            \n                \n                        Find a single object by id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(filter: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/mongo-gridfs.util.ts:119\n                        \n                    \n\n\n            \n                \n                        Find a single object by condition\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getDownloadPath\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDownloadPath(object: IGridFSObject, options: IDownloadOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/mongo-gridfs.util.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                object\n                                            \n                                                            IGridFSObject\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            IDownloadOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {\n        filename: false,\n    }\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        readFileStream\n                        \n                    \n                \n            \n            \n                \n                        \n                    readFileStream(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/mongo-gridfs.util.ts:79\n                        \n                    \n\n\n            \n                \n                        Returns a stream of a file from the GridFS.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(uploadFilePath: string, options: IGridFSWriteOption, deleteFile: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/mongo-gridfs.util.ts:165\n                        \n                    \n\n\n            \n                \n                        Upload a file directly from a fs Path\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                uploadFilePath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            IGridFSWriteOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                deleteFile\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        writeFileStream\n                        \n                    \n                \n            \n            \n                \n                        \n                    writeFileStream(stream: Stream, options: IGridFSWriteOption)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/mongo-gridfs.util.ts:141\n                        \n                    \n\n\n            \n                \n                        Find objects by condition\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                stream\n                                            \n                                                        Stream\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            IGridFSWriteOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        bucket\n                    \n                \n\n                \n                    \n                        getbucket()\n                    \n                \n                            \n                                \n                                    Defined in src/utils/mongo-gridfs.util.ts:42\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ObjectID } from 'bson';\nimport * as fs from 'fs';\nimport { Db, GridFSBucket, GridFSBucketReadStream } from 'mongodb';\nimport osTmpdir = require('os-tmpdir');\nimport { Stream } from 'stream';\nimport uniqueFilename = require('unique-filename');\n\nexport interface IGridFSObject {\n    _id: ObjectID;\n    length: number;\n    chunkSize: number;\n    uploadDate: Date;\n    md5?: string;\n    filename: string;\n    contentType?: string | undefined;\n    metadata?: any;\n}\n\nexport interface IGridFSWriteOption {\n    filename: string;\n    chunkSizeBytes?: number;\n    metadata?: any;\n    contentType?: string | undefined;\n    aliases?: string[];\n}\n\nexport interface IDownloadOptions {\n    filename: boolean | string;\n    targetDir?: string;\n}\n\nexport class MongoGridFS {\n\n    /**\n     * Constructor\n     * @param {connection} connection\n     * @param {string} bucketName\n     */\n    constructor(public readonly connection: Db, public readonly bucketName: string = 'fs') {\n    }\n\n    public get bucket(): GridFSBucket {\n        return new GridFSBucket(this.connection, { bucketName: this.bucketName });\n    }\n\n    public static getDownloadPath(object: IGridFSObject, options: IDownloadOptions = {\n        filename: false,\n    }) {\n        let finalPath = '';\n        if (!options.targetDir) {\n            if (typeof options.filename === 'string') {\n                finalPath = `${osTmpdir()}/${options.filename}`;\n            } else {\n                if (options.filename === true) {\n                    finalPath = `${osTmpdir()}/${object._id}`;\n                } else {\n                    finalPath = uniqueFilename(osTmpdir());\n                }\n            }\n        } else {\n            if (typeof options.filename === 'string') {\n                finalPath = `${options.targetDir}/${options.filename}`;\n            } else {\n                if (options.filename === true) {\n                    finalPath = object.filename;\n                } else {\n                    finalPath = uniqueFilename(options.targetDir);\n                }\n            }\n        }\n        return finalPath;\n    }\n\n    /**\n     * Returns a stream of a file from the GridFS.\n     * @param {string} id\n     * @return {Promise}\n     */\n    public async readFileStream(id: string): Promise {\n        const object = await this.findById(id);\n        return this.bucket.openDownloadStream(object._id);\n    }\n\n    /**\n     * Save the File from the GridFs to the filesystem and get the Path back\n     * @param {string} id\n     * @param {IDownloadOptions} options\n     * @return {Promise}\n     */\n    public async downloadFile(id: string, options?: IDownloadOptions): Promise {\n        const object = await this.findById(id);\n        const downloadPath = MongoGridFS.getDownloadPath(object, options);\n        return new Promise(async (resolve, reject) => {\n            this.bucket.openDownloadStream(object._id)\n                .once('error', async (error) => {\n                    reject(error);\n                })\n                .once('end', async () => {\n                    resolve(downloadPath);\n                })\n                .pipe(fs.createWriteStream(downloadPath, {}));\n        });\n    }\n\n    /**\n     * Find a single object by id\n     * @param {string} id\n     * @return {Promise}\n     */\n    public async findById(id: string): Promise {\n        return await this.findOne({ _id: new ObjectID(id) });\n    }\n\n    /**\n     * Find a single object by condition\n     * @param filter\n     * @return {Promise}\n     */\n    public async findOne(filter: any): Promise {\n        const result = await this.find(filter);\n        if (result.length === 0) {\n            throw new Error('No Object found');\n        }\n        return result[0];\n    }\n\n    /**\n     * Find a list of object by condition\n     * @param filter\n     * @return {Promise}\n     */\n    public async find(filter: any): Promise {\n        return await this.bucket.find(filter).toArray();\n    }\n\n    /**\n     * Find objects by condition\n     * @param stream\n     * @param options\n     */\n    public writeFileStream(stream: Stream, options: IGridFSWriteOption): Promise {\n        return new Promise((resolve, reject) => stream\n            .pipe(this.bucket.openUploadStream(options.filename, {\n                aliases: options.aliases,\n                chunkSizeBytes: options.chunkSizeBytes,\n                contentType: options.contentType,\n                metadata: options.metadata,\n            }))\n            .on('error', async (err) => {\n                reject(err);\n            })\n            .on('finish', async (item: IGridFSObject) => {\n                resolve(item);\n            }),\n        );\n    }\n\n    /**\n     * Upload a file directly from a fs Path\n     * @param {string} uploadFilePath\n     * @param {IGridFSWriteOption} options\n     * @param {boolean} deleteFile\n     * @return {Promise}\n     */\n    public async uploadFile(\n        uploadFilePath: string,\n        options: IGridFSWriteOption,\n        deleteFile: boolean = true): Promise {\n        if (!fs.existsSync(uploadFilePath)) {\n            throw new Error('File not found');\n        }\n        const tryDeleteFile = (obj?: any): any => {\n            if (fs.existsSync(uploadFilePath) && deleteFile === true) {\n                fs.unlinkSync(uploadFilePath);\n            }\n            return obj;\n        };\n        return await this.writeFileStream(fs.createReadStream(uploadFilePath), options)\n            .then(tryDeleteFile)\n            .catch((err) => {\n                tryDeleteFile();\n                throw err;\n            });\n    }\n\n    /**\n     * Delete an File from the GridFS\n     * @param {string} id\n     * @return {Promise}\n     */\n    public async delete(id: string): Promise {\n        return await this.bucket.delete(new ObjectID(id));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductWorker.html":{"url":"injectables/ProductWorker.html","title":"injectable - ProductWorker","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductWorker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workers/product.worker.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                resized\n                            \n                            \n                                resizes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getFilename\n                            \n                            \n                                getPayload\n                            \n                            \n                                    Async\n                                proceed\n                            \n                            \n                                    Async\n                                resizeEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/workers/product.worker.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getFilename\n                        \n                    \n                \n            \n            \n                \ngetFilename(resize: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workers/product.worker.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resize\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPayload\n                        \n                    \n                \n            \n            \n                \ngetPayload(filenameResize: string, parentId: string, resize: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workers/product.worker.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filenameResize\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                parentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resize\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { filename: string; metadata: { parent: string; resize: { width: any; height: any; format: string; name: any; fit: any; }; }; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        proceed\n                        \n                    \n                \n            \n            \n                \n                        \n                    proceed(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workers/product.worker.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resizeEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    resizeEvent(resize: any, fileId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workers/product.worker.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resize\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        resized\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/workers/product.worker.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resizes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n        /* { \n            width: 40, \n            height: 40,\n            name: \"mini\",\n            fit: 'cover',\n        }, */\n        {\n            width: 150,\n            height: 150,\n            name: \"product\",\n            fit: 'cover',\n        }\n    ]\n                    \n                \n                    \n                        \n                                Defined in src/workers/product.worker.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { FilesService } from 'src/files/files.service';\nimport { streamToBuffer } from '@jorgeferrero/stream-to-buffer';\nimport * as sharp from 'sharp';\nimport { Readable } from 'stream';\n\n\n@Injectable()\nexport class ProductWorker {\n\n    resizes = [\n        /* { \n            width: 40, \n            height: 40,\n            name: \"mini\",\n            fit: 'cover',\n        }, */\n        {\n            width: 150,\n            height: 150,\n            name: \"product\",\n            fit: 'cover',\n        }\n    ]\n\n    resized = [];\n\n    constructor(private filesService: FilesService) { }\n\n    async proceed(event: any) {\n        this.resized = [];\n        const response = await Promise.all(\n            this.resizes.map(async (resize) => {\n                const buffer = await this.resizeEvent(resize, event.file.id);\n                return await this.filesService.writeFileStream(\n                    Readable.from(buffer),\n                    this.getPayload(\n                        this.getFilename(resize),\n                        event.file.id,\n                        resize\n                    )\n                );\n            })\n        )\n\n        const originFile = await this.filesService.findInfo(event.file.id);\n        return [originFile].concat(response as any[]);\n    }\n\n\n    getPayload(filenameResize: string,parentId: string, resize: any ) {\n        return {\n            filename: filenameResize,\n            metadata: {\n                parent: parentId,\n                resize: {\n                    width: resize.width,\n                    height: resize.height,\n                    format: 'jpeg',\n                    name: resize.name,\n                    fit: resize.fit\n                }\n            }\n        };\n    }\n\n    getFilename(resize: any): string {\n        return `${resize.name}_${resize.width}x${resize.height != null ? resize.height : 'auto'}_${Date.now()}.jpeg`;\n    }\n\n    async resizeEvent(resize: any, fileId: string): Promise {\n        return await sharp(await streamToBuffer(await this.filesService.readStream(fileId)))\n            .resize(resize.width, resize.height, {\n                fit: resize.fit\n            })\n            .jpeg({quality:70 })\n            .toBuffer();\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/files/files.controller.ts\n            \n            controller\n            FilesController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/files/interfaces/deleteFile.interface.ts\n            \n            interface\n            deleteFileInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/files/interfaces/fileInfo.interface.ts\n            \n            class\n            FileInfoInterface\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/files/interfaces/fileResponse.interface.ts\n            \n            class\n            FileResponseInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/files/interfaces/fileResponse.interface.ts\n            \n            class\n            FilesResponseInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/files/multer-config.service.ts\n            \n            class\n            GridFsMulterConfigService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/listeners/fileCreated.listener.ts\n            \n            injectable\n            FileCreatedListener\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/listeners/fileDeleted.listener.ts\n            \n            injectable\n            FileDeletedListener\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/formatter.util.ts\n            \n            injectable\n            FormatterUtil\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/fs.util.ts\n            \n            injectable\n            FsUtil\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/mongo-gridfs.util.ts\n            \n            class\n            MongoGridFS\n            \n                69 %\n                (9/13)\n            \n        \n        \n            \n                \n                src/utils/mongo-gridfs.util.ts\n            \n            interface\n            IDownloadOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/mongo-gridfs.util.ts\n            \n            interface\n            IGridFSObject\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/utils/mongo-gridfs.util.ts\n            \n            interface\n            IGridFSWriteOption\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/workers/avatar.worker.ts\n            \n            injectable\n            AvatarWorker\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/workers/product.worker.ts\n            \n            injectable\n            ProductWorker\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/deleteFileInterface.html":{"url":"interfaces/deleteFileInterface.html","title":"interface - deleteFileInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  deleteFileInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/interfaces/deleteFile.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            target\n                                        \n                                \n                                \n                                        \n                                            targetId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targetId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        targetId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface deleteFileInterface {\n  target: string,\n  targetId: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @jorgeferrero/stream-to-buffer : ^2.0.6\n        \n            @nestjs/common : ^8.4.7\n        \n            @nestjs/config : ^2.3.4\n        \n            @nestjs/core : ^8.4.7\n        \n            @nestjs/event-emitter : ^1.4.2\n        \n            @nestjs/microservices : ^8.4.7\n        \n            @nestjs/mongoose : ^9.2.2\n        \n            @nestjs/platform-express : ^8.4.7\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @types/multer-gridfs-storage : ^4.0.5\n        \n            class-transformer : ^0.5.1\n        \n            csv-split-stream : ^1.0.2\n        \n            mongodb : ^4.16.0\n        \n            mongoose : ^6.11.4\n        \n            multer : 1.4.5-lts.1\n        \n            multer-gridfs-storage : ^5.0.2\n        \n            nats : ^2.15.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.8.1\n        \n            sharp : ^0.30.7\n        \n            unique-filename : ^2.0.1\n        \n            webpack : ^5.88.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\n\nFilesModule\n\nFilesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nAvatarWorker\n\nAvatarWorker\n\nAppModule -->\n\nAvatarWorker->AppModule\n\n\n\n\n\nFileCreatedListener\n\nFileCreatedListener\n\nAppModule -->\n\nFileCreatedListener->AppModule\n\n\n\n\n\nFileDeletedListener\n\nFileDeletedListener\n\nAppModule -->\n\nFileDeletedListener->AppModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\nAppModule -->\n\nFilesService->AppModule\n\n\n\n\n\nFsUtil\n\nFsUtil\n\nAppModule -->\n\nFsUtil->AppModule\n\n\n\n\n\nProductWorker\n\nProductWorker\n\nAppModule -->\n\nProductWorker->AppModule\n\n\n\n\n\nFormatterUtil\n\nFormatterUtil\n\nFilesModule -->\n\nFormatterUtil->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
