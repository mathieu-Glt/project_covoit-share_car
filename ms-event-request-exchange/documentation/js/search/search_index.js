var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.052,1,2.127]],["body/modules/AppModule.html",[0,1.782,1,4.126,2,1.571,3,1.713,4,2.065,5,2.065,6,1.713,7,2.725,8,2.065,9,2.959,10,2.959,11,3.464,12,0.032,13,3.147,14,2.874,15,3.147,16,2.725,17,2.065,18,2.065,19,0.419,20,0.419,21,0.371,22,3.538,23,2.725,24,0.801,25,2.292,26,2.292,27,3.538,28,3.538,29,3.538,30,3.026,31,1.445,32,3.905,33,2.577,34,0.966,35,3.538,36,4.669,37,2.577,38,1.332,39,4.669,40,3.538,41,3.538,42,2.959,43,2.959,44,2.959,45,2.135,46,2.065,47,2.959,48,2.959,49,2.959,50,3.538,51,2.577,52,2.959,53,1.875,54,0.419,55,0.161,56,0.022,57,0.022]],["title/modules/DatabaseModule.html",[0,1.052,11,1.916]],["body/modules/DatabaseModule.html",[0,1.787,2,2.084,11,3.253,12,0.031,19,0.555,20,0.555,21,0.493,23,2.738,24,0.787,30,3.04,31,1.916,34,1.281,52,3.923,54,0.555,55,0.213,56,0.026,57,0.026,58,4.691,59,4.661,60,4.691]],["title/classes/Event.html",[38,1.236,55,0.149]],["body/classes/Event.html",[12,0.031,19,0.318,20,0.318,21,0.282,24,0.654,31,1.096,38,1.86,45,2.294,54,0.535,55,0.176,56,0.018,57,0.018,61,1.192,62,1.739,63,0.318,64,1.054,65,1.495,66,2.928,67,2.188,68,3.292,69,3.292,70,3.292,71,2.928,72,3.292,73,1.337,74,3.292,75,3.292,76,3.292,77,0.804,78,1.242,79,2.457,80,4.806,81,3.859,82,2.811,83,1.78,84,2.684,85,2.684,86,2.684,87,4.941,88,2.684,89,2.684,90,2.684,91,2.684,92,2.684,93,2.684,94,2.684,95,2.684,96,2.684,97,1.34,98,2.684,99,2.684,100,2.684,101,2.684,102,4.328,103,2.252,104,1.955,105,2.811,106,1.3,107,3.938,108,1.566,109,4.378,110,1.423,111,2.244,112,1.739,113,1.739,114,1.3,115,1.423,116,1.955,117,1.955,118,1.955,119,3.292,120,3.6,121,1.739,122,2.244,123,2.244,124,2.244,125,2.244,126,2.684,127,2.501,128,1.01,129,1.739,130,2.244]],["title/controllers/EventController.html",[131,1.916,132,2.127]],["body/controllers/EventController.html",[12,0.032,19,0.197,20,0.197,21,0.282,24,0.628,34,0.455,38,2.014,46,0.973,53,0.883,54,0.197,55,0.076,56,0.013,57,0.013,63,0.197,65,1.195,67,2.047,73,1.405,77,0.628,79,2.018,83,1.462,115,0.883,128,0.627,131,1.964,132,2.181,133,1.393,134,1.422,135,3.937,136,2.243,137,2.243,138,3.365,139,3.365,140,2.682,141,2.682,142,2.682,143,3.365,144,1.666,145,3.077,146,2.682,147,1.666,148,1.954,149,2.243,150,2.682,151,2.3,152,3.598,153,2.392,154,3.304,155,1.666,156,3.578,157,2.682,158,1.666,159,1.868,160,2.682,161,4.226,162,2.682,163,1.666,164,3.812,165,2.243,166,4.14,167,2.243,168,1.666,169,2.682,170,1.666,171,2.81,172,3.365,173,2.889,174,1.666,175,2.682,176,1.666,177,3.226,178,3.365,179,1.666,180,1.666,181,2.682,182,1.666,183,2.636,184,2.243,185,3.365,186,1.666,187,2.682,188,1.666,189,1.954,190,3.365,191,1.666,192,2.682,193,1.666,194,1.954,195,2.682,196,1.214,197,1.393,198,3.777,199,0.681,200,1.393,201,1.393,202,0.807,203,0.973,204,1.214,205,1.784,206,1.393,207,1.666,208,1.666,209,1.214,210,0.973,211,1.393,212,1.393,213,1.08,214,1.393,215,1.08,216,1.08,217,0.74,218,3.29,219,1.666,220,3.588,221,3.226,222,3.201,223,1.94,224,3.201,225,1.666,226,3.201,227,3.201,228,3.598,229,3.598,230,1.666,231,1.393,232,1.393,233,1.666,234,1.666,235,1.666,236,1.666,237,1.666,238,1.666,239,1.666,240,1.666,241,1.214,242,1.666,243,1.666,244,1.666,245,1.666,246,1.393,247,1.393,248,2.682,249,1.666,250,1.666,251,1.666,252,1.666,253,1.666]],["title/classes/EventDto.html",[55,0.149,145,2.127]],["body/classes/EventDto.html",[12,0.032,19,0.281,20,0.281,21,0.249,24,0.617,45,1.442,54,0.281,55,0.192,56,0.017,57,0.017,61,1.055,63,0.281,64,0.964,65,1.398,66,2.729,67,2.04,68,3.068,69,3.068,70,3.068,71,2.729,72,3.068,73,1.247,74,3.068,75,3.068,76,3.068,77,0.812,78,1.241,79,2.394,83,1.805,97,1.226,107,3.599,108,1.386,110,2.233,111,1.987,112,1.539,113,1.539,114,1.15,121,1.539,122,1.987,123,1.987,124,1.987,125,1.987,127,2.287,145,2.287,217,2.85,223,1.905,254,1.987,255,3.53,256,4.212,257,4.212,258,4.212,259,4.212,260,2.375,261,2.375,262,2.375,263,4.662,264,4.662,265,2.375,266,2.375,267,2.375,268,2.375,269,2.375,270,2.375,271,2.375,272,2.375,273,2.375,274,2.375,275,2.375,276,2.375,277,2.375,278,2.375,279,2.375,280,2.375,281,2.375,282,2.375,283,2.375,284,2.375,285,2.375,286,4.167,287,1.73,288,4.167,289,4.366,290,2.571,291,2.908,292,2.571,293,4.662,294,3.021,295,3.53,296,4.662,297,4.662,298,3.53,299,2.375,300,2.375,301,2.375,302,2.375,303,2.375]],["title/interfaces/EventInterface.html",[304,0.971,305,2.127]],["body/interfaces/EventInterface.html",[12,0.031,19,0.422,20,0.422,21,0.374,54,0.422,56,0.022,57,0.022,63,0.422,64,1.281,65,1.634,66,3.612,67,2.7,68,4.061,69,4.061,70,4.061,71,3.612,72,3.821,73,1.65,74,4.061,75,4.061,76,4.061,77,0.838,78,1.297,97,1.822,304,1.055,305,3.04,306,1.889,307,2.98,308,3.563]],["title/modules/EventModule.html",[0,1.052,13,1.74]],["body/modules/EventModule.html",[0,1.9,2,1.564,3,1.705,4,2.055,5,2.055,6,1.705,7,3.044,8,3.044,12,0.032,13,3.292,14,2.928,15,2.764,16,2.717,17,2.055,18,2.055,19,0.417,20,0.417,21,0.37,23,2.717,24,0.829,25,2.281,26,2.281,30,2.281,31,1.438,34,0.961,38,1.325,51,2.565,53,2.468,54,0.417,55,0.16,56,0.022,57,0.022,73,1.042,103,2.717,106,1.705,129,3.016,132,3.379,166,3.391,204,2.565,205,3.373,206,2.944,210,2.055,309,2.944,310,2.944,311,3.521,312,2.944,313,3.521,314,3.521,315,3.521,316,3.893,317,2.565,318,2.944,319,2.565,320,2.055,321,2.944]],["title/injectables/EventService.html",[205,1.74,322,1.14]],["body/injectables/EventService.html",[12,0.032,19,0.174,20,0.174,21,0.254,24,0.563,25,0.952,26,0.952,31,0.6,34,0.401,38,2.254,45,0.6,54,0.174,55,0.067,56,0.011,57,0.011,63,0.174,65,1.227,66,0.952,67,2.279,71,2.918,73,1.653,77,0.645,78,1.14,83,1.486,106,0.712,115,0.779,128,1.891,134,1.283,135,3.916,136,2.024,137,2.024,148,1.763,151,2.362,152,2.884,153,2.432,154,3.695,159,1.172,164,3.83,165,1.229,166,3.9,171,2.608,173,2.96,177,3.31,183,2.089,184,2.024,189,2.608,194,1.763,196,1.07,204,1.07,205,1.637,209,1.07,213,0.952,215,1.569,216,1.569,217,0.653,218,3.428,220,3.695,222,3.16,223,2.052,224,3.254,226,3.16,227,3.16,228,3.75,229,3.552,241,1.07,305,3.254,322,0.841,323,0.858,324,1.229,325,2.421,326,3.579,327,3.087,328,2.421,329,2.421,330,2.421,331,2.421,332,1.469,333,3.579,334,2.387,335,1.469,336,2.421,337,2.421,338,1.469,339,2.421,340,1.469,341,2.628,342,2.421,343,1.469,344,1.469,345,2.421,346,1.469,347,3.087,348,2.421,349,1.469,350,3.087,351,2.421,352,1.469,353,1.637,354,2.421,355,1.469,356,2.421,357,1.469,358,1.469,359,1.469,360,1.07,361,1.469,362,1.229,363,1.469,364,2.421,365,1.469,366,1.469,367,1.469,368,1.469,369,1.469,370,3.087,371,1.469,372,1.469,373,1.469,374,1.229,375,1.469,376,1.469,377,2.421,378,2.421,379,2.024,380,1.469,381,1.469,382,3.087,383,1.469,384,2.421,385,1.469,386,1.469,387,2.421,388,1.469,389,2.421,390,2.421,391,1.469,392,2.421,393,3.087,394,1.469,395,1.469,396,2.024,397,2.024,398,2.421,399,2.421,400,2.421,401,1.469,402,1.469,403,2.421,404,1.229,405,2.421,406,1.469,407,1.469,408,1.469]],["title/classes/ExchangeDto.html",[55,0.149,409,2.127]],["body/classes/ExchangeDto.html",[12,0.031,19,0.499,20,0.499,21,0.443,24,0.691,54,0.499,55,0.238,56,0.025,57,0.025,61,1.874,63,0.499,64,1.427,77,0.691,78,1.019,79,2.135,83,1.547,110,2.771,114,2.043,217,2.522,291,3.051,409,3.387,410,3.528,411,3.314,412,3.679,413,3.146,414,4.219,415,4.371,416,3.528,417,4.219,418,3.528,419,4.219,420,4.371,421,2.237,422,4.219]],["title/interfaces/ExchangeInterface.html",[304,0.971,423,1.916]],["body/interfaces/ExchangeInterface.html",[12,0.031,19,0.481,20,0.481,21,0.427,24,0.538,54,0.605,56,0.024,57,0.024,63,0.481,64,1.395,65,1.286,77,0.739,78,1.244,97,1.413,173,2.156,183,2.374,304,1.512,306,2.156,341,2.374,353,2.156,411,3.523,412,3.796,413,3.2,421,2.156,423,2.982,424,2.963,425,2.982,426,2.982,427,2.635,428,2.635,429,2.963,430,3.401,431,2.635,432,1.662,433,3.401,434,2.963,435,2.635,436,2.635,437,2.635,438,2.635,439,2.963,440,2.963,441,2.156]],["title/classes/ExchangeRequest.html",[55,0.149,442,2.127]],["body/classes/ExchangeRequest.html",[12,0.031,19,0.457,20,0.457,21,0.406,24,0.761,31,1.578,45,2.02,54,0.645,55,0.176,56,0.023,57,0.023,61,1.716,63,0.457,64,1.35,77,0.761,78,1.063,79,2.02,82,2.815,83,1.463,102,3.973,103,2.886,104,2.815,105,3.602,106,1.871,107,3.534,108,2.255,116,2.815,117,2.815,118,2.815,119,2.815,120,3.602,128,1.455,411,3.183,412,3.534,413,3.15,416,3.231,421,2.048,442,3.725,443,2.503,444,3.863,445,4.135,446,3.863,447,3.863,448,3.863,449,2.815,450,2.503,451,3.231]],["title/classes/IdDto.html",[55,0.149,156,1.916]],["body/classes/IdDto.html",[12,0.031,19,0.54,20,0.54,21,0.479,24,0.603,54,0.54,55,0.249,56,0.026,57,0.026,61,2.025,63,0.54,64,1.496,77,0.603,78,1.069,79,1.863,83,1.349,110,2.905,114,2.208,156,3.199,173,3.115,217,2.61,291,3.199,418,3.813,452,3.813,453,4.56]],["title/modules/NatsMessengerModule.html",[0,1.052,14,1.589]],["body/modules/NatsMessengerModule.html",[0,1.895,2,2.055,3,1.689,4,2.035,5,2.035,6,1.689,7,3.029,8,3.029,12,0.032,14,2.921,16,2.7,17,2.035,18,2.035,19,0.413,20,0.413,21,0.366,23,2.035,24,0.731,32,3.868,33,2.54,34,0.952,43,2.916,44,2.916,45,2.12,46,2.035,47,2.916,48,2.916,49,2.916,54,0.413,55,0.159,56,0.022,57,0.022,73,1.369,203,2.035,320,3.226,334,3.404,360,3.369,454,2.916,455,2.916,456,2.916,457,2.54,458,2.54,459,3.487,460,3.487,461,5.19,462,3.487,463,3.487,464,3.487,465,3.487,466,3.487,467,2.54,468,3.487,469,4.625,470,3.487,471,3.487,472,3.487,473,2.916,474,3.487,475,3.487,476,3.487,477,3.487,478,3.487,479,4.625,480,3.487,481,3.487,482,3.487,483,3.487,484,3.487]],["title/injectables/NatsMessengerService.html",[322,1.14,334,1.74]],["body/injectables/NatsMessengerService.html",[0,0.839,12,0.032,19,0.31,20,0.31,21,0.275,24,0.589,34,0.715,38,0.985,42,2.188,46,1.527,54,0.31,55,0.119,56,0.018,57,0.018,63,0.31,65,1.304,73,1.534,77,0.686,78,1.222,83,1.534,134,2.009,135,3.919,151,2.51,153,2.365,154,3.358,161,2.761,202,2.817,203,1.527,210,1.527,213,1.696,215,2.455,216,1.696,217,1.162,222,2.455,223,1.82,224,1.696,226,2.455,227,3.164,317,1.906,319,1.906,320,2.6,322,1.316,323,1.527,334,2.009,360,1.906,362,2.188,374,2.188,396,3.169,397,4.773,427,1.696,428,1.696,431,2.887,432,1.82,457,3.937,458,3.937,473,2.188,485,2.188,486,3.789,487,3.789,488,3.789,489,2.617,490,5.183,491,2.617,492,3.789,493,2.617,494,4.455,495,3.789,496,5.404,497,2.617,498,3.789,499,2.617,500,3.789,501,2.617,502,2.617,503,2.617,504,2.617,505,2.617,506,2.617,507,3.789,508,3.726,509,2.617,510,2.617,511,3.789,512,2.617,513,2.617,514,2.617,515,3.789,516,2.617,517,2.617,518,3.789,519,2.617,520,4.455,521,2.617,522,2.617,523,2.617,524,2.617,525,2.617,526,2.188,527,2.617,528,2.617,529,2.617,530,2.617,531,2.617,532,2.617,533,2.617,534,2.188,535,2.617,536,2.617]],["title/classes/Request.html",[55,0.149,432,1.341]],["body/classes/Request.html",[12,0.032,19,0.318,20,0.318,21,0.282,24,0.721,31,1.098,45,2.542,54,0.535,55,0.176,56,0.018,57,0.018,61,1.194,63,0.318,64,1.055,77,0.828,78,1.205,79,2.392,80,4.699,82,1.959,83,1.733,97,1.342,102,4.266,103,2.255,104,1.959,105,2.815,106,1.302,107,3.851,108,1.569,109,2.249,110,2.398,112,1.742,113,1.742,114,1.302,115,1.425,116,1.959,117,1.959,118,1.959,119,1.959,120,4.093,121,1.742,127,1.742,128,1.012,290,2.815,291,2.64,341,2.64,353,2.398,404,3.232,421,1.425,425,2.886,426,2.886,432,2.02,436,2.931,437,2.931,438,2.931,441,2.398,445,3.232,537,1.742,538,4.523,539,4.523,540,2.689,541,2.689,542,2.689,543,3.864,544,3.864,545,2.689,546,2.689,547,2.249,548,2.689,549,2.689,550,2.689,551,2.689,552,2.689,553,2.689,554,2.689,555,2.689,556,2.689,557,2.689,558,3.232,559,2.249,560,1.959,561,2.249,562,2.249,563,3.864,564,2.249,565,2.689,566,1.742,567,2.249]],["title/controllers/RequestController.html",[131,1.916,568,2.127]],["body/controllers/RequestController.html",[12,0.032,19,0.111,20,0.111,21,0.232,24,0.557,34,0.257,37,0.685,38,1.52,46,1.292,53,0.498,54,0.111,55,0.043,56,0.008,57,0.008,63,0.111,65,1.191,67,2.293,73,1.401,77,0.626,79,1.975,83,1.431,128,0.833,131,1.292,134,0.876,135,3.913,148,1.204,149,3.376,151,2.293,152,3.755,153,2.341,154,3.523,156,3.672,159,1.291,161,4.362,164,3.803,167,1.383,171,1.941,173,3.097,183,2.875,189,1.941,194,2.212,196,0.685,197,0.786,198,4.043,199,0.384,200,0.786,201,0.786,202,0.455,203,0.548,209,0.685,210,0.548,211,0.786,212,0.786,213,0.609,214,0.786,215,0.609,216,0.609,217,0.417,218,3.704,220,3.717,221,1.851,222,3.132,223,1.934,224,3.132,226,3.132,227,3.132,228,3.588,229,3.521,231,0.786,232,0.786,241,1.204,246,2.229,247,2.229,353,0.876,379,0.786,409,1.967,423,1.772,427,0.609,428,0.609,429,1.612,431,1.071,432,2.318,441,1.915,449,0.685,508,2.8,526,2.539,560,0.685,568,1.071,569,0.786,570,2.213,571,2.213,572,1.653,573,2.213,574,1.653,575,1.653,576,1.653,577,2.213,578,1.653,579,1.653,580,1.653,581,1.653,582,2.213,583,2.213,584,2.213,585,0.94,586,2.488,587,1.653,588,0.94,589,1.653,590,2.213,591,1.653,592,0.94,593,1.653,594,0.94,595,2.213,596,0.94,597,0.94,598,1.653,599,0.94,600,2.665,601,2.213,602,1.653,603,0.94,604,3.959,605,0.94,606,1.653,607,0.94,608,2.665,609,2.213,610,0.94,611,1.653,612,0.94,613,2.213,614,0.94,615,1.653,616,0.94,617,1.653,618,2.665,619,2.213,620,0.94,621,1.653,622,0.94,623,2.213,624,0.94,625,1.653,626,0.94,627,5.085,628,2.213,629,0.94,630,1.653,631,0.94,632,1.653,633,2.213,634,0.94,635,0.94,636,1.653,637,0.94,638,2.213,639,0.94,640,1.653,641,0.94,642,2.213,643,0.94,644,1.653,645,0.94,646,2.213,647,0.94,648,0.94,649,1.653,650,0.94,651,1.653,652,1.653,653,1.653,654,1.653,655,2.665,656,0.94,657,0.94,658,1.653,659,0.94,660,2.213,661,0.786,662,0.94,663,0.786,664,1.434,665,0.786,666,0.94,667,0.94,668,0.94,669,0.94,670,0.94,671,0.94,672,0.94,673,0.94,674,0.94,675,0.94,676,1.653,677,0.94,678,0.94,679,0.94,680,0.94,681,0.94,682,0.94,683,0.94,684,0.94,685,0.94,686,0.94,687,1.653,688,0.94,689,0.94,690,0.94,691,0.94,692,0.94,693,1.653,694,0.94,695,0.94,696,0.94,697,0.94,698,0.94,699,0.94,700,0.94,701,0.94,702,0.94,703,0.94,704,0.94,705,0.94,706,0.94,707,0.94,708,0.94,709,0.94,710,0.94,711,0.94,712,0.94,713,0.94,714,0.94,715,0.94,716,0.94,717,0.94,718,0.94,719,0.94,720,0.94,721,0.94,722,0.94,723,0.94,724,0.94,725,0.94]],["title/classes/RequestDto.html",[55,0.149,586,2.127]],["body/classes/RequestDto.html",[12,0.031,19,0.334,20,0.334,21,0.296,24,0.733,45,1.153,54,0.334,55,0.211,56,0.019,57,0.019,61,1.254,63,0.334,64,1.093,65,1.007,77,0.824,78,1.196,79,2.454,83,1.778,97,1.39,106,1.367,110,2.464,112,1.829,113,1.829,114,1.367,115,1.497,121,1.829,127,2.593,217,2.911,286,3.887,287,2.057,288,3.887,289,4.636,290,2.915,291,2.713,292,2.915,294,1.829,341,2.713,353,2.464,411,2.713,413,2.464,420,2.361,421,1.497,425,2.713,426,2.713,436,3.011,437,3.011,438,3.011,439,3.386,440,3.386,441,2.464,547,2.361,558,3.346,559,2.361,561,2.361,562,2.361,564,2.361,586,2.593,726,2.361,727,2.823,728,2.823,729,2.823,730,4.001,731,2.823,732,2.823,733,2.823,734,2.823,735,2.823,736,2.823,737,2.823,738,2.823,739,2.823,740,2.823,741,2.823,742,2.823,743,2.823,744,1.829,745,2.823,746,2.823,747,2.823,748,2.823]],["title/interfaces/RequestInterface.html",[304,0.971,435,2.127]],["body/interfaces/RequestInterface.html",[12,0.031,19,0.417,20,0.417,21,0.37,24,0.466,54,0.551,56,0.022,57,0.022,63,0.417,64,1.271,65,1.172,77,0.851,78,1.275,97,1.811,173,1.866,183,2.055,304,1.378,306,1.866,341,3.238,353,2.941,411,3.368,412,2.281,413,3.059,421,1.866,423,2.055,424,2.565,425,3.238,426,3.238,427,2.281,428,2.281,429,2.565,430,2.944,431,2.281,432,1.438,433,2.944,434,2.565,435,3.016,436,3.595,437,3.595,438,3.595,439,4.042,440,4.042,441,2.941]],["title/modules/RequestModule.html",[0,1.052,15,1.74]],["body/modules/RequestModule.html",[0,1.888,2,1.527,3,1.665,4,2.007,5,2.007,6,1.665,7,3.008,8,2.674,12,0.032,13,2.732,14,2.911,15,3.277,16,2.674,17,2.007,18,2.007,19,0.407,20,0.407,21,0.361,23,2.674,24,0.833,25,2.228,26,2.228,30,2.228,31,1.405,34,0.939,51,2.505,53,2.429,54,0.407,55,0.156,56,0.022,57,0.022,73,1.356,103,2.674,106,1.665,210,2.007,316,3.832,317,2.505,318,2.875,319,2.505,320,2.007,321,2.875,432,1.405,441,1.823,442,2.228,450,2.969,566,2.969,568,3.339,604,2.875,661,2.875,663,2.875,664,4.079,665,2.875,749,2.875,750,2.875,751,2.875,752,3.438,753,3.438,754,3.438,755,3.438,756,3.438,757,3.438]],["title/injectables/RpcSuccessInterceptor.html",[199,1.341,322,1.14]],["body/injectables/RpcSuccessInterceptor.html",[12,0.032,19,0.424,20,0.424,21,0.376,24,0.623,34,0.978,54,0.424,55,0.163,56,0.022,57,0.022,63,0.424,65,0.901,73,1.06,77,0.474,78,0.698,83,1.06,97,1.244,128,1.348,134,2.495,151,1.734,153,1.734,159,2.28,199,1.923,202,2.28,223,2.148,304,1.06,322,1.635,323,2.09,758,2.32,759,3.936,760,3.05,761,3.619,762,3.619,763,3.619,764,3.581,765,2.995,766,2.32,767,2.32,768,2.336,769,2.32,770,2.747,771,2.32,772,2.32,773,2.747,774,2.09,775,2.32,776,2.32,777,3.05,778,2.32,779,2.32,780,3.05,781,2.747,782,3.05,783,2.32,784,2.32,785,1.898,786,2.747,787,2.32,788,2.32,789,2.32,790,2.32,791,2.32,792,2.32]],["title/injectables/RpcSuccessInterceptor-1.html",[199,1.127,322,0.959,785,1.463]],["body/injectables/RpcSuccessInterceptor-1.html",[12,0.032,19,0.416,20,0.416,21,0.369,24,0.615,34,0.959,54,0.416,55,0.16,56,0.022,57,0.022,63,0.416,65,0.884,73,1.039,77,0.465,78,0.685,83,1.039,97,1.22,128,1.322,134,2.464,151,1.701,153,1.701,159,2.251,199,1.899,202,2.251,223,2.128,304,1.039,322,1.614,323,2.05,744,2.276,759,3.887,760,3.011,761,3.592,762,3.736,763,3.592,765,2.937,766,2.276,767,2.276,768,2.313,769,2.276,770,2.712,771,2.276,772,2.276,773,2.712,774,2.05,775,2.276,776,2.276,777,3.011,778,2.276,779,2.276,780,3.011,781,2.712,782,3.011,783,2.276,784,2.276,785,1.862,786,2.712,787,2.276,788,2.276,789,2.276,790,2.276,791,2.276,792,2.276,793,2.276,794,3.512,795,2.937,796,2.937,797,2.937,798,2.937,799,2.937]],["title/coverage.html",[800,3.714]],["body/coverage.html",[6,1.516,12,0.031,21,0.329,38,1.178,55,0.267,56,0.02,57,0.02,62,2.786,77,0.414,129,2.028,131,2.51,132,2.028,133,2.618,145,2.028,156,1.827,199,1.757,205,1.659,220,2.028,254,2.618,304,1.64,305,2.028,307,2.618,322,1.925,324,2.618,334,1.659,409,2.028,410,2.618,423,1.827,424,3.133,432,1.279,435,2.028,442,2.028,443,2.786,450,2.028,452,2.618,457,2.28,458,2.28,485,2.618,537,2.786,566,2.028,568,2.028,569,2.618,586,2.028,664,2.028,726,2.618,758,3.427,768,1.91,773,3.235,793,3.427,800,2.618,801,3.13,802,3.13,803,3.13,804,6.553,805,3.13,806,4.912,807,4.912,808,5.543,809,6.134,810,3.13,811,3.13,812,3.13,813,3.13,814,4.3,815,3.596,816,3.596,817,4.912,818,4.3,819,3.13,820,3.13,821,3.13,822,3.13,823,3.13,824,3.13,825,3.596,826,2.618,827,2.618,828,2.618,829,3.13,830,3.13]],["title/dependencies.html",[3,1.907,831,2.308]],["body/dependencies.html",[3,2.123,12,0.032,31,1.791,33,3.193,34,1.197,55,0.243,56,0.025,57,0.025,59,3.665,108,2.558,114,2.123,203,2.558,287,3.193,292,3.193,320,2.558,744,2.84,832,6.014,833,4.383,834,4.383,835,4.383,836,4.383,837,4.383,838,4.383,839,4.383,840,4.383,841,4.383,842,4.383,843,4.383,844,4.383,845,4.383,846,4.383,847,4.383,848,4.383,849,4.383,850,4.383]],["title/miscellaneous/enumerations.html",[851,1.226,852,3.293]],["body/miscellaneous/enumerations.html",[12,0.031,56,0.026,57,0.026,63,0.527,294,4.166,413,2.863,425,3.152,426,3.152,432,1.818,434,3.241,534,3.721,851,1.976,852,3.721,853,5.813,854,4.449,855,4.449,856,4.449,857,4.449,858,4.449,859,4.449,860,4.449,861,4.449,862,4.449,863,4.449,864,4.449,865,4.449,866,4.449,867,4.449,868,4.449]],["title/miscellaneous/functions.html",[851,1.226,869,3.293]],["body/miscellaneous/functions.html",[6,2.754,12,0.031,56,0.025,57,0.025,63,0.501,65,1.495,73,1.758,77,0.752,78,1.021,151,2.877,153,2.877,758,2.742,768,2.326,770,3.056,774,3.056,781,3.468,786,3.056,793,2.742,815,4.969,816,4.969,828,3.538,851,1.879,869,3.538,870,4.231,871,5.236,872,5.236]],["title/index.html",[63,0.327,873,2.76,874,2.76]],["body/index.html",[12,0.028,37,3.714,38,1.919,56,0.028,57,0.028,875,5.098,876,5.098]],["title/modules.html",[2,1.973]],["body/modules.html",[1,3.079,2,2.111,11,2.773,12,0.027,13,2.519,14,2.301,15,2.519,56,0.027,57,0.027,877,6.179,878,6.179,879,6.179,880,6.305,881,4.751,882,4.751]],["title/overview.html",[883,3.714]],["body/overview.html",[0,1.216,1,4.116,2,1.685,3,1.837,4,2.214,5,2.214,6,1.837,7,2.214,8,2.214,9,3.173,10,3.173,11,3.156,12,0.031,13,3.305,14,3.02,15,3.305,16,2.852,17,2.214,18,2.214,53,2.011,56,0.023,57,0.023,61,1.685,205,3.263,306,2.011,309,3.173,310,3.173,312,3.173,323,2.214,334,3.263,454,3.173,455,3.173,456,3.173,664,3.988,749,3.173,750,3.173,751,3.173,883,3.173,884,5.406,885,3.794,886,3.794]],["title/properties.html",[64,1.075,831,2.308]],["body/properties.html",[12,0.031,56,0.027,57,0.027,64,1.359,67,2.41,887,4.977,888,4.977,889,4.977,890,4.977,891,4.977]],["title/interfaces/responsePayloadNatsInterface.html",[304,0.971,768,1.458]],["body/interfaces/responsePayloadNatsInterface.html",[12,0.032,19,0.42,20,0.42,21,0.372,24,0.619,34,0.968,54,0.42,55,0.161,56,0.022,57,0.022,63,0.42,64,1.277,65,1.4,77,0.692,78,0.692,97,1.818,128,1.335,159,2.265,199,1.449,202,2.265,223,2.138,304,1.05,306,1.88,322,1.624,758,2.298,760,2.298,761,3.03,762,3.03,763,3.03,766,2.298,767,2.298,768,2.471,769,3.605,770,3.247,771,3.605,772,3.605,773,2.73,774,2.07,775,2.298,776,2.298,777,3.03,778,2.298,779,2.298,780,3.03,781,2.73,782,3.03,783,2.298,784,2.298,785,1.88,786,2.73,787,2.298,788,2.298,789,2.298,790,2.298,791,2.298,792,2.298]],["title/interfaces/responsePayloadNatsInterface-1.html",[304,0.817,768,1.226,785,1.463]],["body/interfaces/responsePayloadNatsInterface-1.html",[12,0.032,19,0.412,20,0.412,21,0.365,24,0.611,34,0.95,54,0.412,55,0.158,56,0.022,57,0.022,63,0.412,64,1.261,65,1.39,77,0.686,78,0.678,97,1.8,128,1.31,159,2.236,199,1.421,202,2.236,223,2.118,304,1.03,306,1.844,322,1.604,744,2.254,760,2.254,761,2.992,762,3.359,763,2.992,766,2.254,767,2.254,768,2.453,769,3.578,770,3.223,771,3.578,772,3.578,773,2.695,774,2.031,775,2.254,776,2.254,777,2.992,778,2.254,779,2.254,780,2.992,781,2.695,782,2.992,783,2.254,784,2.254,785,1.844,786,2.695,787,2.254,788,2.254,789,2.254,790,2.254,791,2.254,792,2.254,793,2.254,795,2.909,796,2.909,797,2.909,798,2.909,799,2.909]],["title/miscellaneous/typealiases.html",[851,1.226,892,3.937]],["body/miscellaneous/typealiases.html",[12,0.027,56,0.027,57,0.027,62,3.171,63,0.579,77,0.647,115,3.03,443,3.171,449,4.163,537,3.171,560,4.163,851,2.174,893,4.894,894,4.093,895,4.093,896,4.093]],["title/miscellaneous/variables.html",[467,2.868,851,1.226]],["body/miscellaneous/variables.html",[12,0.031,45,1.807,56,0.026,57,0.026,62,2.866,63,0.523,77,0.585,78,0.862,129,3.486,130,3.698,294,4.006,415,5.171,443,2.866,450,3.486,451,3.698,467,3.222,537,2.866,566,3.486,567,3.698,825,3.698,826,4.499,827,4.499,851,1.964,894,3.698,895,3.698,896,3.698,897,5.38,898,4.422,899,4.422]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"modules/RequestModule.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":804,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":888,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":809,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":819,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":818,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":806,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":807,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":817,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":814,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":805,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":785,"title":{"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["10.0.0",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["15/16",{"_index":821,"title":{},"body":{"coverage.html":{}}}],["16.3.1",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["18/20",{"_index":824,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":885,"title":{},"body":{"overview.html":{}}}],["2.0.2",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["2.15.0",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["3.0.0",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":884,"title":{},"body":{"overview.html":{}}}],["7",{"_index":886,"title":{},"body":{"overview.html":{}}}],["7.0.2",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["8/9",{"_index":811,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":812,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":810,"title":{},"body":{"coverage.html":{}}}],["9/11",{"_index":813,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":823,"title":{},"body":{"coverage.html":{}}}],["93",{"_index":820,"title":{},"body":{"coverage.html":{}}}],["_context",{"_index":765,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{}}}],["accepted",{"_index":862,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["accessible",{"_index":484,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["accessors",{"_index":255,"title":{},"body":{"classes/EventDto.html":{}}}],["added",{"_index":392,"title":{},"body":{"injectables/EventService.html":{}}}],["addedgroups",{"_index":393,"title":{},"body":{"injectables/EventService.html":{}}}],["addresses",{"_index":480,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["aliases",{"_index":893,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aller",{"_index":856,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["annonce",{"_index":717,"title":{},"body":{"controllers/RequestController.html":{}}}],["api",{"_index":211,"title":{},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{}}}],["apiproperty",{"_index":107,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{}}}],["apiproperty()@maxlength(100)@isstring",{"_index":267,"title":{},"body":{"classes/EventDto.html":{}}}],["apiproperty()@maxlength(150)@isstring",{"_index":261,"title":{},"body":{"classes/EventDto.html":{}}}],["apiproperty()@maxlength(50)@minlength(3)@isstring",{"_index":272,"title":{},"body":{"classes/EventDto.html":{}}}],["apiproperty()@prop({required",{"_index":543,"title":{},"body":{"classes/Request.html":{}}}],["apiproperty()@type(undefined)@transform",{"_index":263,"title":{},"body":{"classes/EventDto.html":{}}}],["app",{"_index":167,"title":{},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{}}}],["app/nats",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/RequestModule.html":{}}}],["application",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["array.isarray(values",{"_index":783,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["association",{"_index":171,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/RequestController.html":{}}}],["association_id",{"_index":66,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"injectables/EventService.html":{}}}],["assoid",{"_index":347,"title":{},"body":{"injectables/EventService.html":{}}}],["async",{"_index":135,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{}}}],["attente",{"_index":861,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["author",{"_index":891,"title":{},"body":{"properties.html":{}}}],["available",{"_index":882,"title":{},"body":{"modules.html":{}}}],["await",{"_index":224,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{}}}],["body",{"_index":152,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/RequestController.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RequestModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["branche",{"_index":875,"title":{},"body":{"index.html":{}}}],["browse",{"_index":880,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":877,"title":{},"body":{"modules.html":{}}}],["cache",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/NatsMessengerModule.html":{}}}],["callhandler",{"_index":763,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["catch",{"_index":226,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{}}}],["cette",{"_index":233,"title":{},"body":{"controllers/EventController.html":{}}}],["changes",{"_index":376,"title":{},"body":{"injectables/EventService.html":{}}}],["charge",{"_index":317,"title":{},"body":{"modules/EventModule.html":{},"injectables/NatsMessengerService.html":{},"modules/RequestModule.html":{}}}],["class",{"_index":55,"title":{"classes/Event.html":{},"classes/EventDto.html":{},"classes/ExchangeDto.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"classes/Request.html":{},"classes/RequestDto.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/ExchangeDto.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{},"modules/RequestModule.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"coverage.html":{},"dependencies.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["classes",{"_index":61,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"classes/ExchangeDto.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"classes/Request.html":{},"classes/RequestDto.html":{},"overview.html":{}}}],["client",{"_index":469,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["clientproxy",{"_index":490,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["clientsmodule",{"_index":460,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["clientsmodule.register",{"_index":470,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_eventmodule",{"_index":309,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_eventmodule_exports",{"_index":310,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_eventmodule_imports",{"_index":311,"title":{},"body":{"modules/EventModule.html":{}}}],["cluster_eventmodule_providers",{"_index":312,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_natsmessengermodule",{"_index":454,"title":{},"body":{"modules/NatsMessengerModule.html":{},"overview.html":{}}}],["cluster_natsmessengermodule_exports",{"_index":455,"title":{},"body":{"modules/NatsMessengerModule.html":{},"overview.html":{}}}],["cluster_natsmessengermodule_providers",{"_index":456,"title":{},"body":{"modules/NatsMessengerModule.html":{},"overview.html":{}}}],["cluster_requestmodule",{"_index":749,"title":{},"body":{"modules/RequestModule.html":{},"overview.html":{}}}],["cluster_requestmodule_exports",{"_index":750,"title":{},"body":{"modules/RequestModule.html":{},"overview.html":{}}}],["cluster_requestmodule_imports",{"_index":752,"title":{},"body":{"modules/RequestModule.html":{}}}],["cluster_requestmodule_providers",{"_index":751,"title":{},"body":{"modules/RequestModule.html":{},"overview.html":{}}}],["cmd",{"_index":494,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["collection",{"_index":116,"title":{},"body":{"classes/Event.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{}}}],["communication",{"_index":475,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["complet",{"_index":860,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["config/config.module",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/NatsMessengerModule.html":{}}}],["configmodule.forroot",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/NatsMessengerModule.html":{}}}],["configure",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["configures",{"_index":464,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["confirm",{"_index":863,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["connect",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log",{"_index":241,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/RequestController.html":{}}}],["console.log(\"error",{"_index":511,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["console.log('send",{"_index":509,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["const",{"_index":128,"title":{},"body":{"classes/Event.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["constructor",{"_index":215,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{}}}],["constructor(eventmodel",{"_index":332,"title":{},"body":{"injectables/EventService.html":{}}}],["constructor(nats",{"_index":489,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["controller",{"_index":131,"title":{"controllers/EventController.html":{},"controllers/RequestController.html":{}},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{},"coverage.html":{}}}],["controllers",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"controllers/RequestController.html":{},"modules/RequestModule.html":{},"overview.html":{}}}],["coverage",{"_index":800,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":589,"title":{},"body":{"controllers/RequestController.html":{}}}],["createevent",{"_index":136,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["createevent(@payload('body",{"_index":250,"title":{},"body":{"controllers/EventController.html":{}}}],["createevent(body",{"_index":144,"title":{},"body":{"controllers/EventController.html":{}}}],["createevent(event",{"_index":337,"title":{},"body":{"injectables/EventService.html":{}}}],["createrequest",{"_index":570,"title":{},"body":{"controllers/RequestController.html":{}}}],["createrequest(params",{"_index":585,"title":{},"body":{"controllers/RequestController.html":{}}}],["creation",{"_index":148,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/RequestController.html":{}}}],["creer",{"_index":519,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["crée",{"_index":687,"title":{},"body":{"controllers/RequestController.html":{}}}],["current",{"_index":373,"title":{},"body":{"injectables/EventService.html":{}}}],["d",{"_index":712,"title":{},"body":{"controllers/RequestController.html":{}}}],["dans",{"_index":692,"title":{},"body":{"controllers/RequestController.html":{}}}],["data",{"_index":381,"title":{},"body":{"injectables/EventService.html":{}}}],["database",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/RequestModule.html":{}}}],["databasemodule",{"_index":11,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["datas",{"_index":772,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["date",{"_index":293,"title":{},"body":{"classes/EventDto.html":{}}}],["dd",{"_index":297,"title":{},"body":{"classes/EventDto.html":{}}}],["de",{"_index":427,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{},"interfaces/RequestInterface.html":{}}}],["decider",{"_index":230,"title":{},"body":{"controllers/EventController.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RequestModule.html":{},"overview.html":{}}}],["decorators",{"_index":79,"title":{},"body":{"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"classes/ExchangeDto.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{}}}],["default",{"_index":415,"title":{},"body":{"classes/ExchangeDto.html":{},"miscellaneous/variables.html":{}}}],["defaut",{"_index":433,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"interfaces/RequestInterface.html":{}}}],["defined",{"_index":83,"title":{},"body":{"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/ExchangeDto.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"injectables/NatsMessengerService.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{}}}],["defines",{"_index":471,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["delete",{"_index":159,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/RequestController.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["deleteevent",{"_index":137,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["deleteevent(@payload('params",{"_index":252,"title":{},"body":{"controllers/EventController.html":{}}}],["deleteevent(eventid",{"_index":339,"title":{},"body":{"injectables/EventService.html":{}}}],["deleteevent(params",{"_index":155,"title":{},"body":{"controllers/EventController.html":{}}}],["deleterequest",{"_index":571,"title":{},"body":{"controllers/RequestController.html":{}}}],["deleterequest(@payload('params",{"_index":702,"title":{},"body":{"controllers/RequestController.html":{}}}],["deleterequest(params",{"_index":592,"title":{},"body":{"controllers/RequestController.html":{}}}],["demande",{"_index":866,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["departure_time",{"_index":439,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{}}}],["departuretime",{"_index":538,"title":{},"body":{"classes/Request.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RequestModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":319,"title":{},"body":{"modules/EventModule.html":{},"injectables/NatsMessengerService.html":{},"modules/RequestModule.html":{}}}],["description",{"_index":67,"title":{},"body":{"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"injectables/EventService.html":{},"controllers/RequestController.html":{},"properties.html":{}}}],["determine",{"_index":385,"title":{},"body":{"injectables/EventService.html":{}}}],["dev",{"_index":876,"title":{},"body":{"index.html":{}}}],["direction",{"_index":438,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"classes/Request.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{}}}],["directionrequestenum",{"_index":425,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"classes/Request.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"miscellaneous/enumerations.html":{}}}],["directionrequestenum})@apiproperty",{"_index":541,"title":{},"body":{"classes/Request.html":{}}}],["disable",{"_index":796,"title":{},"body":{"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["document",{"_index":105,"title":{},"body":{"classes/Event.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{}}}],["documentation",{"_index":801,"title":{},"body":{"coverage.html":{}}}],["dossier",{"_index":697,"title":{},"body":{"controllers/RequestController.html":{}}}],["dotenv",{"_index":59,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["dotenv.config",{"_index":60,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["ds",{"_index":696,"title":{},"body":{"controllers/RequestController.html":{}}}],["dto/event.dto",{"_index":207,"title":{},"body":{"controllers/EventController.html":{}}}],["dto/exchange.dto",{"_index":666,"title":{},"body":{"controllers/RequestController.html":{}}}],["dto/id.dto",{"_index":208,"title":{},"body":{"controllers/EventController.html":{}}}],["dto/request.dto",{"_index":667,"title":{},"body":{"controllers/RequestController.html":{}}}],["each",{"_index":404,"title":{},"body":{"injectables/EventService.html":{},"classes/Request.html":{}}}],["eachgroupid",{"_index":405,"title":{},"body":{"injectables/EventService.html":{}}}],["eachnewgroupid",{"_index":400,"title":{},"body":{"injectables/EventService.html":{}}}],["email",{"_index":397,"title":{},"body":{"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{}}}],["email_to_index_users_by_group",{"_index":407,"title":{},"body":{"injectables/EventService.html":{}}}],["emit",{"_index":486,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["emit(cmd",{"_index":492,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["emitemailreplytoexchangereceived",{"_index":487,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["emitemailreplytoexchangereceived(email",{"_index":495,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["emitemailresponsetorequest",{"_index":488,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["emitemailresponsetorequest(email",{"_index":498,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["emits",{"_index":513,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["en",{"_index":534,"title":{},"body":{"injectables/NatsMessengerService.html":{},"miscellaneous/enumerations.html":{}}}],["enddate",{"_index":68,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{}}}],["endpoints",{"_index":212,"title":{},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{}}}],["endtime",{"_index":69,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{}}}],["enum",{"_index":445,"title":{},"body":{"classes/ExchangeRequest.html":{},"classes/Request.html":{}}}],["enum/request.enum",{"_index":421,"title":{},"body":{"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{}}}],["enumerations",{"_index":852,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":466,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["envoyer",{"_index":523,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["error",{"_index":227,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{}}}],["eslint",{"_index":795,"title":{},"body":{"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["eslint/ban",{"_index":799,"title":{},"body":{"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["et",{"_index":720,"title":{},"body":{"controllers/RequestController.html":{}}}],["event",{"_index":38,"title":{"classes/Event.html":{}},"body":{"modules/AppModule.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{},"coverage.html":{},"index.html":{}}}],["event.controller",{"_index":315,"title":{},"body":{"modules/EventModule.html":{}}}],["event.controller.ts:68",{"_index":242,"title":{},"body":{"controllers/EventController.html":{}}}],["event.service",{"_index":206,"title":{},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{}}}],["event.service.ts:87",{"_index":371,"title":{},"body":{"injectables/EventService.html":{}}}],["event/:id",{"_index":190,"title":{},"body":{"controllers/EventController.html":{}}}],["event/create",{"_index":150,"title":{},"body":{"controllers/EventController.html":{}}}],["event/delete/:id",{"_index":160,"title":{},"body":{"controllers/EventController.html":{}}}],["event/event.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["event/update/:id",{"_index":195,"title":{},"body":{"controllers/EventController.html":{}}}],["event_address",{"_index":70,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{}}}],["eventcontroller",{"_index":132,"title":{"controllers/EventController.html":{}},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"coverage.html":{}}}],["eventdocument",{"_index":115,"title":{},"body":{"classes/Event.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"classes/Request.html":{},"classes/RequestDto.html":{},"miscellaneous/typealiases.html":{}}}],["eventdto",{"_index":145,"title":{"classes/EventDto.html":{}},"body":{"controllers/EventController.html":{},"classes/EventDto.html":{},"coverage.html":{}}}],["eventdto):promise",{"_index":248,"title":{},"body":{"controllers/EventController.html":{}}}],["eventedit",{"_index":325,"title":{},"body":{"injectables/EventService.html":{}}}],["eventedit(eventid",{"_index":342,"title":{},"body":{"injectables/EventService.html":{}}}],["eventid",{"_index":341,"title":{},"body":{"injectables/EventService.html":{},"interfaces/ExchangeInterface.html":{},"classes/Request.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{}}}],["eventinterface",{"_index":305,"title":{"interfaces/EventInterface.html":{}},"body":{"interfaces/EventInterface.html":{},"injectables/EventService.html":{},"coverage.html":{}}}],["eventmodel",{"_index":336,"title":{},"body":{"injectables/EventService.html":{}}}],["eventmodule",{"_index":13,"title":{"modules/EventModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/RequestModule.html":{},"modules.html":{},"overview.html":{}}}],["events",{"_index":166,"title":{},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{}}}],["events/byasso/:id",{"_index":172,"title":{},"body":{"controllers/EventController.html":{}}}],["events/bygroup/:id",{"_index":178,"title":{},"body":{"controllers/EventController.html":{}}}],["events/byuser/:id",{"_index":185,"title":{},"body":{"controllers/EventController.html":{}}}],["eventschema",{"_index":129,"title":{},"body":{"classes/Event.html":{},"modules/EventModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["eventservice",{"_index":205,"title":{"injectables/EventService.html":{}},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"coverage.html":{},"overview.html":{}}}],["exchange",{"_index":627,"title":{},"body":{"controllers/RequestController.html":{}}}],["exchange/:id",{"_index":628,"title":{},"body":{"controllers/RequestController.html":{}}}],["exchange/byrequest/:id",{"_index":601,"title":{},"body":{"controllers/RequestController.html":{}}}],["exchange/byuser/:id",{"_index":633,"title":{},"body":{"controllers/RequestController.html":{}}}],["exchange/create/:id",{"_index":646,"title":{},"body":{"controllers/RequestController.html":{}}}],["exchange/reply/:id",{"_index":655,"title":{},"body":{"controllers/RequestController.html":{}}}],["exchangedto",{"_index":409,"title":{"classes/ExchangeDto.html":{}},"body":{"classes/ExchangeDto.html":{},"controllers/RequestController.html":{},"coverage.html":{}}}],["exchangedtopost",{"_index":647,"title":{},"body":{"controllers/RequestController.html":{}}}],["exchangeinterface",{"_index":423,"title":{"interfaces/ExchangeInterface.html":{}},"body":{"interfaces/ExchangeInterface.html":{},"controllers/RequestController.html":{},"interfaces/RequestInterface.html":{},"coverage.html":{}}}],["exchangeinterfacepost",{"_index":656,"title":{},"body":{"controllers/RequestController.html":{}}}],["exchangerequest",{"_index":442,"title":{"classes/ExchangeRequest.html":{}},"body":{"classes/ExchangeRequest.html":{},"modules/RequestModule.html":{},"coverage.html":{}}}],["exchangerequestdocument",{"_index":449,"title":{},"body":{"classes/ExchangeRequest.html":{},"controllers/RequestController.html":{},"miscellaneous/typealiases.html":{}}}],["exchanges",{"_index":441,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"modules/RequestModule.html":{}}}],["exchangeschema",{"_index":450,"title":{},"body":{"classes/ExchangeRequest.html":{},"modules/RequestModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":761,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["export",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"modules/RequestModule.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RequestModule.html":{},"overview.html":{}}}],["exports:[requestservice",{"_index":757,"title":{},"body":{"modules/RequestModule.html":{}}}],["express",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["faire",{"_index":691,"title":{},"body":{"controllers/RequestController.html":{}}}],["false",{"_index":119,"title":{},"body":{"classes/Event.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{}}}],["false})@ismongoid({each",{"_index":81,"title":{},"body":{"classes/Event.html":{}}}],["fichier",{"_index":694,"title":{},"body":{"controllers/RequestController.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"modules/RequestModule.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"coverage.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["find",{"_index":391,"title":{},"body":{"injectables/EventService.html":{}}}],["findallevents",{"_index":138,"title":{},"body":{"controllers/EventController.html":{}}}],["findallevents():promise",{"_index":235,"title":{},"body":{"controllers/EventController.html":{}}}],["findalleventsbyasso",{"_index":139,"title":{},"body":{"controllers/EventController.html":{}}}],["findalleventsbyasso(@payload('params",{"_index":239,"title":{},"body":{"controllers/EventController.html":{}}}],["findalleventsbyasso(params",{"_index":168,"title":{},"body":{"controllers/EventController.html":{}}}],["findalleventsbygroup",{"_index":140,"title":{},"body":{"controllers/EventController.html":{}}}],["findalleventsbygroup(@payload('params",{"_index":237,"title":{},"body":{"controllers/EventController.html":{}}}],["findalleventsbygroup(params",{"_index":174,"title":{},"body":{"controllers/EventController.html":{}}}],["findalleventsbyuser",{"_index":141,"title":{},"body":{"controllers/EventController.html":{}}}],["findalleventsbyuser(@payload('params",{"_index":244,"title":{},"body":{"controllers/EventController.html":{}}}],["findalleventsbyuser(params",{"_index":180,"title":{},"body":{"controllers/EventController.html":{}}}],["findallexchangesbyrequest",{"_index":572,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallexchangesbyrequest(@payload('params",{"_index":708,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallexchangesbyrequest(params",{"_index":597,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallrequests",{"_index":573,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallrequests():promise",{"_index":674,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallrequestsbyasso",{"_index":574,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallrequestsbyasso(@payload('params",{"_index":685,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallrequestsbyasso(params",{"_index":605,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallrequestsbyevents",{"_index":575,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallrequestsbyevents(@payload('params",{"_index":683,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallrequestsbyevents(params",{"_index":610,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallrequestsbyexchangemadebyuser",{"_index":576,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallrequestsbyexchangemadebyuser(@payload('params",{"_index":681,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallrequestsbyexchangemadebyuser(params",{"_index":614,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallrequestuserid",{"_index":577,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallrequestuserid(@payload('params",{"_index":676,"title":{},"body":{"controllers/RequestController.html":{}}}],["findallrequestuserid(params",{"_index":620,"title":{},"body":{"controllers/RequestController.html":{}}}],["findeschangebyid",{"_index":578,"title":{},"body":{"controllers/RequestController.html":{}}}],["findeschangebyid(@payload('params",{"_index":706,"title":{},"body":{"controllers/RequestController.html":{}}}],["findeschangebyid(params",{"_index":624,"title":{},"body":{"controllers/RequestController.html":{}}}],["findeventid",{"_index":142,"title":{},"body":{"controllers/EventController.html":{}}}],["findeventid(@payload('params",{"_index":219,"title":{},"body":{"controllers/EventController.html":{}}}],["findeventid(params",{"_index":186,"title":{},"body":{"controllers/EventController.html":{}}}],["findexchangebyuser",{"_index":579,"title":{},"body":{"controllers/RequestController.html":{}}}],["findexchangebyuser(@payload('params",{"_index":710,"title":{},"body":{"controllers/RequestController.html":{}}}],["findexchangebyuser(params",{"_index":629,"title":{},"body":{"controllers/RequestController.html":{}}}],["findrequestbyexchangeid",{"_index":580,"title":{},"body":{"controllers/RequestController.html":{}}}],["findrequestbyexchangeid(@payload('params",{"_index":671,"title":{},"body":{"controllers/RequestController.html":{}}}],["findrequestbyexchangeid(params",{"_index":635,"title":{},"body":{"controllers/RequestController.html":{}}}],["findrequestid",{"_index":581,"title":{},"body":{"controllers/RequestController.html":{}}}],["findrequestid(@payload('params",{"_index":669,"title":{},"body":{"controllers/RequestController.html":{}}}],["findrequestid(params",{"_index":639,"title":{},"body":{"controllers/RequestController.html":{}}}],["firstname",{"_index":436,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"classes/Request.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{}}}],["firstvaluefrom",{"_index":502,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["firstvaluefrom(this.nats.send(cmd",{"_index":510,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["formattedenddate",{"_index":258,"title":{},"body":{"classes/EventDto.html":{}}}],["formattedendtime",{"_index":259,"title":{},"body":{"classes/EventDto.html":{}}}],["formattedstartdate",{"_index":256,"title":{},"body":{"classes/EventDto.html":{}}}],["formattedstarttime",{"_index":257,"title":{},"body":{"classes/EventDto.html":{}}}],["forwardref",{"_index":316,"title":{},"body":{"modules/EventModule.html":{},"modules/RequestModule.html":{}}}],["found",{"_index":379,"title":{},"body":{"injectables/EventService.html":{},"controllers/RequestController.html":{}}}],["function",{"_index":773,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"coverage.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["functions",{"_index":869,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["garde",{"_index":232,"title":{},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{}}}],["get_user_by_id",{"_index":368,"title":{},"body":{"injectables/EventService.html":{}}}],["getallevents",{"_index":326,"title":{},"body":{"injectables/EventService.html":{}}}],["getalleventsbyasso",{"_index":327,"title":{},"body":{"injectables/EventService.html":{}}}],["getalleventsbyasso(assoid",{"_index":345,"title":{},"body":{"injectables/EventService.html":{}}}],["getalleventsbygroup",{"_index":328,"title":{},"body":{"injectables/EventService.html":{}}}],["getalleventsbygroup(groupid",{"_index":348,"title":{},"body":{"injectables/EventService.html":{}}}],["getalleventsbyuser",{"_index":329,"title":{},"body":{"injectables/EventService.html":{}}}],["getalleventsbyuser(userid",{"_index":351,"title":{},"body":{"injectables/EventService.html":{}}}],["geteventbyid",{"_index":330,"title":{},"body":{"injectables/EventService.html":{}}}],["geteventbyid(eventid",{"_index":354,"title":{},"body":{"injectables/EventService.html":{}}}],["geteventbyname",{"_index":331,"title":{},"body":{"injectables/EventService.html":{}}}],["geteventbyname(name",{"_index":356,"title":{},"body":{"injectables/EventService.html":{}}}],["getfirstvalue",{"_index":815,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getfirstvalue(values",{"_index":786,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["getformattedenddate",{"_index":282,"title":{},"body":{"classes/EventDto.html":{}}}],["getformattedendtime",{"_index":284,"title":{},"body":{"classes/EventDto.html":{}}}],["getformattedstartdate",{"_index":278,"title":{},"body":{"classes/EventDto.html":{}}}],["getformattedstarttime",{"_index":280,"title":{},"body":{"classes/EventDto.html":{}}}],["getting",{"_index":873,"title":{"index.html":{}},"body":{}}],["global",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["graph",{"_index":881,"title":{},"body":{"modules.html":{}}}],["group",{"_index":177,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["groupid",{"_index":350,"title":{},"body":{"injectables/EventService.html":{}}}],["groups",{"_index":71,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"injectables/EventService.html":{}}}],["groupslist",{"_index":403,"title":{},"body":{"injectables/EventService.html":{}}}],["handle",{"_index":790,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["handling",{"_index":210,"title":{},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{},"modules/RequestModule.html":{}}}],["id",{"_index":173,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"interfaces/ExchangeInterface.html":{},"classes/IdDto.html":{},"controllers/RequestController.html":{},"interfaces/RequestInterface.html":{}}}],["iddelete",{"_index":596,"title":{},"body":{"controllers/RequestController.html":{}}}],["iddto",{"_index":156,"title":{"classes/IdDto.html":{}},"body":{"controllers/EventController.html":{},"classes/IdDto.html":{},"controllers/RequestController.html":{},"coverage.html":{}}}],["iddto):promise",{"_index":221,"title":{},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{}}}],["identifier",{"_index":802,"title":{},"body":{"coverage.html":{}}}],["idget",{"_index":179,"title":{},"body":{"controllers/EventController.html":{}}}],["if(events",{"_index":243,"title":{},"body":{"controllers/EventController.html":{}}}],["il",{"_index":721,"title":{},"body":{"controllers/RequestController.html":{}}}],["image",{"_index":72,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{}}}],["image?:string",{"_index":308,"title":{},"body":{"interfaces/EventInterface.html":{}}}],["import",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"modules/RequestModule.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["imports",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/EventModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RequestModule.html":{}}}],["inclut",{"_index":530,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["index",{"_index":63,"title":{"index.html":{}},"body":{"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"injectables/EventService.html":{},"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"injectables/NatsMessengerService.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"modules/RequestModule.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["inject",{"_index":504,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["inject('nats_service",{"_index":506,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["injectable",{"_index":322,"title":{"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{}},"body":{"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"coverage.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["injectables",{"_index":323,"title":{},"body":{"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"overview.html":{}}}],["injectmodel",{"_index":359,"title":{},"body":{"injectables/EventService.html":{}}}],["injectmodel(event.name",{"_index":363,"title":{},"body":{"injectables/EventService.html":{}}}],["injects",{"_index":505,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["intercept",{"_index":759,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{}}}],["intercept(_context",{"_index":760,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["interface",{"_index":304,"title":{"interfaces/EventInterface.html":{},"interfaces/ExchangeInterface.html":{},"interfaces/RequestInterface.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}},"body":{"interfaces/EventInterface.html":{},"interfaces/ExchangeInterface.html":{},"interfaces/RequestInterface.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"coverage.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["interface/response.interface",{"_index":662,"title":{},"body":{"controllers/RequestController.html":{}}}],["interfaces",{"_index":306,"title":{},"body":{"interfaces/EventInterface.html":{},"interfaces/ExchangeInterface.html":{},"interfaces/RequestInterface.html":{},"overview.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["is_public_key",{"_index":826,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":558,"title":{},"body":{"classes/Request.html":{},"classes/RequestDto.html":{}}}],["isdate",{"_index":109,"title":{},"body":{"classes/Event.html":{},"classes/Request.html":{}}}],["isdatestring",{"_index":288,"title":{},"body":{"classes/EventDto.html":{},"classes/RequestDto.html":{}}}],["isdatestring()@isnotempty",{"_index":264,"title":{},"body":{"classes/EventDto.html":{}}}],["isenum",{"_index":420,"title":{},"body":{"classes/ExchangeDto.html":{},"classes/RequestDto.html":{}}}],["isenum(directionrequestenum",{"_index":745,"title":{},"body":{"classes/RequestDto.html":{}}}],["isenum(statusrequestenum",{"_index":748,"title":{},"body":{"classes/RequestDto.html":{}}}],["isenum(typerequestenum",{"_index":747,"title":{},"body":{"classes/RequestDto.html":{}}}],["isenum({statusrequestenum",{"_index":414,"title":{},"body":{"classes/ExchangeDto.html":{}}}],["isglobal",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/NatsMessengerModule.html":{}}}],["ismongoid",{"_index":110,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"classes/ExchangeDto.html":{},"classes/IdDto.html":{},"classes/Request.html":{},"classes/RequestDto.html":{}}}],["ismongoid()@isnotempty",{"_index":730,"title":{},"body":{"classes/RequestDto.html":{}}}],["ismongoid({each",{"_index":127,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"classes/Request.html":{},"classes/RequestDto.html":{}}}],["isnotempty",{"_index":289,"title":{},"body":{"classes/EventDto.html":{},"classes/RequestDto.html":{}}}],["isnotempty()@isenum(directionrequestenum",{"_index":728,"title":{},"body":{"classes/RequestDto.html":{}}}],["isnotempty()@isenum(statusrequestenum",{"_index":739,"title":{},"body":{"classes/RequestDto.html":{}}}],["isnotempty()@isenum(typerequestenum",{"_index":741,"title":{},"body":{"classes/RequestDto.html":{}}}],["isnumber",{"_index":290,"title":{},"body":{"classes/EventDto.html":{},"classes/Request.html":{},"classes/RequestDto.html":{}}}],["ispublic",{"_index":898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isstring",{"_index":291,"title":{},"body":{"classes/EventDto.html":{},"classes/ExchangeDto.html":{},"classes/IdDto.html":{},"classes/Request.html":{},"classes/RequestDto.html":{}}}],["isstring()@ismongoid",{"_index":418,"title":{},"body":{"classes/ExchangeDto.html":{},"classes/IdDto.html":{}}}],["isstring()@maxlength(200",{"_index":737,"title":{},"body":{"classes/RequestDto.html":{}}}],["json.parse(json.stringify(values",{"_index":787,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["l",{"_index":428,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{},"interfaces/RequestInterface.html":{}}}],["l'utilisateur",{"_index":715,"title":{},"body":{"controllers/RequestController.html":{}}}],["la",{"_index":431,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{},"interfaces/RequestInterface.html":{}}}],["le",{"_index":693,"title":{},"body":{"controllers/RequestController.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RequestModule.html":{},"overview.html":{}}}],["libs/nats",{"_index":457,"title":{},"body":{"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"coverage.html":{}}}],["license",{"_index":889,"title":{},"body":{"properties.html":{}}}],["lien",{"_index":531,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["line",{"_index":797,"title":{},"body":{"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["list",{"_index":165,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["load",{"_index":465,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["lorsque",{"_index":524,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["made",{"_index":600,"title":{},"body":{"controllers/RequestController.html":{}}}],["main",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["makes",{"_index":483,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["making",{"_index":375,"title":{},"body":{"injectables/EventService.html":{}}}],["manage",{"_index":463,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["managing",{"_index":361,"title":{},"body":{"injectables/EventService.html":{}}}],["map",{"_index":766,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["matching",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"modules/RequestModule.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":111,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{}}}],["max(20",{"_index":126,"title":{},"body":{"classes/Event.html":{}}}],["max(50",{"_index":299,"title":{},"body":{"classes/EventDto.html":{}}}],["max(50)@isnotempty()@isnumber",{"_index":274,"title":{},"body":{"classes/EventDto.html":{}}}],["maxlength",{"_index":112,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"classes/Request.html":{},"classes/RequestDto.html":{}}}],["maxlength(100",{"_index":123,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{}}}],["maxlength(150",{"_index":124,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{}}}],["maxlength(20",{"_index":562,"title":{},"body":{"classes/Request.html":{},"classes/RequestDto.html":{}}}],["maxlength(20)@isnumber",{"_index":735,"title":{},"body":{"classes/RequestDto.html":{}}}],["maxlength(200",{"_index":564,"title":{},"body":{"classes/Request.html":{},"classes/RequestDto.html":{}}}],["maxlength(255",{"_index":125,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{}}}],["maxlength(255)@isstring",{"_index":270,"title":{},"body":{"classes/EventDto.html":{}}}],["maxlength(50",{"_index":121,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"classes/Request.html":{},"classes/RequestDto.html":{}}}],["maxlength(50)@minlength(4)@isstring",{"_index":733,"title":{},"body":{"classes/RequestDto.html":{}}}],["messagepattern",{"_index":201,"title":{},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{}}}],["messagepattern('create_event",{"_index":146,"title":{},"body":{"controllers/EventController.html":{}}}],["messagepattern('create_exchange_to_request_id",{"_index":644,"title":{},"body":{"controllers/RequestController.html":{}}}],["messagepattern('create_request",{"_index":587,"title":{},"body":{"controllers/RequestController.html":{}}}],["messagepattern('delete_event",{"_index":157,"title":{},"body":{"controllers/EventController.html":{}}}],["messagepattern('delete_request",{"_index":593,"title":{},"body":{"controllers/RequestController.html":{}}}],["messagepattern('exchange_by_user",{"_index":630,"title":{},"body":{"controllers/RequestController.html":{}}}],["messagepattern('exchange_request_by_id",{"_index":625,"title":{},"body":{"controllers/RequestController.html":{}}}],["messagepattern('exchanges_by_request",{"_index":598,"title":{},"body":{"controllers/RequestController.html":{}}}],["messagepattern('get_event_by_id",{"_index":187,"title":{},"body":{"controllers/EventController.html":{}}}],["messagepattern('get_request_by_exchange",{"_index":636,"title":{},"body":{"controllers/RequestController.html":{}}}],["messagepattern('get_request_by_id",{"_index":640,"title":{},"body":{"controllers/RequestController.html":{}}}],["messagepattern('index_events",{"_index":162,"title":{},"body":{"controllers/EventController.html":{}}}],["messagepattern('index_events_by_asso",{"_index":169,"title":{},"body":{"controllers/EventController.html":{}}}],["messagepattern('index_events_by_group",{"_index":175,"title":{},"body":{"controllers/EventController.html":{}}}],["messagepattern('index_events_by_user",{"_index":181,"title":{},"body":{"controllers/EventController.html":{}}}],["messagepattern('index_requests",{"_index":602,"title":{},"body":{"controllers/RequestController.html":{}}}],["messagepattern('reply_to_exchange",{"_index":649,"title":{},"body":{"controllers/RequestController.html":{}}}],["messagepattern('requests_by_asso",{"_index":606,"title":{},"body":{"controllers/RequestController.html":{}}}],["messagepattern('requests_by_event",{"_index":611,"title":{},"body":{"controllers/RequestController.html":{}}}],["messagepattern('requests_by_exchange_by_user",{"_index":615,"title":{},"body":{"controllers/RequestController.html":{}}}],["messagepattern('requests_by_user_id",{"_index":621,"title":{},"body":{"controllers/RequestController.html":{}}}],["messagepattern('update_event",{"_index":192,"title":{},"body":{"controllers/EventController.html":{}}}],["messagepattern('update_request",{"_index":658,"title":{},"body":{"controllers/RequestController.html":{}}}],["messenger",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/RequestModule.html":{}}}],["messenger.module.ts",{"_index":459,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["messenger.service",{"_index":462,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["messenger.service.ts",{"_index":485,"title":{},"body":{"injectables/NatsMessengerService.html":{},"coverage.html":{}}}],["messenger.service.ts:16",{"_index":501,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["messenger.service.ts:26",{"_index":493,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["messenger.service.ts:35",{"_index":499,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["messenger.service.ts:46",{"_index":497,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["messenger.service.ts:7",{"_index":491,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["messenger/src/nats",{"_index":458,"title":{},"body":{"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"coverage.html":{}}}],["messenging",{"_index":321,"title":{},"body":{"modules/EventModule.html":{},"modules/RequestModule.html":{}}}],["metadata",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":134,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{}}}],["minlength",{"_index":113,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"classes/Request.html":{},"classes/RequestDto.html":{}}}],["minlength(3",{"_index":122,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{}}}],["minlength(4",{"_index":561,"title":{},"body":{"classes/Request.html":{},"classes/RequestDto.html":{}}}],["miscellaneous",{"_index":851,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":296,"title":{},"body":{"classes/EventDto.html":{}}}],["model",{"_index":333,"title":{},"body":{"injectables/EventService.html":{}}}],["modification",{"_index":194,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/RequestController.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/EventModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RequestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/EventModule.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"modules/RequestModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/EventModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RequestModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":292,"title":{},"body":{"classes/EventDto.html":{},"classes/RequestDto.html":{},"dependencies.html":{}}}],["moment(this.enddate).format('yyyy",{"_index":302,"title":{},"body":{"classes/EventDto.html":{}}}],["moment(this.endtime).format('hh:mm:ss",{"_index":303,"title":{},"body":{"classes/EventDto.html":{}}}],["moment(this.startdate).format('yyyy",{"_index":300,"title":{},"body":{"classes/EventDto.html":{}}}],["moment(this.starttime).format('hh:mm:ss",{"_index":301,"title":{},"body":{"classes/EventDto.html":{}}}],["moment(value).format('hh:mm",{"_index":746,"title":{},"body":{"classes/RequestDto.html":{}}}],["moment(value).format('hh:mm:ss",{"_index":298,"title":{},"body":{"classes/EventDto.html":{}}}],["moment(value).format('yyyy",{"_index":295,"title":{},"body":{"classes/EventDto.html":{}}}],["mongoose",{"_index":106,"title":{},"body":{"classes/Event.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{},"classes/RequestDto.html":{},"modules/RequestModule.html":{}}}],["mongoosemodule",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/EventModule.html":{},"modules/RequestModule.html":{}}}],["mongoosemodule.forfeature",{"_index":318,"title":{},"body":{"modules/EventModule.html":{},"modules/RequestModule.html":{}}}],["mongoosemodule.forroot(`${process.env.uri_bdd}?retrywrites=true&w=majority",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["ms",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/RequestController.html":{},"index.html":{}}}],["name",{"_index":73,"title":{},"body":{"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{},"modules/RequestModule.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"miscellaneous/functions.html":{}}}],["nats",{"_index":320,"title":{},"body":{"modules/EventModule.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"modules/RequestModule.html":{},"dependencies.html":{}}}],["nats://${process.env.nats_dns}:${process.env.nats_port",{"_index":481,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["nats_service",{"_index":473,"title":{},"body":{"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{}}}],["natsmessengermodule",{"_index":14,"title":{"modules/NatsMessengerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RequestModule.html":{},"modules.html":{},"overview.html":{}}}],["natsmessengerservice",{"_index":334,"title":{"injectables/NatsMessengerService.html":{}},"body":{"injectables/EventService.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"coverage.html":{},"overview.html":{}}}],["nbseat",{"_index":437,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"classes/Request.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{}}}],["nestjs/common",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{},"modules/RequestModule.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"dependencies.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["nestjs/config",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/NatsMessengerModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":203,"title":{},"body":{"controllers/EventController.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"classes/Event.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{},"modules/RequestModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":108,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{},"dependencies.html":{}}}],["new",{"_index":220,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/RequestController.html":{},"coverage.html":{}}}],["newexchangetorequest",{"_index":582,"title":{},"body":{"controllers/RequestController.html":{}}}],["newexchangetorequest(params",{"_index":643,"title":{},"body":{"controllers/RequestController.html":{}}}],["newgroups",{"_index":389,"title":{},"body":{"injectables/EventService.html":{}}}],["newgroups.filter(group",{"_index":394,"title":{},"body":{"injectables/EventService.html":{}}}],["next",{"_index":762,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["notfoundexception",{"_index":196,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/RequestController.html":{}}}],["notfoundexception('event",{"_index":378,"title":{},"body":{"injectables/EventService.html":{}}}],["notfoundexception('no",{"_index":680,"title":{},"body":{"controllers/RequestController.html":{}}}],["notfoundexception(error",{"_index":229,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/RequestController.html":{}}}],["notifications",{"_index":398,"title":{},"body":{"injectables/EventService.html":{}}}],["nouvelle",{"_index":690,"title":{},"body":{"controllers/RequestController.html":{}}}],["null",{"_index":788,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["number",{"_index":97,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"interfaces/ExchangeInterface.html":{},"classes/Request.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["object",{"_index":770,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["object.keys(values).length",{"_index":784,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["old",{"_index":386,"title":{},"body":{"injectables/EventService.html":{}}}],["oldevent",{"_index":377,"title":{},"body":{"injectables/EventService.html":{}}}],["oldevent.groups",{"_index":388,"title":{},"body":{"injectables/EventService.html":{}}}],["oldgroups",{"_index":387,"title":{},"body":{"injectables/EventService.html":{}}}],["oldgroups.includes(group",{"_index":395,"title":{},"body":{"injectables/EventService.html":{}}}],["oneway",{"_index":855,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["operations",{"_index":362,"title":{},"body":{"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{}}}],["optional",{"_index":65,"title":{},"body":{"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"injectables/EventService.html":{},"interfaces/ExchangeInterface.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["options",{"_index":477,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RequestModule.html":{},"overview.html":{}}}],["overview",{"_index":883,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":831,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":533,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["paginate",{"_index":769,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["param",{"_index":218,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/RequestController.html":{}}}],["parameters",{"_index":151,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":161,"title":{},"body":{"controllers/EventController.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{}}}],["params.id",{"_index":701,"title":{},"body":{"controllers/RequestController.html":{}}}],["parents",{"_index":399,"title":{},"body":{"injectables/EventService.html":{}}}],["part",{"_index":184,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["participant",{"_index":74,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{}}}],["participating",{"_index":402,"title":{},"body":{"injectables/EventService.html":{}}}],["payload",{"_index":202,"title":{},"body":{"controllers/EventController.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["payload('body",{"_index":247,"title":{},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{}}}],["payload('params",{"_index":246,"title":{},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{}}}],["payload.datas",{"_index":782,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["payload.paginate",{"_index":776,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["payload.statuscode",{"_index":779,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["pending",{"_index":434,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"interfaces/RequestInterface.html":{},"miscellaneous/enumerations.html":{}}}],["permet",{"_index":689,"title":{},"body":{"controllers/RequestController.html":{}}}],["peut",{"_index":722,"title":{},"body":{"controllers/RequestController.html":{}}}],["pickup_address",{"_index":440,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{}}}],["pickupaddress",{"_index":539,"title":{},"body":{"classes/Request.html":{}}}],["pipe(map(value",{"_index":791,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["post",{"_index":149,"title":{},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{}}}],["posted",{"_index":652,"title":{},"body":{"controllers/RequestController.html":{}}}],["pour",{"_index":522,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["prefix",{"_index":618,"title":{},"body":{"controllers/RequestController.html":{}}}],["private",{"_index":216,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{}}}],["process.env.prefix_uri}/request/${requestid",{"_index":518,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["production",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/NatsMessengerModule.html":{}}}],["promise",{"_index":154,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{}}}],["prop",{"_index":102,"title":{},"body":{"classes/Event.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{}}}],["prop()@apiproperty",{"_index":447,"title":{},"body":{"classes/ExchangeRequest.html":{}}}],["prop()@apiproperty()@ismongoid({each",{"_index":546,"title":{},"body":{"classes/Request.html":{}}}],["prop()@apiproperty()@max(20",{"_index":98,"title":{},"body":{"classes/Event.html":{}}}],["prop()@apiproperty()@maxlength(100",{"_index":90,"title":{},"body":{"classes/Event.html":{}}}],["prop()@apiproperty()@maxlength(150",{"_index":85,"title":{},"body":{"classes/Event.html":{}}}],["prop()@apiproperty()@maxlength(255",{"_index":93,"title":{},"body":{"classes/Event.html":{}}}],["prop()@apiproperty()@maxlength(50)@minlength(3",{"_index":95,"title":{},"body":{"classes/Event.html":{}}}],["prop({required",{"_index":80,"title":{},"body":{"classes/Event.html":{},"classes/Request.html":{}}}],["prop({type",{"_index":444,"title":{},"body":{"classes/ExchangeRequest.html":{}}}],["properties",{"_index":64,"title":{"properties.html":{}},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"classes/Request.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"properties.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["proposal",{"_index":867,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["propose",{"_index":868,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["provided",{"_index":632,"title":{},"body":{"controllers/RequestController.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RequestModule.html":{},"overview.html":{}}}],["provides",{"_index":482,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["publi",{"_index":716,"title":{},"body":{"controllers/RequestController.html":{}}}],["public",{"_index":827,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["publie",{"_index":714,"title":{},"body":{"controllers/RequestController.html":{}}}],["published",{"_index":608,"title":{},"body":{"controllers/RequestController.html":{}}}],["question",{"_index":535,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["qui",{"_index":429,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"controllers/RequestController.html":{},"interfaces/RequestInterface.html":{}}}],["readonly",{"_index":217,"title":{},"body":{"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/ExchangeDto.html":{},"classes/IdDto.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{}}}],["received",{"_index":653,"title":{},"body":{"controllers/RequestController.html":{}}}],["recoit",{"_index":525,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["reflect",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["refus",{"_index":865,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["refused",{"_index":864,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["register",{"_index":468,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["related",{"_index":213,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{}}}],["replied",{"_index":617,"title":{},"body":{"controllers/RequestController.html":{}}}],["replies",{"_index":654,"title":{},"body":{"controllers/RequestController.html":{}}}],["replytoexchangereceived",{"_index":583,"title":{},"body":{"controllers/RequestController.html":{}}}],["replytoexchangereceived(params",{"_index":648,"title":{},"body":{"controllers/RequestController.html":{}}}],["repondu",{"_index":430,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"interfaces/RequestInterface.html":{}}}],["reponse",{"_index":527,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["request",{"_index":432,"title":{"classes/Request.html":{}},"body":{"interfaces/ExchangeInterface.html":{},"injectables/NatsMessengerService.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"interfaces/RequestInterface.html":{},"modules/RequestModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["request.controller",{"_index":754,"title":{},"body":{"modules/RequestModule.html":{}}}],["request.controller.ts",{"_index":695,"title":{},"body":{"controllers/RequestController.html":{}}}],["request.controller.ts:172",{"_index":704,"title":{},"body":{"controllers/RequestController.html":{}}}],["request.controller.ts:74",{"_index":679,"title":{},"body":{"controllers/RequestController.html":{}}}],["request.service",{"_index":665,"title":{},"body":{"controllers/RequestController.html":{},"modules/RequestModule.html":{}}}],["request/:id",{"_index":642,"title":{},"body":{"controllers/RequestController.html":{}}}],["request/byexchange/:id",{"_index":638,"title":{},"body":{"controllers/RequestController.html":{}}}],["request/create/:id",{"_index":590,"title":{},"body":{"controllers/RequestController.html":{}}}],["request/delete/:id",{"_index":595,"title":{},"body":{"controllers/RequestController.html":{}}}],["request/request.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["request/update/:id",{"_index":660,"title":{},"body":{"controllers/RequestController.html":{}}}],["request_read_link",{"_index":536,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["requestcontroller",{"_index":568,"title":{"controllers/RequestController.html":{}},"body":{"controllers/RequestController.html":{},"modules/RequestModule.html":{},"coverage.html":{}}}],["requestdocument",{"_index":560,"title":{},"body":{"classes/Request.html":{},"controllers/RequestController.html":{},"miscellaneous/typealiases.html":{}}}],["requestdto",{"_index":586,"title":{"classes/RequestDto.html":{}},"body":{"controllers/RequestController.html":{},"classes/RequestDto.html":{},"coverage.html":{}}}],["requestdto):promise",{"_index":699,"title":{},"body":{"controllers/RequestController.html":{}}}],["requestdtopost",{"_index":591,"title":{},"body":{"controllers/RequestController.html":{}}}],["requestid",{"_index":496,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["requestinterface",{"_index":435,"title":{"interfaces/RequestInterface.html":{}},"body":{"interfaces/ExchangeInterface.html":{},"interfaces/RequestInterface.html":{},"coverage.html":{}}}],["requestmodule",{"_index":15,"title":{"modules/RequestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/RequestModule.html":{},"modules.html":{},"overview.html":{}}}],["requests",{"_index":604,"title":{},"body":{"controllers/RequestController.html":{},"modules/RequestModule.html":{}}}],["requests/asso/id",{"_index":609,"title":{},"body":{"controllers/RequestController.html":{}}}],["requests/byexchange/byuser/:id",{"_index":619,"title":{},"body":{"controllers/RequestController.html":{}}}],["requests/event/id",{"_index":613,"title":{},"body":{"controllers/RequestController.html":{}}}],["requests/user/:id",{"_index":623,"title":{},"body":{"controllers/RequestController.html":{}}}],["requestschema",{"_index":566,"title":{},"body":{"classes/Request.html":{},"modules/RequestModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requestservice",{"_index":664,"title":{},"body":{"controllers/RequestController.html":{},"modules/RequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["required",{"_index":120,"title":{},"body":{"classes/Event.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{}}}],["requête",{"_index":688,"title":{},"body":{"controllers/RequestController.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RequestModule.html":{},"overview.html":{}}}],["response",{"_index":508,"title":{},"body":{"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{}}}],["response_request_link",{"_index":517,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["responsepayloadnat",{"_index":816,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["responsepayloadnat(value",{"_index":792,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["responsepayloadnat(values",{"_index":774,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["responsepayloadnatsinterface",{"_index":768,"title":{"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["responsible",{"_index":209,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/RequestController.html":{}}}],["results",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"modules/RequestModule.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retour",{"_index":858,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["retrieve",{"_index":164,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/RequestController.html":{}}}],["return",{"_index":223,"title":{},"body":{"controllers/EventController.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["returns",{"_index":153,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"miscellaneous/functions.html":{}}}],["returntrip",{"_index":857,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["reçu",{"_index":718,"title":{},"body":{"controllers/RequestController.html":{}}}],["roundtrip",{"_index":859,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["route",{"_index":234,"title":{},"body":{"controllers/EventController.html":{}}}],["rpcsuccessinterceptor",{"_index":199,"title":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{}},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"coverage.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["rxjs",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["rxjs/internal/firstvaluefrom",{"_index":503,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["rxjs/operators",{"_index":767,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["répondre",{"_index":724,"title":{},"body":{"controllers/RequestController.html":{}}}],["réponse",{"_index":719,"title":{},"body":{"controllers/RequestController.html":{}}}],["schema",{"_index":103,"title":{},"body":{"classes/Event.html":{},"modules/EventModule.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{},"modules/RequestModule.html":{}}}],["schema/event.schema",{"_index":204,"title":{},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{}}}],["schema/exchangerequest.schema",{"_index":661,"title":{},"body":{"controllers/RequestController.html":{},"modules/RequestModule.html":{}}}],["schema/request.schema",{"_index":663,"title":{},"body":{"controllers/RequestController.html":{},"modules/RequestModule.html":{}}}],["schemafactory",{"_index":104,"title":{},"body":{"classes/Event.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{}}}],["schemafactory.createforclass(event",{"_index":130,"title":{},"body":{"classes/Event.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(exchangerequest",{"_index":451,"title":{},"body":{"classes/ExchangeRequest.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(request",{"_index":567,"title":{},"body":{"classes/Request.html":{},"miscellaneous/variables.html":{}}}],["schemas",{"_index":756,"title":{},"body":{"modules/RequestModule.html":{}}}],["send",{"_index":396,"title":{},"body":{"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{}}}],["send(cmd",{"_index":500,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["send_email_response_exchange",{"_index":529,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["send_email_response_request",{"_index":516,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["sending",{"_index":514,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["sends",{"_index":507,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["servers",{"_index":479,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["service",{"_index":360,"title":{},"body":{"injectables/EventService.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{}}}],["set",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/NatsMessengerModule.html":{}}}],["setmetadata(is_public_key",{"_index":899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["si",{"_index":231,"title":{},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"modules/RequestModule.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["specifies",{"_index":478,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["src/.../event.schema.ts",{"_index":894,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../exchangerequest.schema.ts",{"_index":895,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":870,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorators.ts",{"_index":897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request.enum.ts",{"_index":853,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../request.schema.ts",{"_index":896,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../rpcsuccess.interceptor.ts",{"_index":871,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../rpcsuccessinterceptor.ts",{"_index":872,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["src/config/config.module.ts",{"_index":58,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/decorators/public.decorators.ts",{"_index":825,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/event/dto/event.dto.ts",{"_index":254,"title":{},"body":{"classes/EventDto.html":{},"coverage.html":{}}}],["src/event/dto/event.dto.ts:12",{"_index":276,"title":{},"body":{"classes/EventDto.html":{}}}],["src/event/dto/event.dto.ts:19",{"_index":277,"title":{},"body":{"classes/EventDto.html":{}}}],["src/event/dto/event.dto.ts:26",{"_index":265,"title":{},"body":{"classes/EventDto.html":{}}}],["src/event/dto/event.dto.ts:33",{"_index":266,"title":{},"body":{"classes/EventDto.html":{}}}],["src/event/dto/event.dto.ts:39",{"_index":273,"title":{},"body":{"classes/EventDto.html":{}}}],["src/event/dto/event.dto.ts:44",{"_index":268,"title":{},"body":{"classes/EventDto.html":{}}}],["src/event/dto/event.dto.ts:49",{"_index":262,"title":{},"body":{"classes/EventDto.html":{}}}],["src/event/dto/event.dto.ts:53",{"_index":271,"title":{},"body":{"classes/EventDto.html":{}}}],["src/event/dto/event.dto.ts:58",{"_index":275,"title":{},"body":{"classes/EventDto.html":{}}}],["src/event/dto/event.dto.ts:61",{"_index":260,"title":{},"body":{"classes/EventDto.html":{}}}],["src/event/dto/event.dto.ts:64",{"_index":269,"title":{},"body":{"classes/EventDto.html":{}}}],["src/event/dto/event.dto.ts:66",{"_index":279,"title":{},"body":{"classes/EventDto.html":{}}}],["src/event/dto/event.dto.ts:69",{"_index":281,"title":{},"body":{"classes/EventDto.html":{}}}],["src/event/dto/event.dto.ts:73",{"_index":283,"title":{},"body":{"classes/EventDto.html":{}}}],["src/event/dto/event.dto.ts:77",{"_index":285,"title":{},"body":{"classes/EventDto.html":{}}}],["src/event/dto/id.dto",{"_index":668,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/event/dto/id.dto.ts",{"_index":452,"title":{},"body":{"classes/IdDto.html":{},"coverage.html":{}}}],["src/event/dto/id.dto.ts:6",{"_index":453,"title":{},"body":{"classes/IdDto.html":{}}}],["src/event/event.controller.ts",{"_index":133,"title":{},"body":{"controllers/EventController.html":{},"coverage.html":{}}}],["src/event/event.controller.ts:114",{"_index":147,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:128",{"_index":158,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:23",{"_index":188,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:37",{"_index":163,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:51",{"_index":176,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:65",{"_index":170,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:83",{"_index":182,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:98",{"_index":193,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.module",{"_index":755,"title":{},"body":{"modules/RequestModule.html":{}}}],["src/event/event.module.ts",{"_index":313,"title":{},"body":{"modules/EventModule.html":{}}}],["src/event/event.service.ts",{"_index":324,"title":{},"body":{"injectables/EventService.html":{},"coverage.html":{}}}],["src/event/event.service.ts:10",{"_index":335,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:111",{"_index":343,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:164",{"_index":340,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:21",{"_index":355,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:33",{"_index":357,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:45",{"_index":352,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:60",{"_index":344,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:72",{"_index":349,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:84",{"_index":346,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:98",{"_index":338,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/interface/event.interface",{"_index":358,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/interface/event.interface.ts",{"_index":307,"title":{},"body":{"interfaces/EventInterface.html":{},"coverage.html":{}}}],["src/event/schema/event.schema",{"_index":559,"title":{},"body":{"classes/Request.html":{},"classes/RequestDto.html":{}}}],["src/event/schema/event.schema.ts",{"_index":62,"title":{},"body":{"classes/Event.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/event/schema/event.schema.ts:13",{"_index":100,"title":{},"body":{"classes/Event.html":{}}}],["src/event/schema/event.schema.ts:18",{"_index":101,"title":{},"body":{"classes/Event.html":{}}}],["src/event/schema/event.schema.ts:23",{"_index":88,"title":{},"body":{"classes/Event.html":{}}}],["src/event/schema/event.schema.ts:28",{"_index":89,"title":{},"body":{"classes/Event.html":{}}}],["src/event/schema/event.schema.ts:34",{"_index":96,"title":{},"body":{"classes/Event.html":{}}}],["src/event/schema/event.schema.ts:39",{"_index":91,"title":{},"body":{"classes/Event.html":{}}}],["src/event/schema/event.schema.ts:44",{"_index":86,"title":{},"body":{"classes/Event.html":{}}}],["src/event/schema/event.schema.ts:49",{"_index":94,"title":{},"body":{"classes/Event.html":{}}}],["src/event/schema/event.schema.ts:54",{"_index":99,"title":{},"body":{"classes/Event.html":{}}}],["src/event/schema/event.schema.ts:59",{"_index":84,"title":{},"body":{"classes/Event.html":{}}}],["src/event/schema/event.schema.ts:64",{"_index":92,"title":{},"body":{"classes/Event.html":{}}}],["src/interceptor/rpcsuccess.interceptor.ts",{"_index":758,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{}}}],["src/interceptor/rpcsuccess.interceptor.ts:34",{"_index":764,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{}}}],["src/interceptor/rpcsuccessinterceptor",{"_index":200,"title":{},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{}}}],["src/interceptor/rpcsuccessinterceptor.ts",{"_index":793,"title":{},"body":{"injectables/RpcSuccessInterceptor-1.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["src/interceptor/rpcsuccessinterceptor.ts:36",{"_index":794,"title":{},"body":{"injectables/RpcSuccessInterceptor-1.html":{}}}],["src/main.ts",{"_index":828,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/request/dto/exchange.dto.ts",{"_index":410,"title":{},"body":{"classes/ExchangeDto.html":{},"coverage.html":{}}}],["src/request/dto/exchange.dto.ts:15",{"_index":417,"title":{},"body":{"classes/ExchangeDto.html":{}}}],["src/request/dto/exchange.dto.ts:9",{"_index":419,"title":{},"body":{"classes/ExchangeDto.html":{}}}],["src/request/dto/request.dto.ts",{"_index":726,"title":{},"body":{"classes/RequestDto.html":{},"coverage.html":{}}}],["src/request/dto/request.dto.ts:12",{"_index":731,"title":{},"body":{"classes/RequestDto.html":{}}}],["src/request/dto/request.dto.ts:16",{"_index":743,"title":{},"body":{"classes/RequestDto.html":{}}}],["src/request/dto/request.dto.ts:21",{"_index":734,"title":{},"body":{"classes/RequestDto.html":{}}}],["src/request/dto/request.dto.ts:25",{"_index":736,"title":{},"body":{"classes/RequestDto.html":{}}}],["src/request/dto/request.dto.ts:29",{"_index":729,"title":{},"body":{"classes/RequestDto.html":{}}}],["src/request/dto/request.dto.ts:33",{"_index":727,"title":{},"body":{"classes/RequestDto.html":{}}}],["src/request/dto/request.dto.ts:37",{"_index":738,"title":{},"body":{"classes/RequestDto.html":{}}}],["src/request/dto/request.dto.ts:41",{"_index":742,"title":{},"body":{"classes/RequestDto.html":{}}}],["src/request/dto/request.dto.ts:45",{"_index":740,"title":{},"body":{"classes/RequestDto.html":{}}}],["src/request/dto/request.dto.ts:49",{"_index":732,"title":{},"body":{"classes/RequestDto.html":{}}}],["src/request/enum/request.enum.ts",{"_index":854,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/request/interface/response.interface.ts",{"_index":424,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"interfaces/RequestInterface.html":{},"coverage.html":{}}}],["src/request/request.controller.ts",{"_index":569,"title":{},"body":{"controllers/RequestController.html":{},"coverage.html":{}}}],["src/request/request.controller.ts:104",{"_index":612,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/request/request.controller.ts:118",{"_index":607,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/request/request.controller.ts:136",{"_index":659,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/request/request.controller.ts:153",{"_index":588,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/request/request.controller.ts:169",{"_index":594,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/request/request.controller.ts:187",{"_index":645,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/request/request.controller.ts:204",{"_index":626,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/request/request.controller.ts:220",{"_index":599,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/request/request.controller.ts:234",{"_index":631,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/request/request.controller.ts:253",{"_index":650,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/request/request.controller.ts:27",{"_index":641,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/request/request.controller.ts:41",{"_index":637,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/request/request.controller.ts:55",{"_index":603,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/request/request.controller.ts:70",{"_index":622,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/request/request.controller.ts:90",{"_index":616,"title":{},"body":{"controllers/RequestController.html":{}}}],["src/request/request.module",{"_index":314,"title":{},"body":{"modules/EventModule.html":{}}}],["src/request/request.module.ts",{"_index":753,"title":{},"body":{"modules/RequestModule.html":{}}}],["src/request/request.service.ts",{"_index":822,"title":{},"body":{"coverage.html":{}}}],["src/request/schema/exchangerequest.schema.ts",{"_index":443,"title":{},"body":{"classes/ExchangeRequest.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/request/schema/exchangerequest.schema.ts:12",{"_index":448,"title":{},"body":{"classes/ExchangeRequest.html":{}}}],["src/request/schema/exchangerequest.schema.ts:20",{"_index":446,"title":{},"body":{"classes/ExchangeRequest.html":{}}}],["src/request/schema/request.schema.ts",{"_index":537,"title":{},"body":{"classes/Request.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/request/schema/request.schema.ts:16",{"_index":545,"title":{},"body":{"classes/Request.html":{}}}],["src/request/schema/request.schema.ts:21",{"_index":557,"title":{},"body":{"classes/Request.html":{}}}],["src/request/schema/request.schema.ts:28",{"_index":550,"title":{},"body":{"classes/Request.html":{}}}],["src/request/schema/request.schema.ts:34",{"_index":552,"title":{},"body":{"classes/Request.html":{}}}],["src/request/schema/request.schema.ts:38",{"_index":542,"title":{},"body":{"classes/Request.html":{}}}],["src/request/schema/request.schema.ts:42",{"_index":540,"title":{},"body":{"classes/Request.html":{}}}],["src/request/schema/request.schema.ts:48",{"_index":554,"title":{},"body":{"classes/Request.html":{}}}],["src/request/schema/request.schema.ts:52",{"_index":556,"title":{},"body":{"classes/Request.html":{}}}],["src/request/schema/request.schema.ts:58",{"_index":548,"title":{},"body":{"classes/Request.html":{}}}],["startdate",{"_index":75,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{}}}],["started",{"_index":874,"title":{"index.html":{}},"body":{}}],["starttime",{"_index":76,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{}}}],["statements",{"_index":803,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":411,"title":{},"body":{"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{}}}],["statuscode",{"_index":771,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["statusrequestenum",{"_index":413,"title":{},"body":{"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"miscellaneous/enumerations.html":{}}}],["statusrequestenum.pending",{"_index":422,"title":{},"body":{"classes/ExchangeDto.html":{}}}],["string",{"_index":78,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"injectables/EventService.html":{},"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"injectables/NatsMessengerService.html":{},"classes/Request.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{},"miscellaneous/variables.html":{}}}],["string):promise",{"_index":528,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["string,enum",{"_index":563,"title":{},"body":{"classes/Request.html":{}}}],["support",{"_index":878,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":879,"title":{},"body":{"modules.html":{}}}],["table",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":521,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["this.emit",{"_index":515,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["this.eventmodel.create({...event",{"_index":372,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventmodel.find",{"_index":370,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventmodel.findbyid(eventid",{"_index":364,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventmodel.findbyidandremove(eventid",{"_index":408,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventmodel.findbyidandupdate",{"_index":383,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventmodel.findone",{"_index":365,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventservice.createevent(body",{"_index":251,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.deleteevent(params.id",{"_index":253,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.eventedit(params.id",{"_index":249,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.getallevents",{"_index":236,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.getalleventsbyasso(params.id",{"_index":240,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.getalleventsbygroup(params.id",{"_index":238,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.getalleventsbyuser(params.id",{"_index":245,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.geteventbyid(params.id",{"_index":225,"title":{},"body":{"controllers/EventController.html":{}}}],["this.getalleventsbygroup(userdetails.group_id",{"_index":369,"title":{},"body":{"injectables/EventService.html":{}}}],["this.nats.emit(cmd",{"_index":512,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["this.natsmessengerservice.emit",{"_index":406,"title":{},"body":{"injectables/EventService.html":{}}}],["this.natsmessengerservice.emit('email_to_index_users_new_group",{"_index":401,"title":{},"body":{"injectables/EventService.html":{}}}],["this.natsmessengerservice.send",{"_index":367,"title":{},"body":{"injectables/EventService.html":{}}}],["this.requestservice.createexchangetorequest(params.id",{"_index":705,"title":{},"body":{"controllers/RequestController.html":{}}}],["this.requestservice.createrequestevent(body",{"_index":700,"title":{},"body":{"controllers/RequestController.html":{}}}],["this.requestservice.deleterequest(params.id",{"_index":703,"title":{},"body":{"controllers/RequestController.html":{}}}],["this.requestservice.editrequest(params.id",{"_index":698,"title":{},"body":{"controllers/RequestController.html":{}}}],["this.requestservice.findrequestrelatedtouserforevent(params.id",{"_index":678,"title":{},"body":{"controllers/RequestController.html":{}}}],["this.requestservice.getallexchangesbyrequest(params.id",{"_index":709,"title":{},"body":{"controllers/RequestController.html":{}}}],["this.requestservice.getallrequests",{"_index":675,"title":{},"body":{"controllers/RequestController.html":{}}}],["this.requestservice.getallrequestsbyasso(params.id",{"_index":686,"title":{},"body":{"controllers/RequestController.html":{}}}],["this.requestservice.getallrequestsbyevent(params.id",{"_index":684,"title":{},"body":{"controllers/RequestController.html":{}}}],["this.requestservice.getallrequestsbyexchangemadebyuser(params.id",{"_index":682,"title":{},"body":{"controllers/RequestController.html":{}}}],["this.requestservice.getexchangebyid(params.id",{"_index":707,"title":{},"body":{"controllers/RequestController.html":{}}}],["this.requestservice.getexchangesbyuser(params.id",{"_index":711,"title":{},"body":{"controllers/RequestController.html":{}}}],["this.requestservice.getrequestbyexchangeid(params.id",{"_index":672,"title":{},"body":{"controllers/RequestController.html":{}}}],["this.requestservice.getrequestbyid(params.id",{"_index":670,"title":{},"body":{"controllers/RequestController.html":{}}}],["this.requestservice.getrequestsbyuserid(params.id",{"_index":677,"title":{},"body":{"controllers/RequestController.html":{}}}],["this.requestservice.replytoexchangereceived(params.id",{"_index":725,"title":{},"body":{"controllers/RequestController.html":{}}}],["through",{"_index":189,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/RequestController.html":{}}}],["throw",{"_index":228,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/RequestController.html":{}}}],["timestamps",{"_index":117,"title":{},"body":{"classes/Event.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{}}}],["todo",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"controllers/EventController.html":{},"modules/NatsMessengerModule.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{}}}],["transform",{"_index":286,"title":{},"body":{"classes/EventDto.html":{},"classes/RequestDto.html":{}}}],["transformer",{"_index":287,"title":{},"body":{"classes/EventDto.html":{},"classes/RequestDto.html":{},"dependencies.html":{}}}],["transport",{"_index":461,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["transport.nats",{"_index":476,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["true",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"classes/Event.html":{},"classes/EventDto.html":{},"injectables/EventService.html":{},"classes/ExchangeRequest.html":{},"modules/NatsMessengerModule.html":{},"classes/Request.html":{},"classes/RequestDto.html":{},"miscellaneous/variables.html":{}}}],["true,type",{"_index":565,"title":{},"body":{"classes/Request.html":{}}}],["true})@apiproperty",{"_index":82,"title":{},"body":{"classes/Event.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{}}}],["true})@apiproperty()@isdate",{"_index":87,"title":{},"body":{"classes/Event.html":{}}}],["true})@isarray",{"_index":547,"title":{},"body":{"classes/Request.html":{},"classes/RequestDto.html":{}}}],["true})@ismongoid({each",{"_index":544,"title":{},"body":{"classes/Request.html":{}}}],["true})@isstring()@maxlength(200)@apiproperty",{"_index":553,"title":{},"body":{"classes/Request.html":{}}}],["true})@maxlength(20)@isnumber()@apiproperty",{"_index":551,"title":{},"body":{"classes/Request.html":{}}}],["true})@maxlength(50)@minlength(4)@isstring()@apiproperty",{"_index":549,"title":{},"body":{"classes/Request.html":{}}}],["try",{"_index":222,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{}}}],["type",{"_index":77,"title":{},"body":{"classes/Event.html":{},"controllers/EventController.html":{},"classes/EventDto.html":{},"interfaces/EventInterface.html":{},"injectables/EventService.html":{},"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"classes/IdDto.html":{},"injectables/NatsMessengerService.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":892,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typerequestenum",{"_index":426,"title":{},"body":{"interfaces/ExchangeInterface.html":{},"classes/Request.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{},"miscellaneous/enumerations.html":{}}}],["typerequestenum})@apiproperty",{"_index":555,"title":{},"body":{"classes/Request.html":{}}}],["types",{"_index":744,"title":{},"body":{"classes/RequestDto.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"dependencies.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["typescript",{"_index":798,"title":{},"body":{"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["un",{"_index":520,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["undefined",{"_index":416,"title":{},"body":{"classes/ExchangeDto.html":{},"classes/ExchangeRequest.html":{}}}],["une",{"_index":526,"title":{},"body":{"injectables/NatsMessengerService.html":{},"controllers/RequestController.html":{}}}],["unique",{"_index":472,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["unknown",{"_index":634,"title":{},"body":{"controllers/RequestController.html":{}}}],["unlicensed",{"_index":890,"title":{},"body":{"properties.html":{}}}],["update",{"_index":380,"title":{},"body":{"injectables/EventService.html":{}}}],["updated",{"_index":384,"title":{},"body":{"injectables/EventService.html":{}}}],["updatedevent",{"_index":382,"title":{},"body":{"injectables/EventService.html":{}}}],["updatedevent.groups",{"_index":390,"title":{},"body":{"injectables/EventService.html":{}}}],["updateeventedit",{"_index":143,"title":{},"body":{"controllers/EventController.html":{}}}],["updateeventedit(params",{"_index":191,"title":{},"body":{"controllers/EventController.html":{}}}],["updaterequest",{"_index":584,"title":{},"body":{"controllers/RequestController.html":{}}}],["updaterequest(params",{"_index":657,"title":{},"body":{"controllers/RequestController.html":{}}}],["useinterceptors",{"_index":197,"title":{},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{}}}],["useinterceptors(rpcsuccessinterceptor",{"_index":214,"title":{},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{}}}],["user",{"_index":183,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"interfaces/ExchangeInterface.html":{},"controllers/RequestController.html":{},"interfaces/RequestInterface.html":{}}}],["user_id",{"_index":412,"title":{},"body":{"classes/ExchangeDto.html":{},"interfaces/ExchangeInterface.html":{},"classes/ExchangeRequest.html":{},"interfaces/RequestInterface.html":{}}}],["userdetails",{"_index":366,"title":{},"body":{"injectables/EventService.html":{}}}],["userid",{"_index":353,"title":{},"body":{"injectables/EventService.html":{},"interfaces/ExchangeInterface.html":{},"classes/Request.html":{},"controllers/RequestController.html":{},"classes/RequestDto.html":{},"interfaces/RequestInterface.html":{}}}],["uses",{"_index":474,"title":{},"body":{"modules/NatsMessengerModule.html":{}}}],["using",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"injectables/NatsMessengerService.html":{}}}],["utilisateur",{"_index":713,"title":{},"body":{"controllers/RequestController.html":{}}}],["validationpipe",{"_index":198,"title":{},"body":{"controllers/EventController.html":{},"controllers/RequestController.html":{}}}],["validator",{"_index":114,"title":{},"body":{"classes/Event.html":{},"classes/EventDto.html":{},"classes/ExchangeDto.html":{},"classes/IdDto.html":{},"classes/Request.html":{},"classes/RequestDto.html":{},"dependencies.html":{}}}],["value",{"_index":294,"title":{},"body":{"classes/EventDto.html":{},"classes/RequestDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":781,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"miscellaneous/functions.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["values.code",{"_index":780,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["values.paginate",{"_index":777,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["values?.code",{"_index":778,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["values?.paginate",{"_index":775,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["values[object.keys(values)[0",{"_index":789,"title":{},"body":{"injectables/RpcSuccessInterceptor.html":{},"injectables/RpcSuccessInterceptor-1.html":{},"interfaces/responsePayloadNatsInterface.html":{},"interfaces/responsePayloadNatsInterface-1.html":{}}}],["variable",{"_index":808,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":467,"title":{"miscellaneous/variables.html":{}},"body":{"modules/NatsMessengerModule.html":{},"miscellaneous/variables.html":{}}}],["vers",{"_index":532,"title":{},"body":{"injectables/NatsMessengerService.html":{}}}],["version",{"_index":887,"title":{},"body":{"properties.html":{}}}],["versionkey",{"_index":118,"title":{},"body":{"classes/Event.html":{},"classes/ExchangeRequest.html":{},"classes/Request.html":{}}}],["voir",{"_index":673,"title":{},"body":{"controllers/RequestController.html":{}}}],["whi",{"_index":651,"title":{},"body":{"controllers/RequestController.html":{}}}],["without",{"_index":374,"title":{},"body":{"injectables/EventService.html":{},"injectables/NatsMessengerService.html":{}}}],["y",{"_index":723,"title":{},"body":{"controllers/RequestController.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules/NatsMessengerModule.html":{},"modules/RequestModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nNatsMessengerModule\n\nNatsMessengerModule\n\nAppModule -->\n\nNatsMessengerModule->AppModule\n\n\n\n\n\nRequestModule\n\nRequestModule\n\nAppModule -->\n\nRequestModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            EventModule\n                        \n                        \n                            NatsMessengerModule\n                        \n                        \n                            RequestModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NatsMessengerModule } from '@app/nats-messenger';\nimport { RequestModule } from './Request/request.module';\nimport { DatabaseModule } from './Config/config.module';\nimport { EventModule } from './Event/event.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule } from '@nestjs/config';\nimport { Module } from '@nestjs/common';\n\n//Main module from the application ms-event\n@Module({\n  imports: [\n    // Configure global application settings using ConfigModule\n    ConfigModule.forRoot({\n      isGlobal: true,\n      //TODO set to true for PRODUCTION\n      //cache: true,\n    }),\n    // Configure MongooseModule to connect to the database\n    MongooseModule.forRoot(`${process.env.URI_BDD}?retryWrites=true&w=majority`),\n    NatsMessengerModule, \n    DatabaseModule,\n    RequestModule,\n    EventModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Config/config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport * as dotenv from 'dotenv';\n\ndotenv.config();\n\n@Module({\n    imports: [MongooseModule.forRoot(`${process.env.URI_BDD}?retryWrites=true&w=majority`)],\n})\nexport class DatabaseModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Event.html":{"url":"classes/Event.html","title":"class - Event","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Event\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Event/Schema/event.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                association_id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                endDate\n                            \n                            \n                                    \n                                    \n                                    \n                                endTime\n                            \n                            \n                                    \n                                    \n                                    \n                                event_address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                groups\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                participant\n                            \n                            \n                                    \n                                    \n                                    \n                                startDate\n                            \n                            \n                                    \n                                    \n                                    \n                                startTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        association_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})@IsMongoId({each: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Schema/event.schema.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@ApiProperty()@MaxLength(150)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Schema/event.schema.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@ApiProperty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Schema/event.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        endTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@ApiProperty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Schema/event.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        event_address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@ApiProperty()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Schema/event.schema.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        groups\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [string]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: false})@IsMongoId({each: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Schema/event.schema.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@ApiProperty()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Schema/event.schema.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@ApiProperty()@MaxLength(50)@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Schema/event.schema.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        participant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@ApiProperty()@Max(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Schema/event.schema.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@ApiProperty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Schema/event.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@ApiProperty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Schema/event.schema.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsMongoId, Max, MaxLength, MinLength } from 'class-validator';\n\nexport type EventDocument = Event & Document;\n@Schema({ collection: 'event', timestamps: true, versionKey: false })\nexport class Event {\n\n  @Prop({ required: true })\n  @ApiProperty()\n  @IsDate()\n  startDate: string;\n\n  @Prop({ required: true })\n  @ApiProperty()\n  @IsDate()\n  startTime: string;\n  \n  @Prop({ required: true })\n  @ApiProperty()\n  @IsDate()\n  endDate: string;\n\n  @Prop({ required: true })\n  @ApiProperty()\n  @IsDate()\n  endTime: string;\n\n  @Prop()\n  @ApiProperty()\n  @MaxLength(50)\n  @MinLength(3)\n  name: string;\n  \n  @Prop()\n  @ApiProperty()\n  @MaxLength(100)\n  event_address: string;\n  \n  @Prop()\n  @ApiProperty()\n  @MaxLength(150)\n  description?: string;\n  \n  @Prop()\n  @ApiProperty()\n  @MaxLength(255)\n  image?: string;\n  \n  @Prop()\n  @ApiProperty()\n  @Max(20)\n  participant?: number;\n \n  @Prop({required: false })\n  @IsMongoId({each: true})\n  @ApiProperty()\n  association_id?: string;\n  \n  @Prop({required: false })\n  @IsMongoId({each: true})\n  @ApiProperty()\n  groups?: [string];\n}\nexport const EventSchema = SchemaFactory.createForClass(Event);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventController.html":{"url":"controllers/EventController.html","title":"controller - EventController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Event/event.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createEvent\n                            \n                            \n                                    \n                                    Async\n                                deleteEvent\n                            \n                            \n                                    \n                                    Async\n                                findAllEvents\n                            \n                            \n                                    \n                                    Async\n                                findAllEventsByAsso\n                            \n                            \n                                    \n                                    Async\n                                findAllEventsByGroup\n                            \n                            \n                                    \n                                    Async\n                                findAllEventsByUser\n                            \n                            \n                                    \n                                    Async\n                                findEventId\n                            \n                            \n                                    \n                                    Async\n                                updateEventEdit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEvent(body: EventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('CREATE_EVENT')\n                \n            \n\n                    \n                        \n                            Defined in src/Event/event.controller.ts:114\n                        \n                    \n\n\n            \n                \n                        Creation of an event\nPOST - 'event/create'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            EventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteEvent(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('DELETE_EVENT')\n                \n            \n\n                    \n                        \n                            Defined in src/Event/event.controller.ts:128\n                        \n                    \n\n\n            \n                \n                        Delete an event\nDELETE - 'event/delete/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllEvents()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('INDEX_EVENTS')\n                \n            \n\n                    \n                        \n                            Defined in src/Event/event.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Retrieve the list of all events on the app\nGET - 'events'\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllEventsByAsso\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllEventsByAsso(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('INDEX_EVENTS_BY_ASSO')\n                \n            \n\n                    \n                        \n                            Defined in src/Event/event.controller.ts:65\n                        \n                    \n\n\n            \n                \n                        Retrieve all the events of an association\nGET - 'events/byAsso/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  association ID \nGET - 'events/byAsso/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllEventsByGroup\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllEventsByGroup(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('INDEX_EVENTS_BY_GROUP')\n                \n            \n\n                    \n                        \n                            Defined in src/Event/event.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Retrieve all the events of a group\nGET - 'events/byGroup/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  group IDGET - 'events/byGroup/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllEventsByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllEventsByUser(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('INDEX_EVENTS_BY_USER')\n                \n            \n\n                    \n                        \n                            Defined in src/Event/event.controller.ts:83\n                        \n                    \n\n\n            \n                \n                        Retrieve all the events an user is part of\nGET - 'events/byUser/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  user ID \nGET - 'events/byUser/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findEventId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEventId(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('GET_EVENT_BY_ID')\n                \n            \n\n                    \n                        \n                            Defined in src/Event/event.controller.ts:23\n                        \n                    \n\n\n            \n                \n                        Retrieve an event through its ID\nGET - 'event/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  User ID\nGET - 'event/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateEventEdit\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateEventEdit(params: IdDto, body: EventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('UPDATE_EVENT')\n                \n            \n\n                    \n                        \n                            Defined in src/Event/event.controller.ts:98\n                        \n                    \n\n\n            \n                \n                        Modification of an event\nGET - 'event/update/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  event ID\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            EventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, NotFoundException, UseInterceptors, ValidationPipe } from '@nestjs/common'\nimport { RpcSuccessInterceptor } from 'src/Interceptor/RpcSuccessInterceptor'\nimport { MessagePattern, Payload } from '@nestjs/microservices'\nimport { EventDocument } from './Schema/event.schema';\nimport { EventService } from './event.service'\nimport { EventDto } from './Dto/event.dto'\nimport { IdDto } from './Dto/id.dto'\n\n// Controller responsible for handling API endpoints related to EVENTS\n@Controller()\n@UseInterceptors(RpcSuccessInterceptor)\nexport class EventController {\n\n    constructor(\n        private readonly eventService: EventService) { }\n\n    /**\n     * Retrieve an event through its ID \n     * @param params - IdDto -  User ID\n     * GET - 'event/:id'\n     */\n    @MessagePattern('GET_EVENT_BY_ID')\n    async findEventId(@Payload('params', new ValidationPipe()) params: IdDto):Promise {\n        try {\n            return await this.eventService.getEventById(params.id)          \n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    //TODO / DECIDER SI ON GARDE CETTE ROUTE \n    /**\n     * Retrieve the list of all events on the app \n     * GET - 'events'\n     */\n    @MessagePattern('INDEX_EVENTS')\n    async findAllEvents():Promise {\n       try {\n        return await this.eventService.getAllEvents();\n       } catch (error) {\n        throw new NotFoundException(error) \n       }\n    }\n\n    /**\n     * Retrieve all the events of a group \n     * @param params - IdDto -  group ID  \n     * GET - 'events/byGroup/:id'\n     */\n    @MessagePattern('INDEX_EVENTS_BY_GROUP')\n    async findAllEventsByGroup(@Payload('params', new ValidationPipe()) params: IdDto):Promise {\n       try {\n        return await this.eventService.getAllEventsByGroup(params.id);\n       } catch (error) {\n        throw new NotFoundException(error) \n       }\n    }\n\n    /**\n     * Retrieve all the events of an association \n     * @param params - IdDto -  association ID \n     * GET - 'events/byAsso/:id'\n     */\n    @MessagePattern('INDEX_EVENTS_BY_ASSO')\n    async findAllEventsByAsso(@Payload('params', new ValidationPipe()) params: IdDto):Promise {\n       try {\n        const events =  await this.eventService.getAllEventsByAsso(params.id);\n        console.log(\"🚀 ~ file: event.controller.ts:68 ~ EventController ~ findAllEventsByAsso ~ events:\", events)\n        if(events) {\n            return events\n        }\n       } catch (error) {\n        throw new NotFoundException(error) \n       }\n    }\n\n    /**\n     * Retrieve all the events an user is part of\n     * @param params - IdDto -  user ID \n     * GET - 'events/byUser/:id'\n     */\n    @MessagePattern('INDEX_EVENTS_BY_USER')\n    async findAllEventsByUser(@Payload('params', new ValidationPipe()) params: IdDto):Promise {\n       try {\n        return await this.eventService.getAllEventsByUser(params.id);\n       } catch (error) {\n        throw new NotFoundException(error) \n       }\n    }\n\n    /**\n     * Modification of an event \n     * @param params - IdDto -  event ID \n     * @body EventDto \n     * GET - 'event/update/:id'\n     */\n    @MessagePattern('UPDATE_EVENT')\n    async updateEventEdit(\n        @Payload('params', new ValidationPipe()) params: IdDto, \n        @Payload('body') body: EventDto):Promise {\n        try {\n            return await this.eventService.eventEdit(params.id, body)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Creation of an event \n     * @body EventDto \n     * POST - 'event/create'\n     */\n    @MessagePattern('CREATE_EVENT')\n    async createEvent(@Payload('body') body: EventDto):Promise {\n        try {\n            return await this.eventService.createEvent(body)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Delete an event \n     * @param IdDto - Event ID \n     * DELETE - 'event/delete/:id'\n     */\n    @MessagePattern('DELETE_EVENT')\n    async deleteEvent(@Payload('params') params: IdDto): Promise {\n        try {\n            await this.eventService.deleteEvent(params.id)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventDto.html":{"url":"classes/EventDto.html","title":"class - EventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Event/Dto/event.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                association_id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                endTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                event_address\n                            \n                            \n                                    \n                                    Optional\n                                groups\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                participant\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                startDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                startTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    formattedStartDate\n                                \n                                \n                                    formattedStartTime\n                                \n                                \n                                    formattedEndDate\n                                \n                                \n                                    formattedEndTime\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        association_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Dto/event.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@MaxLength(150)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Dto/event.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@Transform( => )@IsDateString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Dto/event.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        endTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@Transform( => )@IsDateString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Dto/event.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        event_address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@MaxLength(100)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Dto/event.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        groups\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [string]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsMongoId({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Dto/event.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MaxLength(255)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Dto/event.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@MaxLength(50)@MinLength(3)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Dto/event.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        participant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Max(50)@IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Dto/event.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@Transform( => )@IsDateString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Dto/event.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@Transform( => )@IsDateString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Dto/event.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        formattedStartDate\n                    \n                \n\n                \n                    \n                        getformattedStartDate()\n                    \n                \n                            \n                                \n                                    Defined in src/Event/Dto/event.dto.ts:66\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        formattedStartTime\n                    \n                \n\n                \n                    \n                        getformattedStartTime()\n                    \n                \n                            \n                                \n                                    Defined in src/Event/Dto/event.dto.ts:69\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        formattedEndDate\n                    \n                \n\n                \n                    \n                        getformattedEndDate()\n                    \n                \n                            \n                                \n                                    Defined in src/Event/Dto/event.dto.ts:73\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        formattedEndTime\n                    \n                \n\n                \n                    \n                        getformattedEndTime()\n                    \n                \n                            \n                                \n                                    Defined in src/Event/Dto/event.dto.ts:77\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Transform, Type } from 'class-transformer';\nimport { IsDateString, IsMongoId, IsNotEmpty, IsNumber, IsString, Max, MaxLength, MinLength } from 'class-validator';\nimport moment from 'moment';\n\nexport class EventDto {\n    @ApiProperty()\n    @Type(() => Date)\n    @Transform(({ value }) => moment(value).format('YYYY-MM-DD'))\n    @IsDateString()\n    @IsNotEmpty()\n    readonly startDate: string\n\n    @ApiProperty()\n    @Type(() => Date)\n    @Transform(({ value }) => moment(value).format('HH:mm:ss'))\n    @IsDateString()\n    @IsNotEmpty()\n    readonly startTime: string\n\n    @ApiProperty()\n    @Type(() => Date)\n    @Transform(({ value }) => moment(value).format('YYYY-MM-DD'))\n    @IsDateString()\n    @IsNotEmpty()\n    readonly endDate: string;\n\n    @ApiProperty()\n    @Type(() => Date)\n    @Transform(({ value }) => moment(value).format('HH:mm:ss'))\n    @IsDateString()\n    @IsNotEmpty()\n    readonly endTime: string;\n\n    @ApiProperty()\n    @MaxLength(50)\n    @MinLength(3)\n    @IsString()\n    readonly name: string;\n\n    @ApiProperty()\n    @MaxLength(100)\n    @IsString()\n    readonly event_address: string;\n\n    @ApiProperty()\n    @MaxLength(150)\n    @IsString()\n    readonly description?: string;\n\n    @MaxLength(255)\n    @IsString()\n    readonly image?: string;\n\n    @Max(50)\n    @IsNotEmpty()\n    @IsNumber()\n    readonly participant?: number;\n\n    @IsMongoId()\n    association_id: string;\n\n    @IsMongoId({each: true})\n    groups?: [string];\n\n    get formattedStartDate(): string {\n        return moment(this.startDate).format('YYYY-MM-DD')\n    }\n    get formattedStartTime(): string {\n        return moment(this.startTime).format('HH:mm:ss')\n    }\n\n    get formattedEndDate(): string {\n        return moment(this.endDate).format('YYYY-MM-DD')\n    }\n\n    get formattedEndTime(): string {\n        return moment(this.endTime).format('HH:mm:ss')\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventInterface.html":{"url":"interfaces/EventInterface.html","title":"interface - EventInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Event/interface/event.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            association_id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            endDate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            endTime\n                                        \n                                \n                                \n                                        \n                                            event_address\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            groups\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            image\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            participant\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            startDate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            startTime\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        association_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        association_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endDate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endTime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event_address\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        event_address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        groups\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        groups:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        image:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        participant\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        participant:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startDate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startTime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface EventInterface {\n\n    startDate?: string,\n    startTime?: string\n    endDate?: string;\n    endTime?: string;\n    name: string;\n    event_address: string;\n    description?: string;\n    participant?: number;\n    image?:string\n    association_id: string;\n    groups?: string[]\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventModule.html":{"url":"modules/EventModule.html","title":"module - EventModule","body":"\n                   \n\n\n\n\n    Modules\n    EventModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventModule\n\n\n\ncluster_EventModule_exports\n\n\n\ncluster_EventModule_imports\n\n\n\ncluster_EventModule_providers\n\n\n\n\nNatsMessengerModule\n\nNatsMessengerModule\n\n\n\nEventModule\n\nEventModule\n\nEventModule -->\n\nNatsMessengerModule->EventModule\n\n\n\n\n\nEventService \n\nEventService \n\nEventService  -->\n\nEventModule->EventService \n\n\n\n\n\nEventService\n\nEventService\n\nEventModule -->\n\nEventService->EventModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Event/event.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            NatsMessengerModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EventService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { RequestModule } from 'src/Request/request.module'\nimport { NatsMessengerModule } from '@app/nats-messenger'\nimport { EventController } from './event.controller';\nimport { Module, forwardRef } from '@nestjs/common';\nimport { EventSchema } from './Schema/event.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { EventService } from './event.service';\n\n//Module in charge of handling EVENTS\n@Module({\n  imports: [\n    // import the database schema for EVENTS in Mongoose\n    MongooseModule.forFeature([\n      { name: 'Event', schema: EventSchema }\n    ]),\n    // import the RequestModule module as dependency \n    forwardRef(() => RequestModule),\n    // import NatsMessengerModule module for NATS messenging\n    NatsMessengerModule, \n  ],\n\n  controllers: [EventController],\n  providers: [EventService],\n  exports: [EventService],\n})\nexport class EventModule{}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventService.html":{"url":"injectables/EventService.html","title":"injectable - EventService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Event/event.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEvent\n                            \n                            \n                                    Async\n                                deleteEvent\n                            \n                            \n                                    Async\n                                eventEdit\n                            \n                            \n                                    Async\n                                getAllEvents\n                            \n                            \n                                    Async\n                                getAllEventsByAsso\n                            \n                            \n                                    Async\n                                getAllEventsByGroup\n                            \n                            \n                                    Async\n                                getAllEventsByUser\n                            \n                            \n                                    Async\n                                getEventById\n                            \n                            \n                                    Async\n                                getEventByName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventModel: Model, natsMessengerService: NatsMessengerService)\n                    \n                \n                        \n                            \n                                Defined in src/Event/event.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        natsMessengerService\n                                                  \n                                                        \n                                                                        NatsMessengerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEvent(event: EventInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Event/event.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Creation of a new event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            EventInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nEventInterface\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteEvent(eventId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Event/event.service.ts:164\n                        \n                    \n\n\n            \n                \n                        Delete an event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nevent ID\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        eventEdit\n                        \n                    \n                \n            \n            \n                \n                        \n                    eventEdit(eventId: string, body: EventInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Event/event.service.ts:111\n                        \n                    \n\n\n            \n                \n                        Modification of a new event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nevent ID\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            EventInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllEvents()\n                \n            \n\n\n                    \n                        \n                            Defined in src/Event/event.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Retrieve all events\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllEventsByAsso\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllEventsByAsso(assoId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Event/event.service.ts:84\n                        \n                    \n\n\n            \n                \n                        Retrieve all events of an association\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                assoId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nassociation Id\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllEventsByGroup\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllEventsByGroup(groupId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Event/event.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Retrieve all events of a group\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                groupId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \ngroup Id\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllEventsByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllEventsByUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Event/event.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Retrieve all events an user is part of\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nuser Id\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getEventById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getEventById(eventId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Event/event.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Retrieve an event through its ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nevent ID\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getEventByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getEventByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Event/event.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Retrieve an event through its name\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nevent name\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common'\nimport { EventInterface } from 'src/Event/interface/event.interface'\nimport { NatsMessengerService } from '@app/nats-messenger'\nimport { EventDocument } from './Schema/event.schema'\nimport { InjectModel } from '@nestjs/mongoose'\nimport { Model } from 'mongoose'\n\n// Service responsible for managing operations related to EVENTS\n@Injectable()\nexport class EventService {\n    constructor(\n        @InjectModel(Event.name)\n        private eventModel: Model,\n        private readonly natsMessengerService: NatsMessengerService,\n    ) { }\n\n    /**\n     * Retrieve an event through its ID  \n     * @param eventId - event ID \n     */\n    async getEventById(eventId: string): Promise {\n        try {\n            return await this.eventModel.findById(eventId)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Retrieve an event through its name  \n     * @param name - event name \n     */\n    async getEventByName(name: string): Promise {\n        try {\n            return await this.eventModel.findOne({ name })\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Retrieve all events an user is part of  \n     * @param userId - user Id\n     */\n    async getAllEventsByUser(userId: string): Promise {\n        try {\n            const userDetails = await this.natsMessengerService.send(\n                'GET_USER_BY_ID',\n                userId\n            )\n            return await this.getAllEventsByGroup(userDetails.group_id)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n      \n    /**\n     * Retrieve all events\n     */\n    async getAllEvents(): Promise {\n        try {\n            return this.eventModel.find()\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Retrieve all events of a group\n     * @param groupId - group Id\n     */ \n    async getAllEventsByGroup(groupId: string): Promise {\n        try {\n            return this.eventModel.find({ groups : [groupId]})\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Retrieve all events of an association\n     * @param assoId - association Id\n     */ \n    async getAllEventsByAsso(assoId: string): Promise {\n        try {\n            const events = await this.eventModel.find({ association_id : [assoId]})\n            console.log(\"🚀 ~ file: event.service.ts:87 ~ EventService ~ getAllEventsByAsso ~ events:\", events)\n            return events;\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Creation of a new event \n     * @param event - EventInterface \n     */ \n    async createEvent(event: EventInterface): Promise {\n        try {\n            return await this.eventModel.create({...event})\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Modification of a new event \n     * @param eventId - event ID \n     * @body EventInterface \n     */ \n    async eventEdit(eventId: string, body: EventInterface): Promise {\n        try {\n            // Get the current event without making any changes\n            const oldEvent = await this.eventModel.findById(eventId)\n            \n            if (!oldEvent) { throw new NotFoundException('Event not found') }\n\n            // Update the event with the new data\n            const updatedEvent = await this.eventModel.findByIdAndUpdate(\n                eventId,\n                body,\n                { new: true } // Returns the updated event\n            )\n        \n            if (!updatedEvent) { throw new NotFoundException('Event not found') }\n\n            // Determine the new groups and old groups\n            const oldGroups = oldEvent.groups\n            const newGroups = updatedEvent.groups;\n\n            // Find the added groups (groups in newGroups but not in oldGroups)\n            const addedGroups = newGroups.filter(group => !oldGroups.includes(group));\n\n            // If there are added groups, send email notifications to parents\n            if (addedGroups) {\n                for (const eachNewGroupId of addedGroups) {\n                await this.natsMessengerService.emit('EMAIL_TO_INDEX_USERS_NEW_GROUP',\n                    { id: eachNewGroupId }\n                )\n                }\n            }\n\n            // Get the list of participating groups in the event\n            const groupsList = updatedEvent.groups\n\n                // For each group, send email notifications to parents \n                for (const eachGroupId of groupsList ) {\n                await this.natsMessengerService.emit(\n                    'EMAIL_TO_INDEX_USERS_BY_GROUP',\n                    {id : eachGroupId}\n                )\n                }\n            // Return the updated event    \n            return updatedEvent\n        } catch (error) {\n        throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Delete an event\n     * @param eventId - event ID \n     */  \n    async deleteEvent(eventId: string): Promise {\n        try {\n            return this.eventModel.findByIdAndRemove(eventId)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExchangeDto.html":{"url":"classes/ExchangeDto.html","title":"class - ExchangeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExchangeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Request/Dto/exchange.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StatusRequestEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum({StatusRequestEnum: , default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Dto/exchange.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Dto/exchange.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsMongoId, IsString } from \"class-validator\"\nimport { StatusRequestEnum } from \"../Enum/request.enum\"\n\n\nexport class ExchangeDto {\n\n    @IsString()\n    @IsMongoId()\n    readonly user_id: string;\n\n    @IsEnum({\n        StatusRequestEnum, \n        default: StatusRequestEnum.pending\n    })\n    status: StatusRequestEnum\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExchangeInterface.html":{"url":"interfaces/ExchangeInterface.html","title":"interface - ExchangeInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExchangeInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Request/interface/response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            user_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         StatusRequestEnum\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StatusRequestEnum\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DirectionRequestEnum, StatusRequestEnum, TypeRequestEnum } from '../Enum/request.enum';\nexport interface ExchangeInterface{\n    user_id: string, // ID DE L USER QUI A REPONDU A LA REQUEST\n    status?: StatusRequestEnum // DEFAUT PENDING \n}\n\nexport interface RequestInterface {\n    eventId: string;\n    userId: string;\n    firstname: string;\n    nbSeat: number;\n    direction: DirectionRequestEnum; \n    departure_time: string;\n    pickup_address: string;\n    type: TypeRequestEnum;\n    status: StatusRequestEnum;\n    exchanges?: string[]; \n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExchangeRequest.html":{"url":"classes/ExchangeRequest.html","title":"class - ExchangeRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExchangeRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Request/Schema/exchangeRequest.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StatusRequestEnum[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, enum: StatusRequestEnum, required: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Schema/exchangeRequest.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Schema/exchangeRequest.schema.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { StatusRequestEnum } from '../Enum/request.enum';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type ExchangeRequestDocument = ExchangeRequest & Document;\n@Schema({ collection: 'exchangeRequest', timestamps: true, versionKey: false })\nexport class ExchangeRequest {\n\n    @Prop()\n    @ApiProperty()\n    user_id: string;\n\n    @Prop({\n        type: [String],\n        enum: StatusRequestEnum,\n        required: true\n    })\n    @ApiProperty()\n    status: StatusRequestEnum[];\n\n}\n\nexport const exchangeSchema = SchemaFactory.createForClass(ExchangeRequest);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdDto.html":{"url":"classes/IdDto.html","title":"class - IdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Event/Dto/id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Event/Dto/id.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsMongoId, IsString } from \"class-validator\"\nexport class IdDto {\n\n    @IsString()\n    @IsMongoId()\n    readonly id: string\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NatsMessengerModule.html":{"url":"modules/NatsMessengerModule.html","title":"module - NatsMessengerModule","body":"\n                   \n\n\n\n\n    Modules\n    NatsMessengerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NatsMessengerModule\n\n\n\ncluster_NatsMessengerModule_exports\n\n\n\ncluster_NatsMessengerModule_providers\n\n\n\n\nNatsMessengerService \n\nNatsMessengerService \n\n\n\nNatsMessengerModule\n\nNatsMessengerModule\n\nNatsMessengerService  -->\n\nNatsMessengerModule->NatsMessengerService \n\n\n\n\n\nNatsMessengerService\n\nNatsMessengerService\n\nNatsMessengerModule -->\n\nNatsMessengerService->NatsMessengerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/nats-messenger/src/nats-messenger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NatsMessengerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NatsMessengerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ClientsModule, Transport } from '@nestjs/microservices'\nimport { NatsMessengerService } from './nats-messenger.service'\nimport { ConfigModule } from '@nestjs/config'\nimport { Module } from '@nestjs/common'\n\n//Module to manage NATS\n@Module({\n  imports: [\n    // Configures the ConfigModule to load environment variables\n    ConfigModule.forRoot({\n      isGlobal: true,\n      //TODO set to true for PRODUCTION\n      //cache: true,\n    }),\n    //register the client module \n    ClientsModule.register([\n      {\n        // defines an unique name for the client \n        name: 'NATS_SERVICE', \n        // uses NATS transport for the communication\n        transport: Transport.NATS,\n        options: {\n          // specifies the NATS servers addresses\n          servers: [`nats://${process.env.NATS_DNS}:${process.env.NATS_PORT}`]\n        }\n      }\n    ])\n  ],\n  // provides the NatsMessengerService service in the module \n  providers: [NatsMessengerService],\n  // makes the NatsMessengerService service accessible to other modules\n  exports: [NatsMessengerService],\n})\nexport class NatsMessengerModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NatsMessengerService.html":{"url":"injectables/NatsMessengerService.html","title":"injectable - NatsMessengerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NatsMessengerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/nats-messenger/src/nats-messenger.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                emit\n                            \n                            \n                                    Async\n                                emitEmailReplyToExchangeReceived\n                            \n                            \n                                    Async\n                                emitEmailResponseToRequest\n                            \n                            \n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(nats: ClientProxy)\n                    \n                \n                        \n                            \n                                Defined in libs/nats-messenger/src/nats-messenger.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        nats\n                                                  \n                                                        \n                                                                    ClientProxy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        emit\n                        \n                    \n                \n            \n            \n                \n                        \n                    emit(cmd: string, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/nats-messenger/src/nats-messenger.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                cmd\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        emitEmailReplyToExchangeReceived\n                        \n                    \n                \n            \n            \n                \n                        \n                    emitEmailReplyToExchangeReceived(email: string, requestId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/nats-messenger/src/nats-messenger.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        emitEmailResponseToRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    emitEmailResponseToRequest(email: string, requestId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/nats-messenger/src/nats-messenger.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        send\n                        \n                    \n                \n            \n            \n                \n                        \n                    send(cmd: string, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/nats-messenger/src/nats-messenger.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                cmd\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { firstValueFrom } from 'rxjs/internal/firstValueFrom'\nimport { Inject, Injectable } from '@nestjs/common'\nimport { ClientProxy } from '@nestjs/microservices'\n\n//Service in charge of handling NATS related operations \n@Injectable()\nexport class NatsMessengerService {\n\n    constructor(\n        //injects the NATS_SERVICE dependency using ClientProxy from the module\n        @Inject('NATS_SERVICE')\n        private readonly nats: ClientProxy\n    ) { }\n\n    //sends with a response in return \n    async send(cmd: string, payload: any): Promise {\n        try {\n            console.log('send', cmd, payload)\n            return await firstValueFrom(this.nats.send(cmd, payload))\n        } catch (error) {\n            console.log(\"error\", error)\n        }\n    }\n\n    //sends without any response in return \n    async emit(cmd: string, payload: any): Promise {\n        try {\n            this.nats.emit(cmd, payload)\n        } catch (error) {\n            console.log(\"error\", error)\n        }\n    }\n        \n    //Emits an event for sending an email when there is a response to a request\n    async emitEmailResponseToRequest(email: string, requestId: string) {\n        this.emit(\n            'SEND_EMAIL_RESPONSE_REQUEST',\n            {\n                email: email,\n                params: { \"RESPONSE_REQUEST_LINK\": `${process.env.PREFIX_URI}/request/${requestId}` }\n            },\n        )\n    }\n\n    //TODO CREER UN TEMPLATE POUR ENVOYER UN EMAIL LORSQUE L ON RECOIT UNE REPONSE A LA REQUEST \n    async emitEmailReplyToExchangeReceived(email: string, requestId: string):Promise {\n        this.emit(\n            'SEND_EMAIL_RESPONSE_EXCHANGE',\n            {\n                email: email,\n                //ON INCLUT UN LIEN VERS LA PAGE DE LA REQUEST EN QUESTION\n                params: { \"REQUEST_READ_LINK\": `${process.env.PREFIX_URI}/request/${requestId}` }\n            },\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Request.html":{"url":"classes/Request.html","title":"class - Request","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Request\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Request/Schema/request.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                departureTime\n                            \n                            \n                                    \n                                    \n                                direction\n                            \n                            \n                                    \n                                    \n                                    \n                                eventId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                exchanges\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                firstname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                nbSeat\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                pickupAddress\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                            \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        departureTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Schema/request.schema.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DirectionRequestEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: String, enum: DirectionRequestEnum})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Schema/request.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true})@IsMongoId({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Schema/request.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        exchanges\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@ApiProperty()@IsMongoId({each: true})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Schema/request.schema.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@MaxLength(50)@MinLength(4)@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Schema/request.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        nbSeat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@MaxLength(20)@IsNumber()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Schema/request.schema.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        pickupAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@IsString()@MaxLength(200)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Schema/request.schema.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TypeRequestEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, type: String, enum: TypeRequestEnum})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Schema/request.schema.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true})@IsMongoId({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Schema/request.schema.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsDate, IsMongoId, IsNumber, IsString, MaxLength, MinLength } from 'class-validator';\nimport { DirectionRequestEnum, TypeRequestEnum } from '../Enum/request.enum'\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { EventDocument } from 'src/Event/Schema/event.schema';\nimport { Document } from 'mongoose'\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport type RequestDocument = Request & Document;\n@Schema({ collection: 'request', timestamps: true, versionKey: false })\n    \nexport class Request {\n  \n  @ApiProperty()\n  @Prop({ required: true })\n  @IsMongoId({ each: true })\n  eventId: string;\n\n  @ApiProperty()\n  @Prop({required: true})\n  @IsMongoId({ each: true })\n  userId: string;\n\n  @Prop({ required: true })\n  @MaxLength(50)\n  @MinLength(4)\n  @IsString()\n  @ApiProperty()\n  firstname: string;\n  \n  @Prop({ required: true })\n  @MaxLength(20)\n  @IsNumber()\n  @ApiProperty()\n  nbSeat: number;\n  \n  @Prop({ required: true, type: String,enum: DirectionRequestEnum})\n  @ApiProperty()\n  direction: DirectionRequestEnum;\n  \n  @Prop({ required: true })\n  @ApiProperty()\n  departureTime: string;\n  \n  @Prop({ required: true })\n  @IsString()\n  @MaxLength(200)\n  @ApiProperty()\n  pickupAddress: string;\n  \n  @Prop({ required: true,type: String,enum: TypeRequestEnum})\n  @ApiProperty()\n  type: TypeRequestEnum;\n\n  @Prop()\n  @ApiProperty()\n  @IsMongoId({each: true})\n  @IsArray()\n  exchanges: string[]; \n}\nexport const RequestSchema = SchemaFactory.createForClass(Request);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RequestController.html":{"url":"controllers/RequestController.html","title":"controller - RequestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RequestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Request/request.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createRequest\n                            \n                            \n                                    \n                                    Async\n                                deleteRequest\n                            \n                            \n                                    \n                                    Async\n                                findAllExchangesByRequest\n                            \n                            \n                                    \n                                    Async\n                                findAllRequests\n                            \n                            \n                                    \n                                    Async\n                                findAllRequestsByAsso\n                            \n                            \n                                    \n                                    Async\n                                findAllRequestsByEvents\n                            \n                            \n                                    \n                                    Async\n                                findAllRequestsByExchangeMadeByUser\n                            \n                            \n                                    \n                                    Async\n                                findAllRequestUserId\n                            \n                            \n                                    \n                                    Async\n                                findEschangeById\n                            \n                            \n                                    \n                                    Async\n                                findExchangeByUser\n                            \n                            \n                                    \n                                    Async\n                                findRequestByExchangeId\n                            \n                            \n                                    \n                                    Async\n                                findRequestId\n                            \n                            \n                                    \n                                    Async\n                                newExchangeToRequest\n                            \n                            \n                                    \n                                    Async\n                                replyToExchangeReceived\n                            \n                            \n                                    \n                                    Async\n                                updateRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(params: IdDto, body: RequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('CREATE_REQUEST')\n                \n            \n\n                    \n                        \n                            Defined in src/Request/request.controller.ts:153\n                        \n                    \n\n\n            \n                \n                        Create a new request from an event\nPOST - 'request/create/:id '\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  event ID\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            RequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRequestDtoPOST - 'request/create/:id '\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteRequest(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('DELETE_REQUEST')\n                \n            \n\n                    \n                        \n                            Defined in src/Request/request.controller.ts:169\n                        \n                    \n\n\n            \n                \n                        Delete a request\nDELETE - 'request/delete/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  request IDDELETE - 'request/delete/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllExchangesByRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllExchangesByRequest(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('EXCHANGES_BY_REQUEST')\n                \n            \n\n                    \n                        \n                            Defined in src/Request/request.controller.ts:220\n                        \n                    \n\n\n            \n                \n                        Retrieve all the exchanges made on an request\nGET - 'exchange/byRequest/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  request ID \nGET - 'exchange/byRequest/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllRequests\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllRequests()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('INDEX_REQUESTS')\n                \n            \n\n                    \n                        \n                            Defined in src/Request/request.controller.ts:55\n                        \n                    \n\n\n            \n                \n                        Retrieve all requests on the app\nGET - 'requests'\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllRequestsByAsso\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllRequestsByAsso(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('REQUESTS_BY_ASSO')\n                \n            \n\n                    \n                        \n                            Defined in src/Request/request.controller.ts:118\n                        \n                    \n\n\n            \n                \n                        Retrieve all requests published by association ID\nGET - 'requests/asso/id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  association ID \nGET - 'requests/asso/id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllRequestsByEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllRequestsByEvents(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('REQUESTS_BY_EVENT')\n                \n            \n\n                    \n                        \n                            Defined in src/Request/request.controller.ts:104\n                        \n                    \n\n\n            \n                \n                        Retrieve all requests published on an event\nGET - 'requests/event/id '\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  event ID \nGET - 'requests/event/id '\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllRequestsByExchangeMadeByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllRequestsByExchangeMadeByUser(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('REQUESTS_BY_EXCHANGE_BY_USER')\n                \n            \n\n                    \n                        \n                            Defined in src/Request/request.controller.ts:90\n                        \n                    \n\n\n            \n                \n                        Retrieve all requests an user has replied to (exchanges)\nGET - 'prefix requests/byExchange/ByUser/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  USER ID\nGET - 'prefix requests/byExchange/ByUser/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllRequestUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllRequestUserId(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('REQUESTS_BY_USER_ID')\n                \n            \n\n                    \n                        \n                            Defined in src/Request/request.controller.ts:70\n                        \n                    \n\n\n            \n                \n                        Retrieve all requests from an user ID\nGET - 'requests/user/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  USER ID\nGET - 'requests/user/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findEschangeById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEschangeById(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('EXCHANGE_REQUEST_BY_ID')\n                \n            \n\n                    \n                        \n                            Defined in src/Request/request.controller.ts:204\n                        \n                    \n\n\n            \n                \n                        Retrieve exchange by its id\nGET - 'exchange/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  request ID \nGET - 'exchange/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findExchangeByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findExchangeByUser(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('EXCHANGE_BY_USER')\n                \n            \n\n                    \n                        \n                            Defined in src/Request/request.controller.ts:234\n                        \n                    \n\n\n            \n                \n                        Retrieve all the exchanges made by a provided user\nGET - 'exchange/byUser/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  userID \nGET - 'exchange/byUser/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findRequestByExchangeId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findRequestByExchangeId(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('GET_REQUEST_BY_EXCHANGE')\n                \n            \n\n                    \n                        \n                            Defined in src/Request/request.controller.ts:41\n                        \n                    \n\n\n            \n                \n                        Retrieve a request through its exchange ID\nGET - 'request/byExchange/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  exchange ID\nGET - 'request/byExchange/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findRequestId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findRequestId(params: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('GET_REQUEST_BY_ID')\n                \n            \n\n                    \n                        \n                            Defined in src/Request/request.controller.ts:27\n                        \n                    \n\n\n            \n                \n                        Retrieve a request through its ID\nGET - 'request/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  User ID\nGET - 'request/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        newExchangeToRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    newExchangeToRequest(params: IdDto, body: ExchangeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('CREATE_EXCHANGE_TO_REQUEST_ID')\n                \n            \n\n                    \n                        \n                            Defined in src/Request/request.controller.ts:187\n                        \n                    \n\n\n            \n                \n                        Creation of an exchange on a request\nPOST - 'exchange/create/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  request ID\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            ExchangeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nexchangeDtoPOST - 'exchange/create/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        replyToExchangeReceived\n                        \n                    \n                \n            \n            \n                \n                        \n                    replyToExchangeReceived(params: IdDto, body: ExchangeInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('REPLY_TO_EXCHANGE')\n                \n            \n\n                    \n                        \n                            Defined in src/Request/request.controller.ts:253\n                        \n                    \n\n\n            \n                \n                        Modification of an exchange by the user whi posted it\nthe user received an exchange and replies to it\nPOST - 'exchange/reply/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  exchange ID\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            ExchangeInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExchangeInterfacePOST - 'exchange/reply/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRequest(params: IdDto, body: RequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern('UPDATE_REQUEST')\n                \n            \n\n                    \n                        \n                            Defined in src/Request/request.controller.ts:136\n                        \n                    \n\n\n            \n                \n                        Modification of a request\nPOST - 'request/update/:id'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIdDto -  request ID\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            RequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRequestDtoPOST - 'request/update/:id'\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, NotFoundException, UseInterceptors, ValidationPipe } from '@nestjs/common'\nimport { RpcSuccessInterceptor } from 'src/Interceptor/RpcSuccessInterceptor'\nimport { ExchangeRequestDocument } from './Schema/exchangeRequest.schema'\nimport { ExchangeInterface } from './interface/response.interface'\nimport { MessagePattern, Payload } from '@nestjs/microservices'\nimport { RequestDocument } from './Schema/request.schema'\nimport { RequestService } from './request.service'\nimport { ExchangeDto } from './Dto/exchange.dto'\nimport { RequestDto } from './Dto/request.dto'\nimport { IdDto } from 'src/Event/Dto/id.dto'\n\n// Controller responsible for handling API endpoints related to REQUESTS and EXCHANGES\n@Controller()\n@UseInterceptors(RpcSuccessInterceptor)\nexport class RequestController {\n\n    constructor(\n        private readonly requestService: RequestService,\n    ) { }\n\n    /**\n     * Retrieve a request through its ID \n     * @param params - IdDto -  User ID\n     * GET - 'request/:id'\n     */\n    @MessagePattern('GET_REQUEST_BY_ID')\n    async findRequestId(@Payload('params') params: IdDto):Promise {\n        try {\n            return await this.requestService.getRequestById(params.id)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Retrieve a request through its exchange ID \n     * @param params - IdDto -  exchange ID\n     * GET - 'request/byExchange/:id'\n     */\n    @MessagePattern('GET_REQUEST_BY_EXCHANGE')\n    async findRequestByExchangeId(@Payload('params', new ValidationPipe()) params: IdDto):Promise {\n        try {\n            return await this.requestService.getRequestByExchangeId(params.id)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    //TODO A VOIR SI ON GARDE \n    /**\n     * Retrieve all requests on the app \n     * GET - 'requests'\n     */\n    @MessagePattern('INDEX_REQUESTS')\n    async findAllRequests():Promise{\n        try {\n            return await this.requestService.getAllRequests()\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Retrieve all requests from an user ID \n     * @param params - IdDto -  USER ID\n     * GET - 'requests/user/:id'\n     */\n    @MessagePattern('REQUESTS_BY_USER_ID')\n    // async findAllRequestUserId(@Payload('params', new ValidationPipe()) params: IdDto): Promise {\n        async findAllRequestUserId(@Payload('params', new ValidationPipe()) params: IdDto): Promise {\n            try {\n            // const response = await this.requestService.getRequestsByUserId(params.id)\n            const response = await this.requestService.findRequestRelatedToUserForEvent(params.id)\n            console.log(\"🚀 ~ file: request.controller.ts:74 ~ findAllRequestUserId ~ response:\", response)\n            if (!response) {\n                throw new NotFoundException('No request found')\n            }\n            return response\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Retrieve all requests an user has replied to (exchanges)\n     * @param params - IdDto -  USER ID\n     * GET - 'prefix requests/byExchange/ByUser/:id'\n     */\n    @MessagePattern('REQUESTS_BY_EXCHANGE_BY_USER')\n    async findAllRequestsByExchangeMadeByUser(@Payload('params', new ValidationPipe()) params: IdDto): Promise {\n        try {\n            return await this.requestService.getAllRequestsByExchangeMadeByUser(params.id)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Retrieve all requests published on an event \n     * @param params - IdDto -  event ID \n     * GET - 'requests/event/id '\n     */\n    @MessagePattern('REQUESTS_BY_EVENT')\n    async findAllRequestsByEvents(@Payload('params', new ValidationPipe()) params: IdDto): Promise {\n        try {\n            return await this.requestService.getAllRequestsByEvent(params.id)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Retrieve all requests published by association ID \n     * @param params - IdDto -  association ID \n     * GET - 'requests/asso/id'\n     */\n    @MessagePattern('REQUESTS_BY_ASSO')\n    async findAllRequestsByAsso(@Payload('params', new ValidationPipe()) params: IdDto): Promise {\n        try {\n            return await this.requestService.getAllRequestsByAsso(params.id)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n        // TODO crée une requête qui permet de crée une nouvelle requests\n        // TODO la faire dans  le fichier request.controller.ts ds le dossier ms-event-request-exchange\n\n    /**\n     * Modification of a request \n     * @param params - IdDto -  request ID  \n     * @param body - RequestDto  \n     * POST - 'request/update/:id'\n     */\n    @MessagePattern('UPDATE_REQUEST')\n    async updateRequest(\n        @Payload('params', new ValidationPipe()) params: IdDto, \n        @Payload('body') body: RequestDto ):Promise {\n        try {\n            return await this.requestService.editRequest(params.id, body)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Create a new request from an event  \n     * @param params - IdDto -  event ID  \n     * @param body - RequestDto  \n     * POST - 'request/create/:id '\n     */\n    @MessagePattern('CREATE_REQUEST')\n    async createRequest(\n        @Payload('params', new ValidationPipe()) params: IdDto, \n        @Payload('body') body: RequestDto):Promise {\n        try {\n            return await this.requestService.createRequestEvent(body, params.id)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Delete a request \n     * @param params - IdDto -  request ID  \n     * DELETE - 'request/delete/:id'\n     */\n    @MessagePattern('DELETE_REQUEST')\n    async deleteRequest(@Payload('params', new ValidationPipe()) params: IdDto):Promise {\n        try {\n            const request = await this.requestService.deleteRequest(params.id)\n            console.log(\"🚀 ~ file: request.controller.ts:172 ~ deleteRequest ~ request:\", request)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    //*************** EXCHANGE ****************//\n\n    /**\n     * Creation of an exchange on a request \n     * @param params - IdDto -  request ID \n     * @param body - exchangeDto  \n     * POST - 'exchange/create/:id'\n     */\n    @MessagePattern('CREATE_EXCHANGE_TO_REQUEST_ID') \n    async newExchangeToRequest(\n        @Payload('params', new ValidationPipe()) params: IdDto, \n        @Payload('body') body: ExchangeDto): Promise\n    {\n        try {\n            return this.requestService.createExchangeToRequest(params.id, body)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /***\n     * Retrieve exchange by its id\n     * @param params - IdDto -  request ID \n     * GET - 'exchange/:id'\n     */\n    @MessagePattern('EXCHANGE_REQUEST_BY_ID')\n    async findEschangeById(@Payload('params', new ValidationPipe()) params: IdDto): Promise {\n        try {\n            return  await this.requestService.getExchangeById(params.id)\n        } catch (error) {\n            throw new NotFoundException(error)\n\n        }\n    }\n\n\n    /**\n     * Retrieve all the exchanges made on an request \n     * @param params - IdDto -  request ID \n     * GET - 'exchange/byRequest/:id'\n     */\n    @MessagePattern('EXCHANGES_BY_REQUEST')\n    async findAllExchangesByRequest(@Payload('params', new ValidationPipe()) params: IdDto): Promise {\n        try {\n            return await this.requestService.getAllExchangesByRequest(params.id)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    /**\n     * Retrieve all the exchanges made by a provided user \n     * @param params - IdDto -  userID \n     * GET - 'exchange/byUser/:id'\n     */\n    @MessagePattern('EXCHANGE_BY_USER')\n    async findExchangeByUser(@Payload('params', new ValidationPipe()) params: IdDto) {;\n        try {\n            return await this.requestService.getExchangesByUser(params.id)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n    //MODIFICATION D UNE EXCHANGE L UTILISATEUR QUI A PUBLIE LA REQUEST\n    //L'utilisateur qui a publié une annonce a reçu une réponse et il peut y répondre \n    //POST : prefix: exchange/reply/:id\n    /**\n     * Modification of an exchange by the user whi posted it \n     * the user received an exchange and replies to it  \n     * @param params - IdDto -  exchange ID \n     * @param body - ExchangeInterface  \n     * POST - 'exchange/reply/:id'\n     */\n    @MessagePattern('REPLY_TO_EXCHANGE')\n    async replyToExchangeReceived(\n        @Payload('params', new ValidationPipe()) params: IdDto, /*EXCHANGE ID */\n        @Payload('body') body: ExchangeInterface): Promise\n    {\n        try {\n            return await this.requestService.replyToExchangeReceived(params.id, body)\n        } catch (error) {\n            throw new NotFoundException(error)\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RequestDto.html":{"url":"classes/RequestDto.html","title":"class - RequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Request/Dto/request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                departure_time\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                direction\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                eventId\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                exchanges\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                firstname\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                nbSeat\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                pickup_address\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                status\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                type\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        departure_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Dto/request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DirectionRequestEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(DirectionRequestEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Dto/request.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsMongoId()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Dto/request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        exchanges\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsMongoId({each: true})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Dto/request.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MaxLength(50)@MinLength(4)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Dto/request.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        nbSeat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MaxLength(20)@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Dto/request.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        pickup_address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(200)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Dto/request.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StatusRequestEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(StatusRequestEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Dto/request.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TypeRequestEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(TypeRequestEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Dto/request.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsMongoId()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Request/Dto/request.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsDateString, IsEnum, IsMongoId, IsNotEmpty, IsNumber, IsString, MaxLength, MinLength } from 'class-validator';\nimport { DirectionRequestEnum, StatusRequestEnum, TypeRequestEnum } from '../Enum/request.enum';\nimport { EventDocument } from 'src/Event/Schema/event.schema';\nimport { Transform, Type } from 'class-transformer'\nimport { Types } from 'mongoose'\nimport moment from 'moment'\n\nexport class RequestDto {\n\n    @IsMongoId()\n    @IsNotEmpty()\n    readonly eventId: string;\n    \n    @IsMongoId()\n    @IsNotEmpty()\n    readonly userId: string;\n    \n    @MaxLength(50)\n    @MinLength(4)\n    @IsString()\n    readonly firstname: string;\n\n    @MaxLength(20)\n    @IsNumber()\n    readonly nbSeat: number;\n\n    @IsNotEmpty()\n    @IsEnum(DirectionRequestEnum)\n    readonly direction: DirectionRequestEnum; \n      \n    @Transform(({ value }) => moment(value).format('HH:mm:'))\n    @IsDateString()\n    readonly departure_time: string;\n      \n    @IsString()\n    @MaxLength(200)\n    readonly pickup_address: string;\n\n    @IsNotEmpty()\n    @IsEnum(TypeRequestEnum)\n    readonly type: TypeRequestEnum;\n      \n    @IsNotEmpty()\n    @IsEnum(StatusRequestEnum)\n    readonly status: StatusRequestEnum;\n      \n    @IsMongoId({each: true})\n    @IsArray()\n    readonly exchanges?: string[];\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestInterface.html":{"url":"interfaces/RequestInterface.html","title":"interface - RequestInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Request/interface/response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            departure_time\n                                        \n                                \n                                \n                                        \n                                            direction\n                                        \n                                \n                                \n                                        \n                                            eventId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            exchanges\n                                        \n                                \n                                \n                                        \n                                            firstname\n                                        \n                                \n                                \n                                        \n                                            nbSeat\n                                        \n                                \n                                \n                                        \n                                            pickup_address\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        departure_time\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        departure_time:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        direction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        direction:         DirectionRequestEnum\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DirectionRequestEnum\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exchanges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exchanges:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nbSeat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nbSeat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pickup_address\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pickup_address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         StatusRequestEnum\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StatusRequestEnum\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         TypeRequestEnum\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TypeRequestEnum\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DirectionRequestEnum, StatusRequestEnum, TypeRequestEnum } from '../Enum/request.enum';\nexport interface ExchangeInterface{\n    user_id: string, // ID DE L USER QUI A REPONDU A LA REQUEST\n    status?: StatusRequestEnum // DEFAUT PENDING \n}\n\nexport interface RequestInterface {\n    eventId: string;\n    userId: string;\n    firstname: string;\n    nbSeat: number;\n    direction: DirectionRequestEnum; \n    departure_time: string;\n    pickup_address: string;\n    type: TypeRequestEnum;\n    status: StatusRequestEnum;\n    exchanges?: string[]; \n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RequestModule.html":{"url":"modules/RequestModule.html","title":"module - RequestModule","body":"\n                   \n\n\n\n\n    Modules\n    RequestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RequestModule\n\n\n\ncluster_RequestModule_exports\n\n\n\ncluster_RequestModule_providers\n\n\n\ncluster_RequestModule_imports\n\n\n\n\nNatsMessengerModule\n\nNatsMessengerModule\n\n\n\nRequestModule\n\nRequestModule\n\nRequestModule -->\n\nNatsMessengerModule->RequestModule\n\n\n\n\n\nRequestService \n\nRequestService \n\nRequestService  -->\n\nRequestModule->RequestService \n\n\n\n\n\nRequestService\n\nRequestService\n\nRequestModule -->\n\nRequestService->RequestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Request/request.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RequestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RequestController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            NatsMessengerModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RequestService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { exchangeSchema } from './Schema/exchangeRequest.schema';\nimport { NatsMessengerModule } from '@app/nats-messenger';\nimport { RequestController } from './request.controller';\nimport { RequestSchema } from './Schema/request.schema';\nimport { EventModule } from 'src/Event/event.module';\nimport { Module, forwardRef } from '@nestjs/common';\nimport { RequestService } from './request.service';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n//Module in charge of handling REQUESTS and EXCHANGES \n@Module({\n  imports: [\n    // import the database schemas in Mongoose\n    MongooseModule.forFeature([\n      { name: 'Request', schema: RequestSchema },\n      { name: 'ExchangeRequest', schema: exchangeSchema }\n    ]),\n    // import NatsMessengerModule module for NATS messenging\n    NatsMessengerModule,\n    // import the EventModule module as dependency \n    forwardRef(() => EventModule),\n  ],\n  \n  controllers: [RequestController],\n  providers: [RequestService],\n  exports:[RequestService]\n})\nexport class RequestModule{}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RpcSuccessInterceptor.html":{"url":"injectables/RpcSuccessInterceptor.html","title":"injectable - RpcSuccessInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RpcSuccessInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Interceptor/RpcSuccess.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(_context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Interceptor/RpcSuccess.interceptor.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { map } from 'rxjs/operators';\n\ninterface responsePayloadNatsInterface {\n    paginate?: object;\n    statusCode?: number;\n    datas: any;\n}\n\nfunction responsePayloadNat(values: any): responsePayloadNatsInterface {\n\n    const payload = {} as responsePayloadNatsInterface;\n    if (values?.paginate) {\n        payload.paginate = values.paginate;\n        delete values.paginate;\n    }\n    if (values?.code) {\n        payload.statusCode = values.code;\n        delete values.code;\n    }\n    if (values) {\n        payload.datas = Array.isArray(values) ? values : (Object.keys(values).length === 1 ? getFirstValue(values) : { ...JSON.parse(JSON.stringify(values)) });\n    } else {\n        payload.datas = null;\n    }\n    return payload;\n}\n\nfunction getFirstValue(values: object): string {\n    return values[Object.keys(values)[0]];\n}\n@Injectable()\nexport class RpcSuccessInterceptor {\n    intercept(_context: ExecutionContext, next: CallHandler) {\n        return next\n            .handle()\n            .pipe(map(value => responsePayloadNat(value)));\n\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RpcSuccessInterceptor-1.html":{"url":"injectables/RpcSuccessInterceptor-1.html","title":"injectable - RpcSuccessInterceptor-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RpcSuccessInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Interceptor/RpcSuccessInterceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(_context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/Interceptor/RpcSuccessInterceptor.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { map } from 'rxjs/operators';\n\ninterface responsePayloadNatsInterface {\n    paginate?: object;\n    statusCode?: number;\n    datas: any;\n}\n\nfunction responsePayloadNat(values: any): responsePayloadNatsInterface {\n\n    const payload = {} as responsePayloadNatsInterface;\n    if (values?.paginate) {\n        payload.paginate = values.paginate;\n        delete values.paginate;\n    }\n    if (values?.code) {\n        payload.statusCode = values.code;\n        delete values.code;\n    }\n    if (values) {\n        payload.datas = Array.isArray(values) ? values : (Object.keys(values).length === 1 ? getFirstValue(values) : { ...JSON.parse(JSON.stringify(values)) });\n    } else {\n        payload.datas = null;\n    }\n    return payload;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction getFirstValue(values: Object): string {\n    return values[Object.keys(values)[0]];\n}\n@Injectable()\nexport class RpcSuccessInterceptor {\n    intercept(_context: ExecutionContext, next: CallHandler) {\n        return next\n            .handle()\n            .pipe(map(value => responsePayloadNat(value)));\n\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                libs/nats-messenger/src/nats-messenger.service.ts\n            \n            injectable\n            NatsMessengerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/Event/Dto/event.dto.ts\n            \n            class\n            EventDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/Event/Dto/id.dto.ts\n            \n            class\n            IdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/Event/Schema/event.schema.ts\n            \n            class\n            Event\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/Event/Schema/event.schema.ts\n            \n            variable\n            EventSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Event/event.controller.ts\n            \n            controller\n            EventController\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/Event/event.service.ts\n            \n            injectable\n            EventService\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/Event/interface/event.interface.ts\n            \n            interface\n            EventInterface\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/Interceptor/RpcSuccess.interceptor.ts\n            \n            injectable\n            RpcSuccessInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/Interceptor/RpcSuccess.interceptor.ts\n            \n            interface\n            responsePayloadNatsInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/Interceptor/RpcSuccess.interceptor.ts\n            \n            function\n            getFirstValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Interceptor/RpcSuccess.interceptor.ts\n            \n            function\n            responsePayloadNat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Interceptor/RpcSuccessInterceptor.ts\n            \n            injectable\n            RpcSuccessInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/Interceptor/RpcSuccessInterceptor.ts\n            \n            interface\n            responsePayloadNatsInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/Interceptor/RpcSuccessInterceptor.ts\n            \n            function\n            getFirstValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Interceptor/RpcSuccessInterceptor.ts\n            \n            function\n            responsePayloadNat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Request/Dto/exchange.dto.ts\n            \n            class\n            ExchangeDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/Request/Dto/request.dto.ts\n            \n            class\n            RequestDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/Request/Schema/exchangeRequest.schema.ts\n            \n            class\n            ExchangeRequest\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/Request/Schema/exchangeRequest.schema.ts\n            \n            variable\n            exchangeSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Request/Schema/request.schema.ts\n            \n            class\n            Request\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/Request/Schema/request.schema.ts\n            \n            variable\n            RequestSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Request/interface/response.interface.ts\n            \n            interface\n            ExchangeInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/Request/interface/response.interface.ts\n            \n            interface\n            RequestInterface\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/Request/request.controller.ts\n            \n            controller\n            RequestController\n            \n                93 %\n                (15/16)\n            \n        \n        \n            \n                \n                src/Request/request.service.ts\n            \n            injectable\n            RequestService\n            \n                90 %\n                (18/20)\n            \n        \n        \n            \n                \n                src/decorators/public.decorators.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/decorators/public.decorators.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.2\n        \n            @nestjs/microservices : ^10.0.2\n        \n            @nestjs/mongoose : ^10.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            dotenv : ^16.3.1\n        \n            moment : ^2.29.4\n        \n            nats : ^2.15.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DirectionRequestEnum   (src/.../request.enum.ts)\n                        \n                        \n                            StatusRequestEnum   (src/.../request.enum.ts)\n                        \n                        \n                            TypeRequestEnum   (src/.../request.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/Request/Enum/request.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        DirectionRequestEnum\n                    \n                \n                        \n                            \n                                 oneWay\n                            \n                        \n                        \n                            \n                                Value : Aller\n                            \n                        \n                        \n                            \n                                 returnTrip\n                            \n                        \n                        \n                            \n                                Value : Retour\n                            \n                        \n                        \n                            \n                                 roundTrip\n                            \n                        \n                        \n                            \n                                Value : complet\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StatusRequestEnum\n                    \n                \n                        \n                            \n                                 pending\n                            \n                        \n                        \n                            \n                                Value : en attente\n                            \n                        \n                        \n                            \n                                 accepted\n                            \n                        \n                        \n                            \n                                Value : confirmé\n                            \n                        \n                        \n                            \n                                 refused\n                            \n                        \n                        \n                            \n                                Value : refusé\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        TypeRequestEnum\n                    \n                \n                        \n                            \n                                 request\n                            \n                        \n                        \n                            \n                                Value : Demande\n                            \n                        \n                        \n                            \n                                 proposal\n                            \n                        \n                        \n                            \n                                Value : Propose\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getFirstValue   (src/.../RpcSuccess.interceptor.ts)\n                        \n                        \n                            getFirstValue   (src/.../RpcSuccessInterceptor.ts)\n                        \n                        \n                            responsePayloadNat   (src/.../RpcSuccess.interceptor.ts)\n                        \n                        \n                            responsePayloadNat   (src/.../RpcSuccessInterceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/Interceptor/RpcSuccess.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getFirstValue\n                        \n                    \n                \n            \n            \n                \ngetFirstValue(values)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                values\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        responsePayloadNat\n                        \n                    \n                \n            \n            \n                \nresponsePayloadNat(values: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                values\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         responsePayloadNatsInterface\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/Interceptor/RpcSuccessInterceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getFirstValue\n                        \n                    \n                \n            \n            \n                \ngetFirstValue(values: Object)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                values\n                                            \n                                                            Object\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        responsePayloadNat\n                        \n                    \n                \n            \n            \n                \nresponsePayloadNat(values: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                values\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         responsePayloadNatsInterface\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMS EVENT\nBRANCHE DEV\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NatsMessengerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RequestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_EventModule\n\n\n\ncluster_EventModule_exports\n\n\n\ncluster_EventModule_providers\n\n\n\ncluster_NatsMessengerModule\n\n\n\ncluster_NatsMessengerModule_exports\n\n\n\ncluster_NatsMessengerModule_providers\n\n\n\ncluster_RequestModule\n\n\n\ncluster_RequestModule_exports\n\n\n\ncluster_RequestModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nEventService \n\nEventService \n\nEventService  -->\n\nEventModule->EventService \n\n\n\n\n\nNatsMessengerModule\n\nNatsMessengerModule\n\nEventModule -->\n\nNatsMessengerModule->EventModule\n\n\n\n\n\nRequestModule\n\nRequestModule\n\nRequestModule -->\n\nNatsMessengerModule->RequestModule\n\n\n\nAppModule -->\n\nNatsMessengerModule->AppModule\n\n\n\n\n\nNatsMessengerService \n\nNatsMessengerService \n\nNatsMessengerService  -->\n\nNatsMessengerModule->NatsMessengerService \n\n\n\nAppModule -->\n\nRequestModule->AppModule\n\n\n\n\n\nRequestService \n\nRequestService \n\nRequestService  -->\n\nRequestModule->RequestService \n\n\n\n\n\nEventService\n\nEventService\n\nEventModule -->\n\nEventService->EventModule\n\n\n\n\n\nNatsMessengerService\n\nNatsMessengerService\n\nNatsMessengerModule -->\n\nNatsMessengerService->NatsMessengerModule\n\n\n\n\n\nRequestService\n\nRequestService\n\nRequestModule -->\n\nRequestService->RequestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/responsePayloadNatsInterface.html":{"url":"interfaces/responsePayloadNatsInterface.html","title":"interface - responsePayloadNatsInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  responsePayloadNatsInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Interceptor/RpcSuccess.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            datas\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            paginate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        datas\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        datas:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paginate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paginate:         object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         object\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { map } from 'rxjs/operators';\n\ninterface responsePayloadNatsInterface {\n    paginate?: object;\n    statusCode?: number;\n    datas: any;\n}\n\nfunction responsePayloadNat(values: any): responsePayloadNatsInterface {\n\n    const payload = {} as responsePayloadNatsInterface;\n    if (values?.paginate) {\n        payload.paginate = values.paginate;\n        delete values.paginate;\n    }\n    if (values?.code) {\n        payload.statusCode = values.code;\n        delete values.code;\n    }\n    if (values) {\n        payload.datas = Array.isArray(values) ? values : (Object.keys(values).length === 1 ? getFirstValue(values) : { ...JSON.parse(JSON.stringify(values)) });\n    } else {\n        payload.datas = null;\n    }\n    return payload;\n}\n\nfunction getFirstValue(values: object): string {\n    return values[Object.keys(values)[0]];\n}\n@Injectable()\nexport class RpcSuccessInterceptor {\n    intercept(_context: ExecutionContext, next: CallHandler) {\n        return next\n            .handle()\n            .pipe(map(value => responsePayloadNat(value)));\n\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/responsePayloadNatsInterface-1.html":{"url":"interfaces/responsePayloadNatsInterface-1.html","title":"interface - responsePayloadNatsInterface-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  responsePayloadNatsInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Interceptor/RpcSuccessInterceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            datas\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            paginate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        datas\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        datas:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paginate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paginate:         object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         object\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { map } from 'rxjs/operators';\n\ninterface responsePayloadNatsInterface {\n    paginate?: object;\n    statusCode?: number;\n    datas: any;\n}\n\nfunction responsePayloadNat(values: any): responsePayloadNatsInterface {\n\n    const payload = {} as responsePayloadNatsInterface;\n    if (values?.paginate) {\n        payload.paginate = values.paginate;\n        delete values.paginate;\n    }\n    if (values?.code) {\n        payload.statusCode = values.code;\n        delete values.code;\n    }\n    if (values) {\n        payload.datas = Array.isArray(values) ? values : (Object.keys(values).length === 1 ? getFirstValue(values) : { ...JSON.parse(JSON.stringify(values)) });\n    } else {\n        payload.datas = null;\n    }\n    return payload;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction getFirstValue(values: Object): string {\n    return values[Object.keys(values)[0]];\n}\n@Injectable()\nexport class RpcSuccessInterceptor {\n    intercept(_context: ExecutionContext, next: CallHandler) {\n        return next\n            .handle()\n            .pipe(map(value => responsePayloadNat(value)));\n\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EventDocument   (src/.../event.schema.ts)\n                        \n                        \n                            ExchangeRequestDocument   (src/.../exchangeRequest.schema.ts)\n                        \n                        \n                            RequestDocument   (src/.../request.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/Event/Schema/event.schema.ts\n    \n    \n        \n            \n                \n                    \n                    EventDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/Request/Schema/exchangeRequest.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ExchangeRequestDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/Request/Schema/request.schema.ts\n    \n    \n        \n            \n                \n                    \n                    RequestDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EventSchema   (src/.../event.schema.ts)\n                        \n                        \n                            exchangeSchema   (src/.../exchangeRequest.schema.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorators.ts)\n                        \n                        \n                            Public   (src/.../public.decorators.ts)\n                        \n                        \n                            RequestSchema   (src/.../request.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/Event/Schema/event.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EventSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Event)\n                    \n                \n\n\n        \n    \n\n    src/Request/Schema/exchangeRequest.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        exchangeSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ExchangeRequest)\n                    \n                \n\n\n        \n    \n\n    src/decorators/public.decorators.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/Request/Schema/request.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RequestSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Request)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
